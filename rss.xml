<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Kotlin Programming Language]]></title><description><![CDATA[News, blog posts, projects, podcasts, videos and other. All information about Kotlin.]]></description><link>http://kotlin.link/</link><image><url>http://kotlin.link/favicon.ico</url><title>Kotlin Programming Language</title><link>http://kotlin.link/</link></image><generator>node-rss</generator><lastBuildDate>Fri, 04 Mar 2016 16:09:22 GMT</lastBuildDate><atom:link href="http://kotlin.link/rss.xml" rel="self" type="application/rss+xml"/><pubDate>Fri, 04 Mar 2016 16:09:22 GMT</pubDate><copyright><![CDATA[CC0 1.0 Universal (CC0 1.0)]]></copyright><language><![CDATA[en]]></language><managingEditor><![CDATA[ruslan@ibragimov.by (Ruslan Ibragimov)]]></managingEditor><webMaster><![CDATA[ruslan@ibragimov.by (Ruslan Ibragimov)]]></webMaster><docs>https://validator.w3.org/feed/docs/rss2.html</docs><ttl>30</ttl><category><![CDATA[Kotlin]]></category><category><![CDATA[Programming]]></category><category><![CDATA[JVM]]></category><item><title><![CDATA[[RU] Видео со встречи JUG.ru с разработчиками Kotlin]]></title><description><![CDATA[<h2>&#x427;&#x430;&#x441;&#x442;&#x44C; 1. &#x412;&#x432;&#x435;&#x434;&#x435;&#x43D;&#x438;&#x435;</h2>
<p>&#x410;&#x43D;&#x434;&#x440;&#x435;&#x439; &#x411;&#x440;&#x435;&#x441;&#x43B;&#x430;&#x432; &#x440;&#x430;&#x441;&#x441;&#x43A;&#x430;&#x436;&#x435;&#x442; &#x43F;&#x440;&#x43E; &#x442;&#x43E;, &#x447;&#x442;&#x43E; &#x442;&#x430;&#x43A;&#x43E;&#x435; Kotlin, &#x43A;&#x430;&#x43A; &#x443; &#x43D;&#x435;&#x433;&#x43E; &#x441;&#x435;&#x439;&#x447;&#x430;&#x441; &#x434;&#x435;&#x43B;&#x430; &#x438; &#x442;.&#x434;.
<a href="https://www.youtube.com/watch?v=HWyd1gYMkl0">&#x410;&#x43D;&#x434;&#x440;&#x435;&#x439; &#x411;&#x440;&#x435;&#x441;&#x43B;&#x430;&#x432; &mdash; &#x427;&#x442;&#x43E; &#x442;&#x430;&#x43A;&#x43E;&#x435; Kotlin &#x412;&#x432;&#x435;&#x434;&#x435;&#x43D;&#x438;&#x435;</a></p>
<h2>&#x427;&#x430;&#x441;&#x442;&#x44C; 2. &#x41A; &#x440;&#x435;&#x43B;&#x438;&#x437;&#x443; &#x438; &#x434;&#x430;&#x43B;&#x435;&#x435;</h2>
<p>&#x41D;&#x430;&#x447;&#x438;&#x43D;&#x430;&#x44F; &#x441; &#x432;&#x435;&#x440;&#x441;&#x438;&#x438; 1.0, Kotlin &#x43F;&#x440;&#x435;&#x434;&#x43E;&#x441;&#x442;&#x430;&#x432;&#x43B;&#x44F;&#x435;&#x442; &#x433;&#x430;&#x440;&#x430;&#x43D;&#x442;&#x438;&#x438; &#x43E;&#x431;&#x440;&#x430;&#x442;&#x43D;&#x43E;&#x439; &#x441;&#x43E;&#x432;&#x43C;&#x435;&#x441;&#x442;&#x438;&#x43C;&#x43E;&#x441;&#x442;&#x438; &#x441; &#x441;&#x443;&#x449;&#x435;&#x441;&#x442;&#x432;&#x443;&#x44E;&#x449;&#x438;&#x43C; &#x43A;&#x43E;&#x434;&#x43E;&#x43C;. &#x414;&#x43C;&#x438;&#x442;&#x440;&#x438;&#x439; &#x416;&#x435;&#x43C;&#x435;&#x440;&#x43E;&#x432; &#x440;&#x430;&#x441;&#x441;&#x43A;&#x430;&#x436;&#x435;&#x442; &#x43E; &#x442;&#x43E;&#x43C;, &#x447;&#x442;&#x43E; &#x432; &#x442;&#x43E;&#x447;&#x43D;&#x43E;&#x441;&#x442;&#x438; &#x43E;&#x43D;&#x438; &#x43E;&#x431;&#x435;&#x449;&#x430;&#x44E;&#x442; &#x43D;&#x430; &#x431;&#x443;&#x434;&#x443;&#x449;&#x435;&#x435;, &#x43E; &#x442;&#x43E;&#x43C;, &#x43A;&#x430;&#x43A; &#x44D;&#x442;&#x43E; &#x43E;&#x431;&#x435;&#x449;&#x430;&#x43D;&#x438;&#x435; &#x43F;&#x43E;&#x432;&#x43B;&#x438;&#x44F;&#x43B;&#x43E; &#x43D;&#x430; &#x434;&#x438;&#x437;&#x430;&#x439;&#x43D; &#x44F;&#x437;&#x44B;&#x43A;&#x430;, &#x438; &#x43E; &#x442;&#x43E;&#x43C;, &#x43F;&#x43E;&#x434; &#x43A;&#x430;&#x43A;&#x438;&#x435; &#x43D;&#x430;&#x43F;&#x440;&#x430;&#x432;&#x43B;&#x435;&#x43D;&#x438;&#x44F; &#x431;&#x443;&#x434;&#x443;&#x449;&#x435;&#x433;&#x43E; &#x440;&#x430;&#x437;&#x432;&#x438;&#x442;&#x438;&#x44F; &#x443;&#x436;&#x435; &#x435;&#x441;&#x442;&#x44C; &#x437;&#x430;&#x433;&#x43E;&#x442;&#x43E;&#x432;&#x43A;&#x438; &#x432; &#x432;&#x435;&#x440;&#x441;&#x438;&#x438; 1.0.
<a href="https://www.youtube.com/watch?v=m5T0M7SnCC0">&#x414;&#x43C;&#x438;&#x442;&#x440;&#x438;&#x439; &#x416;&#x435;&#x43C;&#x435;&#x440;&#x43E;&#x432;, JetBrains &mdash; Kotlin - &#x43A; &#x440;&#x435;&#x43B;&#x438;&#x437;&#x443; &#x438; &#x434;&#x430;&#x43B;&#x435;&#x435;</a></p>
<h2>&#x427;&#x430;&#x441;&#x442;&#x44C; 3. &#x421;&#x430;&#x43C;&#x43E;&#x435; &#x441;&#x43B;&#x43E;&#x436;&#x43D;&#x43E;&#x435; &mdash; &#x441;&#x43E;&#x432;&#x43C;&#x435;&#x441;&#x442;&#x438;&#x43C;&#x43E;&#x441;&#x442;&#x44C;</h2>
<p><a href="https://www.youtube.com/watch?v=LWFx4QWrTyo">&#x410;&#x43D;&#x434;&#x440;&#x435;&#x439; &#x411;&#x440;&#x435;&#x441;&#x43B;&#x430;&#x432; &mdash; Kotlin - &#x441;&#x430;&#x43C;&#x43E;&#x435; &#x441;&#x43B;&#x43E;&#x436;&#x43D;&#x43E;&#x435; &mdash; &#x441;&#x43E;&#x432;&#x43C;&#x435;&#x441;&#x442;&#x438;&#x43C;&#x43E;&#x441;&#x442;&#x44C;</a>
&#x410;&#x43D;&#x434;&#x440;&#x435;&#x439; &#x411;&#x440;&#x435;&#x441;&#x43B;&#x430;&#x432; &#x440;&#x430;&#x441;&#x441;&#x43A;&#x430;&#x436;&#x435;&#x442; &#x43E; &#x442;&#x43E;&#x43C;, &#x43A;&#x430;&#x43A; &#x43E;&#x43D;&#x438; &#x431;&#x43E;&#x440;&#x43E;&#x43B;&#x438;&#x441;&#x44C; &#x437;&#x430; &#x43F;&#x440;&#x43E;&#x437;&#x440;&#x430;&#x447;&#x43D;&#x443;&#x44E; &#x441;&#x43E;&#x432;&#x43C;&#x435;&#x441;&#x442;&#x438;&#x43C;&#x43E;&#x441;&#x442;&#x44C;: &#x447;&#x442;&#x43E;&#x431;&#x44B; Kotlin &#x438; Java &#x43C;&#x43E;&#x433;&#x43B;&#x438; &#x434;&#x440;&#x443;&#x436;&#x43D;&#x43E; &#x43E;&#x431;&#x438;&#x442;&#x430;&#x442;&#x44C; &#x432; &#x43E;&#x434;&#x43D;&#x43E;&#x43C; &#x43F;&#x440;&#x43E;&#x435;&#x43A;&#x442;&#x435;. &#x414;&#x43B;&#x44F; &#x44D;&#x442;&#x43E;&#x433;&#x43E; &#x43F;&#x440;&#x438;&#x448;&#x43B;&#x43E;&#x441;&#x44C; &#x43F;&#x440;&#x438;&#x434;&#x443;&#x43C;&#x430;&#x442;&#x44C; &#x43D;&#x435;&#x43C;&#x430;&#x43B;&#x43E; &#x43E;&#x440;&#x438;&#x433;&#x438;&#x43D;&#x430;&#x43B;&#x44C;&#x43D;&#x44B;&#x445; &#x440;&#x435;&#x448;&#x435;&#x43D;&#x438;&#x439; &#x438; &#x43F;&#x43E;&#x439;&#x442;&#x438; &#x43D;&#x430; &#x43C;&#x43D;&#x43E;&#x433;&#x438;&#x435; &#x43A;&#x43E;&#x43C;&#x43F;&#x440;&#x43E;&#x43C;&#x438;&#x441;&#x441;&#x44B; &#x43D;&#x430; &#x432;&#x441;&#x435;&#x445; &#x443;&#x440;&#x43E;&#x432;&#x43D;&#x44F;&#x445;: &#x43E;&#x442; &#x441;&#x438;&#x441;&#x442;&#x435;&#x43C;&#x44B; &#x442;&#x438;&#x43F;&#x43E;&#x432; &#x434;&#x43E; &#x43F;&#x43B;&#x430;&#x433;&#x438;&#x43D;&#x43E;&#x432; &#x43A; &#x431;&#x438;&#x43B;&#x434;-&#x441;&#x438;&#x441;&#x442;&#x435;&#x43C;&#x430;&#x43C;.</p>
<h2>&#x427;&#x430;&#x441;&#x442;&#x44C; 4. &#x421;&#x435;&#x441;&#x441;&#x438;&#x44F; &#x432;&#x43E;&#x43F;&#x440;&#x43E;&#x441;&#x43E;&#x432; &#x438; &#x43E;&#x442;&#x432;&#x435;&#x442;&#x43E;&#x432;</h2>
<p><a href="https://www.youtube.com/watch?v=YOmdOTlhZa8">&#x410;&#x43D;&#x434;&#x440;&#x435;&#x439; &#x411;&#x440;&#x435;&#x441;&#x43B;&#x430;&#x432; &#x438; &#x414;&#x43C;&#x438;&#x442;&#x440;&#x438;&#x439; &#x416;&#x435;&#x43C;&#x435;&#x440;&#x43E;&#x432; &mdash; Kotlin - &#x441;&#x435;&#x441;&#x441;&#x438;&#x44F; &#x432;&#x43E;&#x43F;&#x440;&#x43E;&#x441;&#x43E;&#x432; &#x438; &#x43E;&#x442;&#x432;&#x435;&#x442;&#x43E;&#x432;</a>
&#x410;&#x43D;&#x434;&#x440;&#x435;&#x439;, &#x414;&#x43C;&#x438;&#x442;&#x440;&#x438;&#x439; &#x438; &#x434;&#x440;&#x443;&#x433;&#x438;&#x435; &#x440;&#x430;&#x437;&#x440;&#x430;&#x431;&#x43E;&#x442;&#x447;&#x438;&#x43A;&#x438; Kotlin &#x441; &#x443;&#x434;&#x43E;&#x432;&#x43E;&#x43B;&#x44C;&#x441;&#x442;&#x432;&#x438;&#x435;&#x43C; &#x43E;&#x442;&#x432;&#x435;&#x442;&#x44F;&#x442; &#x43D;&#x430; &#x432;&#x430;&#x448;&#x438; &#x432;&#x43E;&#x43F;&#x440;&#x43E;&#x441;&#x44B;.</p>
]]></description><link>https://github.com/JavaBy/awesome-kotlin/blob/master/app/rss/articles/%5BRU%5D%20%D0%92%D0%B8%D0%B4%D0%B5%D0%BE%20%D1%81%D0%BE%20%D0%B2%D1%81%D1%82%D1%80%D0%B5%D1%87%D0%B8%20JUG.ru%20%D1%81%20%D1%80%D0%B0%D0%B7%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%87%D0%B8%D0%BA%D0%B0%D0%BC%D0%B8%20Kotlin.md</link><guid isPermaLink="true">https://github.com/JavaBy/awesome-kotlin/blob/master/app/rss/articles/%5BRU%5D%20%D0%92%D0%B8%D0%B4%D0%B5%D0%BE%20%D1%81%D0%BE%20%D0%B2%D1%81%D1%82%D1%80%D0%B5%D1%87%D0%B8%20JUG.ru%20%D1%81%20%D1%80%D0%B0%D0%B7%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%87%D0%B8%D0%BA%D0%B0%D0%BC%D0%B8%20Kotlin.md</guid><category><![CDATA[Kotlin]]></category><category><![CDATA[Video]]></category><dc:creator><![CDATA[JetBrains]]></dc:creator><pubDate>Fri, 04 Mar 2016 14:12:00 GMT</pubDate></item><item><title><![CDATA[Kotlin для начинающих]]></title><description><![CDATA[<p>&#x423;&#x436;&#x435; &#x43D;&#x435; &#x43C;&#x430;&#x43B;&#x43E; &#x43D;&#x430;&#x448;&#x443;&#x43C;&#x435;&#x43B; Kotlin &#x432; &#x43C;&#x438;&#x440;&#x435; &#x43F;&#x440;&#x43E;&#x433;&#x440;&#x430;&#x43C;&#x43C;&#x438;&#x440;&#x43E;&#x432;&#x430;&#x43D;&#x438;&#x44F;, &#x43D;&#x435; &#x43C;&#x430;&#x43B;&#x43E; &#x43F;&#x440;&#x43E;&#x444;&#x435;&#x441;&#x441;&#x438;&#x43E;&#x43D;&#x430;&#x43B;&#x44C;&#x43D;&#x44B;&#x445; &#x438;&#x43D;&#x436;&#x435;&#x43D;&#x435;&#x440;&#x43E;&#x432; &#x443;&#x436;&#x435; &#x43E;&#x431;&#x440;&#x430;&#x442;&#x438;&#x43B; &#x43D;&#x430; &#x43D;&#x435;&#x433;&#x43E; &#x432;&#x43D;&#x438;&#x43C;&#x430;&#x43D;&#x438;&#x435;, &#x43D;&#x43E; &#x442;&#x430;&#x43A;&#x436;&#x435; &#x435;&#x441;&#x442;&#x44C; &#x438; &#x442;&#x435; &#x43A;&#x43E;&#x43C;&#x443; &#x43E;&#x43D; &#x43D;&#x435; &#x441;&#x438;&#x43C;&#x43F;&#x430;&#x442;&#x438;&#x437;&#x438;&#x440;&#x443;&#x435;&#x442;.</p>
<p><img src="https://habrastorage.org/files/a52/453/729/a52453729bd64cb3b5ca8a4892e45cc1.png" alt="Kotlin"></p>
<p>&#x412; &#x434;&#x430;&#x43D;&#x43D;&#x43E;&#x43C; &#x442;&#x43E;&#x43F;&#x438;&#x43A;&#x435; &#x44F; &#x431;&#x44B; &#x445;&#x43E;&#x442;&#x435;&#x43B; &#x43E;&#x431;&#x440;&#x430;&#x442;&#x438;&#x442;&#x44C; &#x432;&#x43D;&#x438;&#x43C;&#x430;&#x43D;&#x438;&#x435; &#x442;&#x435;&#x445; &#x43D;&#x430;&#x447;&#x438;&#x43D;&#x430;&#x44E;&#x449;&#x438;&#x445; &#x43F;&#x440;&#x43E;&#x433;&#x440;&#x430;&#x43C;&#x43C;&#x438;&#x441;&#x442;&#x43E;&#x432; &#x43A;&#x43E;&#x442;&#x43E;&#x440;&#x44B;&#x435; &#x432;&#x43E;&#x437;&#x43C;&#x43E;&#x436;&#x43D;&#x43E; &#x442;&#x43E;&#x43B;&#x44C;&#x43A;&#x43E; &#x434;&#x435;&#x43B;&#x430;&#x44E;&#x442; &#x441;&#x432;&#x43E;&#x439; &#x432;&#x44B;&#x431;&#x43E;&#x440; &#x44F;&#x437;&#x44B;&#x43A;&#x430; &#x43F;&#x440;&#x43E;&#x433;&#x440;&#x430;&#x43C;&#x43C;&#x438;&#x440;&#x43E;&#x432;&#x430;&#x43D;&#x438;&#x44F;, &#x43A;&#x43E;&#x442;&#x43E;&#x440;&#x43E;&#x43C;&#x443; &#x431;&#x44B; &#x445;&#x43E;&#x442;&#x435;&#x43B;&#x438; &#x43F;&#x43E;&#x441;&#x432;&#x44F;&#x442;&#x438;&#x442;&#x44C; &#x441;&#x432;&#x43E;&#x44E; &#x436;&#x438;&#x437;&#x43D;&#x44C; &#x442;&#x430;&#x43A; &#x441;&#x43A;&#x430;&#x437;&#x430;&#x442;&#x44C;.</p>
<p>&#x42F; &#x441;&#x430;&#x43C; Java Developer &#x438; &#x434;&#x43B;&#x44F; &#x43C;&#x435;&#x43D;&#x44F; &#x43D;&#x430;&#x441;&#x442;&#x443;&#x43F;&#x438;&#x43B; &#x442;&#x43E;&#x442; &#x43F;&#x435;&#x440;&#x438;&#x43E;&#x434; &#x44F; &#x43A;&#x43E;&#x433;&#x434;&#x430; &#x445;&#x43E;&#x442;&#x435;&#x43B;&#x43E;&#x441;&#x44C; &#x43F;&#x43E;&#x441;&#x43C;&#x43E;&#x442;&#x440;&#x435;&#x442;&#x44C; &#x43D;&#x430; &#x434;&#x440;&#x443;&#x433;&#x438;&#x435; &#x44F;&#x437;&#x44B;&#x43A;&#x438;, &#x432;&#x437;&#x44F;&#x442;&#x44C; &#x43A;&#x430;&#x43A;&#x438;&#x435;-&#x442;&#x43E; &#x43F;&#x440;&#x430;&#x43A;&#x442;&#x438;&#x43A;&#x438; &#x434;&#x43B;&#x44F; &#x441;&#x435;&#x431;&#x44F; &#x441; &#x43D;&#x438;&#x445;.</p>
<p>&#x418; &#x43E;&#x434;&#x43D;&#x430;&#x436;&#x434;&#x44B; &#x43F;&#x440;&#x438;&#x43C;&#x435;&#x440;&#x43D;&#x43E; &#x432; 2013 &#x433;&#x43E;&#x434;&#x443; &#x44F; &#x443;&#x441;&#x43B;&#x44B;&#x448;&#x430;&#x43B; &#x447;&#x442;&#x43E; &#x442;&#x430; &#x43F;&#x440;&#x435;&#x43A;&#x440;&#x430;&#x441;&#x43D;&#x430;&#x44F; &#x43A;&#x43E;&#x43C;&#x43F;&#x430;&#x43D;&#x438;&#x44F; &#x434;&#x435;&#x43B;&#x430;&#x44E;&#x449;&#x430;&#x44F; &#x442;&#x430;&#x43A;&#x438;&#x435; &#x43A;&#x440;&#x443;&#x442;&#x44B;&#x435; &#x43F;&#x440;&#x43E;&#x434;&#x443;&#x43A;&#x442;&#x44B; &#x43A;&#x430;&#x43A; <strong>Intellij IDEA</strong>, <strong>Youtrack</strong> &#x430; &#x438;&#x43C;&#x435;&#x43D;&#x43D;&#x43E; <a href="https://www.jetbrains.com/">JetBrains</a>, &#x430;&#x43D;&#x43E;&#x43D;&#x441;&#x438;&#x440;&#x43E;&#x432;&#x430;&#x43B;&#x430; &#x43E; &#x43D;&#x43E;&#x432;&#x43E;&#x43C; &#x44F;&#x437;&#x44B;&#x43A;&#x435; <a href="https://kotlinlang.org/">Kotlin</a>, &#x43A;&#x43E;&#x442;&#x43E;&#x440;&#x44B;&#x439; &#x43D;&#x430; &#x442;&#x43E; &#x432;&#x440;&#x435;&#x43C;&#x44F; &#x431;&#x44B;&#x43B; &#x432; &#x430;&#x43A;&#x442;&#x438;&#x432;&#x43D;&#x43E;&#x439; &#x441;&#x442;&#x430;&#x434;&#x438;&#x438; &#x440;&#x430;&#x437;&#x440;&#x430;&#x431;&#x43E;&#x442;&#x43A;&#x438;.</p>
<p>&#x418; &#x432; &#x44D;&#x442;&#x43E;&#x43C; &#x433;&#x43E;&#x434;&#x443; &#x430; &#x438;&#x43C;&#x435;&#x43D;&#x43D;&#x43E; 15 &#x444;&#x435;&#x432;&#x440;&#x430;&#x43B;&#x44F; 2016 &#x433;&#x43E;&#x434;&#x430; &#x431;&#x44B;&#x43B; &#x432;&#x44B;&#x43F;&#x443;&#x448;&#x435;&#x43D; &#x440;&#x435;&#x43B;&#x438;&#x437; <strong>Kotlin 1.0</strong>. &#x421; &#x44D;&#x442;&#x43E;&#x433;&#x43E; &#x43C;&#x43E;&#x43C;&#x435;&#x43D;&#x442;&#x430; &#x44F; &#x43D;&#x430;&#x447;&#x430;&#x43B; &#x443;&#x436;&#x435; &#x431;&#x43E;&#x43B;&#x435;&#x435; &#x430;&#x43A;&#x442;&#x438;&#x432;&#x43D;&#x435;&#x439; &#x435;&#x433;&#x43E; &#x438;&#x437;&#x443;&#x447;&#x430;&#x442;&#x44C; &#x438; &#x43F;&#x44B;&#x442;&#x430;&#x442;&#x44C;&#x441;&#x44F; &#x43F;&#x440;&#x438;&#x43C;&#x435;&#x43D;&#x44F;&#x442;&#x44C; &#x432; &#x43D;&#x435;&#x431;&#x43E;&#x43B;&#x44C;&#x448;&#x438;&#x445; &#x441;&#x432;&#x43E;&#x438; &#x43F;&#x440;&#x43E;&#x435;&#x43A;&#x442;&#x430;&#x445;.</p>
<h2>Kotlin &#x434;&#x43B;&#x44F; &#x43D;&#x430;&#x447;&#x438;&#x43D;&#x430;&#x44E;&#x449;&#x438;&#x445;</h2>
<p>&#x418; &#x44D;&#x442;&#x438;&#x43C; &#x43F;&#x43E;&#x441;&#x442;&#x43E;&#x43C; &#x44F; &#x431;&#x44B; &#x445;&#x43E;&#x442;&#x435;&#x43B; &#x43F;&#x43E;&#x434;&#x435;&#x43B;&#x438;&#x442;&#x441;&#x44F; &#x441;&#x435;&#x440;&#x438;&#x435;&#x439; &#x432;&#x438;&#x434;&#x435;&#x43E; &#x432; &#x43A;&#x43E;&#x442;&#x43E;&#x440;&#x43E;&#x439; &#x44F; &#x43D;&#x430;&#x447;&#x430;&#x43B; &#x434;&#x435;&#x43B;&#x438;&#x442;&#x441;&#x44F; &#x432;&#x441;&#x435;&#x43C; &#x442;&#x435;&#x43C; &#x447;&#x442;&#x43E; &#x44F; &#x438;&#x437;&#x443;&#x447;&#x438;&#x43B; &#x437;&#x430; &#x44D;&#x442;&#x43E; &#x432;&#x440;&#x435;&#x43C;&#x44F; &#x43A;&#x430;&#x441;&#x430;&#x435;&#x43C;&#x43E; Kotlin.</p>
<p><strong>&#x423;&#x440;&#x43E;&#x43A; 0. &#x412;&#x432;&#x435;&#x434;&#x435;&#x43D;&#x438;&#x435; &#x438; &#x437;&#x43D;&#x430;&#x43A;&#x43E;&#x43C;&#x441;&#x442;&#x432;&#x43E;</strong>
<a href="https://www.youtube.com/watch?v=L9k_NdTaMeI">https://www.youtube.com/watch?v=L9k_NdTaMeI</a></p>
<p><strong>&#x423;&#x440;&#x43E;&#x43A; 1. String Templates</strong>
<a href="https://www.youtube.com/watch?v=frw1DpNm_ms">https://www.youtube.com/watch?v=frw1DpNm_ms</a></p>
<p>&#x41F;&#x43E;&#x43A;&#x430; &#x43F;&#x43B;&#x430;&#x43D;&#x438;&#x440;&#x443;&#x44E; &#x432;&#x44B;&#x43A;&#x43B;&#x430;&#x434;&#x44B;&#x432;&#x430;&#x442;&#x44C; &#x434;&#x432;&#x430; &#x432;&#x438;&#x434;&#x435;&#x43E; &#x432; &#x43D;&#x435;&#x434;&#x435;&#x43B;&#x44E;, &#x432;&#x435;&#x441;&#x44C; &#x441;&#x43F;&#x438;&#x441;&#x43E;&#x43A; &#x431;&#x443;&#x434;&#x435;&#x442; <a href="https://goo.gl/yegW0d">&#x442;&#x443;&#x442;</a>.
&#x421;&#x43F;&#x430;&#x441;&#x438;&#x431;&#x43E; &#x437;&#x430; &#x432;&#x430;&#x448;&#x435; &#x432;&#x43D;&#x438;&#x43C;&#x430;&#x43D;&#x438;&#x435;, &#x438; &#x43D;&#x430;&#x434;&#x435;&#x44E;&#x441;&#x44C;, &#x434;&#x430;&#x43D;&#x43D;&#x430;&#x44F; &#x438;&#x43D;&#x444;&#x43E;&#x440;&#x43C;&#x430;&#x446;&#x438;&#x44F; &#x43A;&#x43E;&#x43C;&#x443;-&#x442;&#x43E; &#x431;&#x443;&#x434;&#x435;&#x442; &#x43F;&#x43E;&#x43B;&#x435;&#x437;&#x43D;&#x43E;!</p>
]]></description><link>https://habrahabr.ru/post/278277/</link><guid isPermaLink="true">https://habrahabr.ru/post/278277/</guid><category><![CDATA[Kotlin]]></category><dc:creator><![CDATA[@Devcolibri]]></dc:creator><pubDate>Wed, 02 Mar 2016 12:18:00 GMT</pubDate></item><item><title><![CDATA[Developing on Android sucks a lot less with Kotlin]]></title><description><![CDATA[<p><img src="https://wiredcraft.com/images/posts/Android-app-development-Kotlin.jpg" alt="Kotlin"></p>
<p>While Android development has improved tremendously in the past few years, many think that it still sucks when compared to iOS. A lot of folks are working hard to make it better, maybe even enjoyable. And <a href="https://kotlinlang.org/">Kotlin</a>, a new programming language, seems to be headed in that direction. Having been brought onboard by Starbucks in China to work on their mobile apps, we&#x27;ve been experimenting with Kotlin as a viable option to improving the UX of the Android app and making it overall more maintainable.</p>
<h2>What is Kotlin?</h2>
<p><a href="https://kotlinlang.org/">Kotlin</a> is a new language from the guys at JetBrain, the team behind Intellij, Android Studio, and some of the best IDE in the industry. Essentially, Kotlin is an evolution of the Java syntax. Its source code can be compiled to JVM bytecode and it has 100% interoperability with Java. JetBrain even recently added the ability to compile Kotlin code to JavaScript, potentially broadening its reach.</p>
<h2>Who should use Kotlin?</h2>
<p>So, who is Kotlin for? Newbies or experts?</p>
<p>I would argue both.</p>
<p>Newbies can enjoy a cleaner and more concise syntax and avoid a lot of beginner&#x27;s mistakes people usually run into with Java. Experts will also most likely enjoy the cleaner syntax, and most likely find themselves more productive for it.</p>
<h2>What makes Kotlin different?</h2>
<p>If you hate Java, Kotlin may be your solution. In many ways, it &quot;fixes&quot; Java, especially for Android. While the next major release of Java (8) looks pretty promising and brings a lot of modern language features (e.g. lambda and functional programming), there&#x27;s no official schedule yet for when it will be made available for the Android platform. Kotlin is available right now.</p>
<p>Let&#x27;s have a what it brings:</p>
<h3>1. Cleaner syntax</h3>
<p>Here&#x27;s a &quot;Hello world&quot; in Kotlin:</p>
<pre><code class="hljs language-kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">(args: <span class="hljs-type">Array&lt;String&gt;</span>)</span> {</span>
  println(<span class="hljs-string">"Hello, World!"</span>)
}</code></pre>
<p>Compared to Java:</p>
<pre><code class="hljs language-java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloWorld</span> </span>{
  <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
  <span class="hljs-comment">//Prints "Hello, World" to the terminal window.System.out.println("Hello, World");</span>
  }
}</code></pre>
<p>I think you&#x27;ll agree that Kotlin is much cleaner and way more concise.</p>
<h3>2. Null safety</h3>
<p>How many times did you run into a <code>Null Pointer Exception</code> while developing or testing? Kotlin takes all <code>null</code> value checks from runtime to compile time. By doing so, it ensures null safety for any code that passes compilation.</p>
<p>For example, the Java code below can be compiled, but will throw a <code>Null Pointer Exception</code> at runtime.</p>
<pre><code class="hljs language-java">String a  = <span class="hljs-keyword">null</span>;
System.out.println(a.length());</code></pre>
<p>With Kotlin, variables are not nullable by default. For example, this piece of Kotlin code won&#x27;t compile:</p>
<pre><code class="hljs language-kotlin"><span class="hljs-variable"><span class="hljs-keyword">val</span> a</span>:String = <span class="hljs-literal">null</span></code></pre>
<p>But if you really want to allow some variable to have null value, you can add a question mark:</p>
<pre><code class="hljs language-kotlin"><span class="hljs-variable"><span class="hljs-keyword">val</span> a</span>: String? = <span class="hljs-literal">null</span>
println(a?.length())</code></pre>
<p>In the example above, the first <code>?</code> is used to make the variable <code>a</code> nullable, the second <code>?</code> is just to check if the value of <code>a</code> is null.</p>
<h3>3. Functional programming</h3>
<p>One of the most important changes in Java 8 is lambda. While we&#x27;re waiting for this to come to the Android platform, Kotlin can already add a lot of high-order functional programming features on top of Java 6.</p>
<p>By &quot;high-order,&quot; I mean a function that can take another function as a parameter or return a function. For example, many programming languages have the <code>filter</code> function, which can take a Collection-like data structure and a function to filter the elements in the Collection that doesn&#x27;t meet certain criteria. Then return a subset of the original Collection.</p>
<p>This is how you might implement a <code>filter</code> function in Kotlin:</p>
<pre><code class="hljs language-kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-type">&lt;T&gt;</span> <span class="hljs-title">filter</span><span class="hljs-params">(items: <span class="hljs-type">Collection&lt;T&gt;, f: (T</span>)</span> -&gt; <span class="hljs-keyword">Boolean</span>): List<span class="hljs-type">&lt;T&gt;</span> {</span>
  <span class="hljs-variable"><span class="hljs-keyword">val</span> newItems</span> = arrayListOf<span class="hljs-type">&lt;T&gt;</span>()
  <span class="hljs-keyword">for</span> (item <span class="hljs-keyword">in</span> items) <span class="hljs-keyword">if</span> (f(item)) newItems.add(item)
  <span class="hljs-keyword">return</span> newItems
}</code></pre>
<p>Then you can use it on a Collection data structure:</p>
<pre><code class="hljs language-kotlin">filter(numbers, { value -&gt;
  value &gt;= 5
})</code></pre>
<p>Pretty clean implementation right? Wait, it can be even cleaner by using the special <code>it</code> keyword that represents each item inside the collection:</p>
<pre><code class="hljs language-kotlin">filter(numbers) { it &gt;= 5 }</code></pre>
<h2>Minimum overhead</h2>
<p>Beyond adding features, the Kotlin language is actually pretty small. For the latest version to this day (<code>1.0.0-beta-4584</code>), runtime and standard library are a few kilobytes in size. It won&#x27;t add much weight to your project.</p>
<p>The features we mentioned previously are just a few things that Kotlin brings to the table. For more, I suggest checking out the <a href="https://kotlinlang.org/docs/reference/">official reference page</a>.</p>
<h2>Using Kotlin on Android Studio</h2>
<p>The author of Kotlin is also the author of some of the most popular IDE out there. There are official plugins for Eclipse, IntelliJ IDEA, and standalone command line compiler as well. Since we&#x27;re focusing on Android, here are a few tips for Android Studio:</p>
<ol>
<li>Download and install Intellij IDEA/Android Studio plugin. You can install it through the IDE preference panel or download if from JetBrain site.</li>
</ol>
<p><img src="https://wiredcraft.com/images/posts/Kotlin-android-app-development-2.png" alt="android-studio-Kotlin-development"></p>
<ol start="2">
<li>Once you have the plugin installed, you can start using it. If you&#x27;re trying to convert an existing Java project, simply click <code>Code &rarr; Convert Java File to Kotlin File</code> in the menu bar. Kotlin will convert the source Java code to Kotlin code. Alternatively, if you&#x27;re starting a project from scratch, you can create a new Java project and then convert all <code>.java</code> files into <code>.kt</code> files. Not the best, but hopefully Google and JetBrain will learn to play nice with each other in the future.</li>
</ol>
<p><img src="https://wiredcraft.com/images/posts/Kotlin-android-app-development-3.png" alt="android-studio-Kotlin-development"></p>
<p>That&#x27;s it!</p>
<h2>Conclusion</h2>
<p>Kotlin probably isn&#x27;t as hot in the Android community as Swift is for the iOS world, but the number of libraries is growing. Being interoperable with Java 6 and backed up by JetBrain should put you at ease with investing in it; it will be around for a long time.</p>
<p>Kotlin fixed a lot of the issues we had with developing for Android. There&#x27;s still room for improvement, but I encourage all of you out there who shared the frustrations of building Android apps to give it a try on your next project.</p>
<p>And finally, if you&#x27;re looking for a rock-solid team of nerds and creatives in NYC, Berlin, or Shanghai to work on your next Android or iOS project, <a href="http://twitter.com/wiredcraft">reach out on Twitter</a> or shoot us an email either <a href="https://wiredcraft.typeform.com/to/GG4GQz">on our site</a> or at <a href="mailto:info@wiredcraft.com">info@wiredcraft.com</a>.</p>
]]></description><link>https://wiredcraft.com/blog/android-apps-development-kotlin/</link><guid isPermaLink="true">https://wiredcraft.com/blog/android-apps-development-kotlin/</guid><category><![CDATA[Android]]></category><category><![CDATA[Kotlin]]></category><dc:creator><![CDATA[Kuno Qing]]></dc:creator><pubDate>Mon, 29 Feb 2016 21:00:00 GMT</pubDate></item><item><title><![CDATA[Kotlin & Android: A Brass Tacks Experiment, Part 5]]></title><description><![CDATA[<p><img src="https://cdn-images-1.medium.com/max/800/1*UN-S8ELMC2kpHf4tJKfbLQ.png" alt="Header Picture"></p>
<p><em>Disclaimer: I am a Google employee, but the views expressed in this article are not those of my employer.</em></p>
<h2>Kotlin &amp; Android: A Brass Tacks Experiment, Part 5</h2>
<p>Well, we&rsquo;ve made it to part 5 in an ongoing weekly blog about my experiences using the Kotlin&reg; language to do useful things for Android development. If you&rsquo;ve landed here randomly or unexpectedly, perhaps you&rsquo;d like to jump to one of the prior parts first and catch up to where we are now?</p>
<p><a href="https://medium.com/p/kotlin-android-a-brass-tacks-experiment-part-1-3e5028491bcc">Part 1</a> (setup) | <a href="https://medium.com/p/kotlin-android-a-brass-tacks-experiment-part-2-c67661cfdf5f">Part 2</a> (code starts here) | <a href="https://medium.com/p/kotlin-android-a-brass-tacks-experiment-part-3-84e65d567a37">Part 3</a> | <a href="https://medium.com/p/kotlin-android-a-brass-tacks-experiment-part-4-4b7b501fa457">Part 4</a></p>
<p>At this point, we have a pretty good way of expressing the creation of an Android view hierarchy with fewer keystrokes than the equivalent XML resource, and <em>far</em> fewer than the equivalent written purely in the Java&reg; language. Its syntax is declarative, the nesting of views is obvious, and we know how to use Kotlin <em>extension functions</em> to add convenient utility functions as needed.</p>
<p>But we left things last time with an awkward situation while trying to set a view&rsquo;s left padding. Here&rsquo;s what it looks like currently to set padding. Note that we have to call setPadding() with its four arguments instead of assigning to a <em>synthetic property</em> that&rsquo;s derived from JavaBeans-style getters and setters:</p>
<pre><code class="hljs language-kotlin">v<span class="hljs-type">&lt;TextView&gt;</span> {
    layoutParams = LayoutParams(WRAP_CONTENT, WRAP_CONTENT)
    setPadding(dp_i(<span class="hljs-number">16</span>), <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)  <span class="hljs-comment">// bleh - it's not consistent</span>
    text = <span class="hljs-string">"Hello"</span>
}</code></pre>
<p>To be consistent in this view builder code, we would rather specify the left padding directly by assignment instead of calling a method with four parameters. At first blush, you might consider using another extension function to attach an extension method called &ldquo;setLeftPadding(int)&rdquo; to the View class. You could do this, but then you wouldn&rsquo;t actually be able to refer to it as &ldquo;leftPadding = dp_i(16)&rdquo; in the <em>lambda with receiver</em>. It turns out that member functions that look like JavaBeans-style accessors that are <em>defined in Kotlin</em> don&rsquo;t get automatically converted into synthetic properties like member methods <em>defined in Java classes</em>. Bummer... but not really!</p>
<p>Instead, Kotlin also allows you to define <em>extension properties</em>, which allow a syntax that looks just like the synthetic properties for Java class methods that we&rsquo;ve been using so far. An extension property is grafted onto an existing class just like a Kotlin extension method so you can access them on instances of that class, assuming the extension property is imported into your code.</p>
<p>So what we can do is define extension properties to set padding values in a way that&rsquo;s consistent with the other synthetic properties of view. I&rsquo;ll just show a single property here for left padding; the others follow suit:</p>
<pre><code class="hljs language-kotlin"><span class="hljs-variable"><span class="hljs-keyword">var</span> View.padLeft</span>: <span class="hljs-keyword">Int</span>
    <span class="hljs-comment">// Specify the setter behavior; value is the assigned Int</span>
    <span class="hljs-keyword">set</span>(value) {
        <span class="hljs-comment">// Use View.setPadding to set left padding value,</span>
        <span class="hljs-comment">// uses Kotlin synthetic properties for the others</span>
        setPadding(value, paddingTop, paddingRight, paddingBottom)
    }
    <span class="hljs-comment">// Specify the getter behavior</span>
    <span class="hljs-keyword">get</span>() {
        <span class="hljs-keyword">return</span> paddingLeft
    }</code></pre>
<p>Using this &ldquo;padLeft&rdquo; extension property, our earlier TextView creation can now be written like this:</p>
<pre><code class="hljs language-kotlin">v<span class="hljs-type">&lt;TextView&gt;</span> {
    layoutParams = LayoutParams(WRAP_CONTENT, WRAP_CONTENT)
    padLeft = dp_i(<span class="hljs-number">16</span>)  <span class="hljs-comment">// ahhh - much better!</span>
    text = <span class="hljs-string">"Hello"</span>
}</code></pre>
<p>Consistency in assignment for all the properties. Excellent!</p>
<p>There&rsquo;s a few things to note about the padLeft extension property:</p>
<ul>
<li>It uses a syntax similar to the &ldquo;class dot function&rdquo; notation for extension functions, but now it&rsquo;s &ldquo;class dot property&rdquo;.</li>
<li>The property type is given after the colon.</li>
<li>It&rsquo;s declared using &ldquo;var&rdquo;, which is Kotlin&rsquo;s way of saying a variable or property is <em>mutable</em>. This means we can assign values directly to it. (On the other hand, &ldquo;val&rdquo; properties are <em>immutable</em> and can only be read.)</li>
<li>An extension property that&rsquo;s mutable requires us to provide both a getter and setter implementation. (Likewise, an immutable property requires only a getter).</li>
</ul>
<p>The implementation of the padLeft <em>setter</em> is defined in terms the existing setPadding() method of View. It takes the value provided from the right hand side of the assignment expression and uses that as the first parameter to setPadding(), along with the values of synthetic properties for the other existing padding values of the TextView. Below the setter, the implementation of the padLeft <em>getter</em> is simply defined using the View&rsquo;s existing &ldquo;paddingLeft&rdquo; synthetic property.</p>
<p>Side note: I find it somewhat ironic that Android&rsquo;s View class provides JavaBeans-style <em>getters</em> for each directional padding metric but <em>not setters</em>. Oh well, we fixed it with extension properties!</p>
<p>If you ever need more from a class API that you don&rsquo;t control, just add what you want with Kotlin&rsquo;s extension functions and properties. &#x1F603;</p>
<h2>Any other Kotlin tricks to share?</h2>
<p>There a couple more simple tricks that can be used to tighten up the syntax even more. One trick allows you to get rid of all references to &ldquo;v&rdquo; in your view builder expressions, and another will make it easier to specify complicated layout parameters. So check in next time to see how these work!</p>
<p>As usual, you can follow me <a href="https://medium.com/@CodingDoug">here on Medium</a> and also <a href="https://twitter.com/CodingDoug">on Twitter as CodingDoug</a> to get notified of the next part to this series. I hope you&rsquo;ve found it useful for learning Kotlin language features as well as learning some new things about Android views.</p>
]]></description><link>https://medium.com/@CodingDoug/kotlin-android-a-brass-tacks-experiment-part-5-bd79eb9c85d4#.tyblv8pv8</link><guid isPermaLink="true">https://medium.com/@CodingDoug/kotlin-android-a-brass-tacks-experiment-part-5-bd79eb9c85d4#.tyblv8pv8</guid><category><![CDATA[Kotlin]]></category><category><![CDATA[Android]]></category><dc:creator><![CDATA[Doug Stevenson]]></dc:creator><pubDate>Tue, 01 Mar 2016 19:14:00 GMT</pubDate></item><item><title><![CDATA[Kotlin Month Post 1: Assorted Features]]></title><description><![CDATA[<p>To open up Kotlin Month, we&rsquo;ll look at a small assortment of Kotlin&rsquo;s features that aren&rsquo;t big enough to merit their own post and don&rsquo;t fit into a grouping for the upcoming posts, starting with operator overloading.</p>
<h2>Operator Overloading</h2>
<p>Because of the mess it made in C++, Java decided to not include <a href="https://kotlinlang.org/docs/reference/operator-overloading.html">operator overloading</a>, and it has unfortunately stuck to that decision, presumably because people haven&rsquo;t made a big enough stink about it. This makes sense if a majority of Java programmers haven&rsquo;t had much/any experience with a language that does, which I think may be the case at this point.</p>
<p>My opinion is that it isn&rsquo;t specifically operator overloading that was the problem in C++; the problem was the free reign to invent whatever operators you wanted. This is still technically possible in Kotlin (see the next feature), but it&rsquo;s still harder to abuse in its case. And obviously, operators can still be abused and used in ways they&rsquo;re not meant to be, but that applies for just about anything in programming.</p>
<p>Anyway, I really enjoy the increased readability and conciseness of properly used operators over functions, so it&rsquo;s nice to have.</p>
<h2>Infix &ldquo;Operator&rdquo; Methods</h2>
<p>Using the <a href="https://kotlinlang.org/docs/reference/functions.html#infix-notation">infix notation</a> for functions allows Kotlin to allow extending the list of available &ldquo;operators&rdquo; without falling into the same deep pit that C++ did by limiting them to legal method names. By doing so, they kept coders from using symbols that had no inherent meaning, making it much more likely that people will be able to decipher the meaning of the operator, assuming it&rsquo;s named well.</p>
<p>One pointer I would give to those considering infixing one of their functions is that you shouldn&rsquo;t use them in the case where they&rsquo;re meant to be chained in a fluent interface. It can become very difficult to distinguish between objects and operators, since they&rsquo;re all just a bunch of identifiers. A potential exception to this rule is an internal DSL that is meant to be used in a configuration-like file.</p>
<p>For the most part, I don&rsquo;t think this feature will be used a whole lot, but I can definitely see enough use cases to make it a valuable part of Kotlin.</p>
<h2>Streaming</h2>
<p>Of all the features of all the languages out there, being able to filter, map, and reduce over a collection declaratively is probably my all-time favorite. Kotlin does not disappoint, to this end. Being required to compile to Java 6, they didn&rsquo;t automatically have access to the new Stream API, so they made their own essentially, called <a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin.sequences/-sequence/index.html">Sequence</a>. It is largely the same idea, but doesn&rsquo;t support doing the work in parallel. Luckily, it makes up for it by having an even larger set of methods to use. Not only that, but the collections themselves (and even Iterators) have the same set (or at least similar set) of methods as a Sequence, making it so you don&rsquo;t have to make the Stream or Sequence instance to do a simple filter or map. Unfortunately, doing the calls from a collection or iterator is eager and creates (usually) a List right away. That&rsquo;s what Sequence is for: to make it lazy.</p>
<p>I really like that they 1) made Iterators be iterable (meaning you can put Iterators directly into a for loop, just like in Python; the iterator() method simply returns &ldquo;this&rdquo;) and 2) the streaming methods can be called from iterators, too, so you don&rsquo;t need an eagerly created collection to start with.</p>
<p>Also, <a href="https://kotlinlang.org/docs/reference/ranges.html">Ranges</a> allow for the quick creation of numbers to iterate over as well as checking if a value is within it.</p>
<p>And Strings are iterable!</p>
<h2>Data Classes</h2>
<p><a href="https://kotlinlang.org/docs/reference/data-classes.html">Data classes</a> are a quick, easy way to make bean-like classes in Kotlin. By annotating a class with &ldquo;data&rdquo;, it will use all the properties defined in the primary constructor to define toString(), hashCode(), equals(), and the <a href="https://kotlinlang.org/docs/reference/multi-declarations.html">component functions</a>. It also creates a <a href="https://kotlinlang.org/docs/reference/data-classes.html#copying">copy() method</a> that is pretty awesome.</p>
<p>In an older article, I tried to recreate this for Python, then someone commented that it pretty much already existed as named tuples :P</p>
<h2>Outro</h2>
<p>I could on and on, as everything that Kotlin does differently from Java is generally pretty good, but then I&rsquo;d be digging a bit too deep into the minutia of it all and bore you. If you want to learn more about it, check out <a href="https://programmingideaswithjake.wordpress.com/kotlin/">my other Kotlin articles</a> or look at <a href="https://kotlinlang.org/docs/reference/">Kotlin&rsquo;s awesome reference page</a>.</p>
<p>Next week, I&rsquo;ll be shouting my praises of Kotlin&rsquo;s decisions about inheritance, its special cases, and defaults.</p>
]]></description><link>https://programmingideaswithjake.wordpress.com/2016/02/27/kotlin-month-post-1-assorted-features/</link><guid isPermaLink="true">https://programmingideaswithjake.wordpress.com/2016/02/27/kotlin-month-post-1-assorted-features/</guid><category><![CDATA[Kotlin]]></category><dc:creator><![CDATA[Jacob Zimmerman]]></dc:creator><pubDate>Sat, 27 Feb 2016 03:00:00 GMT</pubDate></item><item><title><![CDATA[Kotlin - 2 Years On]]></title><description><![CDATA[<p>I <a href="https://yobriefca.se/blog/2012/07/14/kotlin-heres-what-i-think-for-now/">first played</a> with Kotlin back in 2012, I&#x27;ve written some Android apps with and without it and generally played around with it. Since the <a href="http://blog.jetbrains.com/kotlin/2016/02/kotlin-1-0-released-pragmatic-language-for-jvm-and-android/">release of Kotlin 1.0</a> a few days ago I&#x27;ve decided to jump back into it and see if my original views still hold up.</p>
<blockquote>
<p>Herein lies opinion of the personal kind. Proceed with an open mind.</p>
</blockquote>
<p>Scala is my day job, not only Scala but <strong>legacy/old</strong> Scala. Not only that but <strong>a lot</strong> of legacy/old Scala. Worse still not only a lot of legacy/old Scala but a lot of <strong>other peoples</strong> legacy/old Scala. Thanks to the feature rich and impressively flexible nature of Scala this means there is a lot of sharp edges, unpredictability and a fresh arduous learning curve for each functional area. It can seem like a language designed by <a href="https://en.wikipedia.org/wiki/At%C3%AB">At&euml;</a> at times.</p>
<p>Java is no better of course, it just resides at the other end of a spectrum, with its anaemic yet rigid feature set and almost pointless type system it&#x27;s no wonder you see so many over-engineered and baklava-class layered solutions. Yeah Java 8 has improved the language a fair bit but the sacrifices made for backwards compatibility has meant those changes don&#x27;t often go far enough.</p>
<p>Both Scala and Java require a lot of work to simplify so there has to be a middle ground and I (still) think that middle ground is Kotlin.</p>
<p>Think of Kotlin as C# for the JVM, Scala the Good Parts, Java++ or simply a decent general purpose language that won&#x27;t require the blood of your first born. It&#x27;s created by Jetbrains, it&#x27;s about 5ish years old and just gone version 1.0. It is used extensively on Jetbrains products, being hailed as &quot;Swift for Android&quot; and works seamlessly within a mixed code base. It offers features similar to C# Extension methods, Scala implicits, Scala case classes, multiple inheritance and solid collection functionality like LINQ. It doesn&#x27;t just ape Scala and C# features but introduces relatively original concepts like <a href="http://kotlinlang.org/docs/reference/delegated-properties.html">delegated properties</a>, <a href="https://kotlinlang.org/docs/reference/delegation.html#class-delegation">class delegation</a> and <a href="https://kotlinlang.org/docs/reference/typecasts.html">typecasting</a>.</p>
<p>I&#x27;d also proffer that it has an easier transition from Java to Kotlin than it is for Scala though I have no evidence for this other than my own experience of all 3 languages (including leading mixed skill teams in Scala and Java).</p>
<p>You could ask &quot;but why not one of the other many languages available on the JVM?&quot; and that would be fair. Many JVM languages haven&#x27;t seen a great deal of traction or remain relatively niche but I think Kotlin is much better placed. It&#x27;s more &quot;general purpose&quot; than a lot of the alt languages which means it will map better to current practises. It&#x27;s closer to Java and/or Scala than other languages, it strikes the right balance around the type system with features like type inference and enhanced generics and it doesn&#x27;t hurt that Jetbrains; a major player in the JVM world; is heavily invested in Kotlins future.</p>
<p>In the two years since I started playing with Kotlin it has aged well. It resisted adding a plethora of features for the sake of it and instead created a core syntax and feature set that allows developers enough wiggle room for being creative without turning them into Wizards of Arcane DSLs. This is a sweet spot for me when it comes to building and supporting a service over many years as it avoids the unnecessary pain that comes from the extreme ends of spectrum that Java and Scala tend to reside. Of course this doesn&#x27;t mean it&#x27;s perfect, nothing is. You&#x27;re still adding another language to a project and taking on the associated baggage that comes with it like tooling differences and additional upskilling. Its not suddenly going to make your organisation move the JVM if they aren&#x27;t already there. It&#x27;s also not going to fix all your problems - bad architecture will remain bad architecture and bad patterns will remain bad patterns. However, with that said, <strong>I believe Kotlin will reduce enough of the friction of general software development and maintenance on the JVM to make it worth the investment</strong>.</p>
]]></description><link>https://yobriefca.se/blog/2016/02/24/kotlin-2-years-on/</link><guid isPermaLink="true">https://yobriefca.se/blog/2016/02/24/kotlin-2-years-on/</guid><category><![CDATA[Kotlin]]></category><dc:creator><![CDATA[James Hughes]]></dc:creator><pubDate>Tue, 23 Feb 2016 21:00:00 GMT</pubDate></item><item><title><![CDATA[An Introduction to Kotlin]]></title><description><![CDATA[<p><a href="https://kotlinlang.org/">Kotlin</a> is a relatively new language that keeps the good parts of Java while eliminating boilerplate and encouraging better Object Oriented programming style while still allowing a Functional paradigm. Best of all, it&rsquo;s 100% Java-compatible which allows you to mix it with Java, Groovy, or any other Java-bytecode language. Kotlin is similar in many ways to Groovy by handling a lot of the more mundane aspects of coding in Java but unlike Groovy, which took a Dynamic Typing approach, Kotlin doubled-down on Static typing to help eliminate many of the common annoyances in Java.</p>
<h2>Kotlin Features</h2>
<p>While Kotlin&rsquo;s entire feature list is far too expansive to discuss in this post I would like to point out some of my favorites coming from a Java background. If you want to dive straight into some Kotlin code there is an <a href="https://github.com/mike-plummer/KotlinCalendar">example program out on GitHub</a> that demonstrates most of the features discussed below.</p>
<h3>Null Safety and Immutability</h3>
<p>By default all variables are enforced as non-nullable by the compiler unless explicitly defined otherwise. By enforcing nullability constraints the compiler can automatically guard you from potential NullPointerExceptions and will, in fact, generate an error if you attempt to write unsafe code.</p>
<pre><code class="hljs language-kotlin"><span class="hljs-variable"><span class="hljs-keyword">val</span> myNonNullVariable</span>: ComplexObject = ComplexObject()  <span class="hljs-comment">// Declare non-nullable variable</span>
myNonNullVariable = <span class="hljs-literal">null</span>                              <span class="hljs-comment">// Compilation error, cannot assign null to this variable</span>

<span class="hljs-variable"><span class="hljs-keyword">val</span> myNullableVariable</span>: ComplexObject?                <span class="hljs-comment">// Declare a variable as nullable</span>
println myNullableVariable.getFieldA()                <span class="hljs-comment">// Compilation error since variable could be null here</span>
println myNullableVariable?.getFieldA()               <span class="hljs-comment">// Use a safe call to guard against NullPointerException</span>
                                                      <span class="hljs-comment">// If variable is null then safe call will return 'null'</span></code></pre>
<p>This null-checking extends throughout Kotlin syntax, even into cast operations:</p>
<pre><code class="hljs language-kotlin"><span class="hljs-variable"><span class="hljs-keyword">val</span> variable</span>: Any = <span class="hljs-string">"A string value"</span>
<span class="hljs-variable"><span class="hljs-keyword">val</span> stringVariable</span> = variable <span class="hljs-keyword">as</span> String                        <span class="hljs-comment">// Unsafe cast that will succeed - note lack of nullability on types</span>

<span class="hljs-variable"><span class="hljs-keyword">val</span> nullVariable</span>: Any? = <span class="hljs-literal">null</span>
<span class="hljs-variable"><span class="hljs-keyword">val</span> nullableStringVariable</span>: String? = nullVariable <span class="hljs-keyword">as</span> String?  <span class="hljs-comment">// Unsafe cast that will succeed - note that both sides must specify nullability</span>
<span class="hljs-variable"><span class="hljs-keyword">val</span> nullableStringVariable2</span>: String? = nullVariable <span class="hljs-keyword">as</span>? String  <span class="hljs-comment">// The line above can also be done using the 'safe cast' operator</span>
<span class="hljs-variable"><span class="hljs-keyword">val</span> invalidCast</span> = stringVariable <span class="hljs-keyword">as</span> List                       <span class="hljs-comment">// Guaranteed to throw a ClassCastException</span></code></pre>
<p>Kotlin also provides multiple mechanisms for declaring variables. When using the keyword &lsquo;val&rsquo; a variable is implicitly treated as immutable meaning the compiler will only define a getter and will generate an error if an attempt is made to reassign. Declaring using &lsquo;var&rsquo; means the variable is mutable thus a getter and setter will be generated.</p>
<pre><code class="hljs language-kotlin"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ComplexObject</span> </span>{
    <span class="hljs-variable"><span class="hljs-keyword">val</span> fieldA</span>: String = <span class="hljs-string">"Value 1"</span>   <span class="hljs-comment">// Non-nullable immutable String (just a getter will be generated)</span>
    <span class="hljs-variable"><span class="hljs-keyword">var</span> fieldB</span>: String = <span class="hljs-string">"Value 2"</span>   <span class="hljs-comment">// Non-nullable but mutable (will have getter and setter generated)</span>
    <span class="hljs-variable"><span class="hljs-keyword">var</span> fieldC</span>: String?              <span class="hljs-comment">// Nullable, will require null checks or safe call operator ( ?. )</span>
    <span class="hljs-variable"><span class="hljs-keyword">val</span> fieldD</span> = <span class="hljs-string">"Value 4"</span>           <span class="hljs-comment">// Type will be inferred if omitted but value is initialized</span>
}</code></pre>
<h3>Boilerplate Reduction</h3>
<p>Much like Groovy, Kotlin handles auto-generating much of the common logic in your programs. As previously discussed Getter and Setter methods are auto-generated but can be overridden with custom logic if desired. In addition, marking a class with the keyword &lsquo;data&rsquo; will treat it as a Data Transfer Object and will auto-generate &lsquo;equals&rsquo;, &lsquo;hashCode&rsquo;, &lsquo;copy&rsquo;, and &lsquo;toString&rsquo; methods.</p>
<h3>Flexibility</h3>
<p>Classes can overload any standard operator which can aid code brevity and readability. In cases where appropriate operators don&rsquo;t exist an &lsquo;infix&rsquo; function can be declared which enables it to be used without dot notation or parentheses, making it look and behave much like a custom operator.</p>
<pre><code class="hljs language-kotlin"><span class="hljs-comment">// Use infix to declare an "operator" function to allow somewhat cleaner code</span>
<span class="hljs-comment">// This also happens to be an extension function (see below)</span>
<span class="hljs-comment">// In this case, perform a subtraction and return the absolute value of the result</span>
infix <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-keyword">Long</span>.<span class="hljs-title">absSubtract</span><span class="hljs-params">(input: <span class="hljs-type">Long</span>)</span>: <span class="hljs-keyword">Long</span> {</span>
    <span class="hljs-keyword">return</span> Math.abs(this - input)
}

println(<span class="hljs-number">1</span>L absSubtract <span class="hljs-number">5</span>L)  <span class="hljs-comment">// prints positive 4</span></code></pre>
<p>Extension functions can be added to any class at runtime which enables you to add behaviors to classes you use without forcing you to subclass them.</p>
<pre><code class="hljs language-kotlin"><span class="hljs-comment">// Anywhere this function is imported all Duration objects will gain this function</span>
<span class="hljs-function"><span class="hljs-keyword">fun</span> Duration.<span class="hljs-title">prettyPrint</span><span class="hljs-params">()</span>: String {</span>
    <span class="hljs-keyword">return</span> <span class="hljs-string">"${toHours()}:${toMinutes() % 60}:${get(ChronoUnit.SECONDS) % 60}"</span>
}

Duration.ZERO.prettyPrint()  <span class="hljs-comment">// Outputs '0:0:0'</span></code></pre>
<p>Finally, Kotlin has excellent support for delegating functions and properties to member variables or extended classes. This is an alternative to gaining behaviors through extension and is a really simple way to implement several popular design patterns with minimal code.</p>
<pre><code class="hljs language-kotlin">interface WakeUpProvider {
    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">wakeUp</span><span class="hljs-params">()</span></span>
}

<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AlarmClock</span></span>() : WakeUpProvider {
    <span class="hljs-keyword">override</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">wakeUp</span><span class="hljs-params">()</span> {</span>
        println(<span class="hljs-string">"Alarm Clock woke you up!"</span>)
    }
}

<span class="hljs-comment">// Make WakeUpSystem delegate to 'provider' any 'WakeUpProvider' interface functions</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WakeUpSystem</span></span>(provider: WakeUpProvider) : WakeUpProvider by provider

<span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">(args: <span class="hljs-type">Array</span>)</span> {</span>
    <span class="hljs-variable"><span class="hljs-keyword">val</span> provider</span> = AlarmClock()
    WakeUpSystem(provider).wakeUp() <span class="hljs-comment">// Prints 'Alarm Clock woke you up!'</span>
}</code></pre>
<h3>The Kotlin Object</h3>
<p>Object is a special type in Kotlin that is very different from Java&rsquo;s Object base type. Object is a versatile construct that can be used much like ad-hoc objects in JavaScript, easily build a Singleton, or add static-like capabilities to your Kotlin classes.</p>
<h4>Ad-hoc Objects</h4>
<p>Object can be used to generate on-the-fly structures without going through the work of defining a class. When used as part of an expression like this the Object is evaluated as the line is executed which contrasts with other uses of Object that are initialized the first time they are referenced.</p>
<pre><code class="hljs language-kotlin"><span class="hljs-variable"><span class="hljs-keyword">var</span> adhoc</span> = <span class="hljs-keyword">object</span> {
    <span class="hljs-variable"><span class="hljs-keyword">val</span> first</span> = <span class="hljs-string">"firstValue"</span>
    <span class="hljs-variable"><span class="hljs-keyword">val</span> second</span> = <span class="hljs-string">"secondValue"</span>
}

println(<span class="hljs-string">"${adhoc.first}, ${adhoc.second}"</span>)    <span class="hljs-comment">// Prints "firstValue, secondValue"</span></code></pre>
<h4>Singleton</h4>
<p>If you need a Singleton you can simply write an Object declaration (contrasted with the Object expression used above) that will behave much like a class with static fields and methods in Java.</p>
<pre><code class="hljs language-kotlin"><span class="hljs-keyword">object</span> MySingleton {
    <span class="hljs-variable"><span class="hljs-keyword">val</span> aSingletonValue</span> = <span class="hljs-string">"ValueA"</span>
    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">aSingletonFunction</span><span class="hljs-params">()</span> {</span>
        println(<span class="hljs-string">"Yay for Kotlin Objects!"</span>)
    }
}
...
println(MySingleton.aSingletonValue)       <span class="hljs-comment">// Prints "ValueA"</span>
println(MySingleton.aSingletonFunction())  <span class="hljs-comment">// Prints "Yay for Kotlin Objects!"</span></code></pre>
<h4>Companion</h4>
<p>Objects can be used as Companions in Kotlin classes to add static-like properties and functions to the class. The Companion will be constructed only once and shared amongst all instances of the containing class.</p>
<pre><code class="hljs language-kotlin"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClassWithCompanion</span> </span>{
    <span class="hljs-keyword">companion</span> <span class="hljs-keyword">object</span> {
        <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">PrintAMessage</span><span class="hljs-params">()</span> {</span>
            println(<span class="hljs-string">"I'm a function in the Companion!"</span>)
        }
    }
}
ClassWithCompanion.PrintAMessage()    <span class="hljs-comment">// Note the 'static' access. Prints "I'm a function in the Companion!"</span></code></pre>
<h3>Java Goodness</h3>
<p>Coming from a Java background? Good news! All the familiar Java concepts and libraries are still available. Interfaces, abstract/inner classes, the Java standard library, generics, enums, etc all are present and for the most part behave in exactly the same way. On top of the basics all the latest features in Java such as Lambdas and Streams are available in Kotlin.</p>
<p>A notable exception is the lack of &lsquo;static&rsquo; variables and methods. Often &lsquo;static&rsquo; was misused and ended up breaking many precepts of Object Oriented design. In Kotlin this has been supplanted by Object, Companions, and package-level declarations to encourage proper encapsulation and separation of concerns while still providing the same features.</p>
<p>For a more complete comparison of how Kotlin compares with Java I recommend <a href="https://kotlinlang.org/docs/reference/comparison-to-java.html">this article</a>.</p>
<h4>Fixes for Common Annoyances</h4>
<p>Java&rsquo;s been around long enough for everyone to find a few features they dislike. Kotlin attempts to fix a number of the most common complaints.</p>
<h5>Automatic Casting</h5>
<p>How many times have you written code like this in Java?</p>
<pre><code class="hljs language-java">Object unknownObjectType = ...
<span class="hljs-keyword">if</span> (unknownObjectType <span class="hljs-keyword">instanceof</span> String) {
    String castString = (String) unknownObjectType;    <span class="hljs-comment">// Have to cast in order to treat it like a String</span>
    castString.indexOf(<span class="hljs-string">"abc"</span>);
}</code></pre>
<p>Never fear, you will never have to write that in Kotlin! The Kotlin Compiler is smart enough to track the state of a variable as it executes which means it &lsquo;knows&rsquo; everything various conditionals and other constructs tell it.</p>
<pre><code class="hljs language-kotlin"><span class="hljs-variable"><span class="hljs-keyword">val</span> unknownObjectType</span>: Any = ...
<span class="hljs-keyword">if</span> (unknownObjectType <span class="hljs-keyword">is</span> String) {
    unknownObjectType.indexOf(<span class="hljs-string">"abc"</span>)    <span class="hljs-comment">// Compiler knows it's a String here so it is auto-cast</span>
}</code></pre>
<h5>Destructuring</h5>
<p>Another common annoyance is that occasionally you need to call a function that returns an object but then have to immediately pull only a subset of fields out of that object. Kotlin supports &lsquo;destructuring&rsquo; similar to ECMAScript 2015, and supports destructuring in loop expressions.</p>
<pre><code class="hljs language-kotlin"><span class="hljs-variable"><span class="hljs-keyword">val</span> complexObjectCollection</span>: Collection
<span class="hljs-keyword">for</span> ( (fieldA, fieldB) <span class="hljs-keyword">in</span> complexObjectCollection) {
    <span class="hljs-comment">// Variables fieldA and fieldB are accessible here and will be equal to fields</span>
    <span class="hljs-comment">// named 'fieldA' and 'fieldB' from each item in the collection</span>
}</code></pre>
<h5>Generics</h5>
<p>In the Java world generics are certainly a boon, but certain design decisions and limitations leave them with a number of significant gotchas. Most of these are related to the wildcard generic (?) which has been eliminated in Kotlin. Kotlin makes use of new keywords &lsquo;in&rsquo; and &lsquo;out&rsquo; to help further define generic bounds similar to the PECS (Producer-extend, Consumer-super) concept in Java without the same shortcomings.</p>
<h5>Equality</h5>
<p>Tired of having to remember when it&rsquo;s safe to use == and doing null-checks before calling &lsquo;.equals(..)&rsquo;? Kotlin uses == as &lsquo;structural equality&rsquo; and === as &lsquo;referential equality&rsquo;. Put another way, == is the same as calling &lsquo;.equals(..)&rsquo; while guarding against null in Java whereas === maps to Java&rsquo;s ==.</p>
<pre><code class="hljs language-kotlin"><span class="hljs-variable"><span class="hljs-keyword">val</span> stringA</span>: String = <span class="hljs-string">"New York"</span>
<span class="hljs-variable"><span class="hljs-keyword">val</span> stringB</span>: String = <span class="hljs-string">"New "</span> + <span class="hljs-string">"York"</span>
<span class="hljs-variable"><span class="hljs-keyword">val</span> stringC</span>: String = stringA
println(stringA == stringB)     <span class="hljs-comment">// True, contents are equal</span>
println(stringA === stringB)    <span class="hljs-comment">// False, not the exact same object</span>
println(stringA === stringC)    <span class="hljs-comment">// True, both reference the same object</span></code></pre>
<h5>Inlining</h5>
<p>Finally, for anyone with C or C++ experience I&rsquo;m sure you&rsquo;re well-aware that Java doesn&rsquo;t allow you to request a method be <a href="https://en.wikipedia.org/wiki/Inline_expansion">inlined</a>. Kotlin allows you to mark any function with the &lsquo;inline&rsquo; keyword which makes the compiler insert that function&rsquo;s code anywhere the function is called. At runtime this means fewer function calls at the expense of increasing the size of your compiled artifact. This isn&rsquo;t necessary for most programs but can be a useful performance tweak especially when calling many lightweight functions in a large loop.</p>
<h3>Exception Handling</h3>
<p>Many people have mixed feelings on this but Kotlin does not have the concept of Checked Exceptions. If a method you&rsquo;re calling potentially throws an exception you are not required to catch it. This reduces the number of try-catch blocks in your code, especially in situations where you know a normally-checked exception truly can&rsquo;t be thrown. Other than this, exceptions basically work the same as in Java.</p>
<h2>Environment</h2>
<p>There are a number of options for developing in Kotlin. Excellent IDE support is integrated into IntelliJ IDEA and a plugin is available for Eclipse. Outside of an IDE environment you can compile and run Kotlin using Gradle, Maven, Ant, or standalone command line tools.</p>
<p>Information and downloads for these are available at <a href="https://kotlinlang.org/">kotlinlang.org</a>.</p>
<h2>Testing</h2>
<p>A new 100% Kotlin-based testing framework, Spek, is also under development. For those who have worked with Spock or Mocha it will be very familiar &ndash; tests are broken down into a series of nested &ldquo;given-on-it&rdquo; clauses to help semantically structure your tests and encourage targeted, readable tests.</p>
<pre><code class="hljs language-kotlin"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DurationExtensionSpecs</span>: <span class="hljs-type">Spek</span></span>() {
    init {
        given(<span class="hljs-string">"A zero duration"</span>) {
            <span class="hljs-variable"><span class="hljs-keyword">var</span> duration</span> = Duration.ZERO
            on(<span class="hljs-string">"adding time values using method chaining"</span>) {
                duration = duration.plusHours(<span class="hljs-number">2</span>).plusMinutes(<span class="hljs-number">5</span>).plusSeconds(<span class="hljs-number">12</span>)
                it(<span class="hljs-string">"should reflect the expected value"</span>) {
                    shouldEqual(duration.toHours(), <span class="hljs-number">2</span>)
                    shouldEqual(duration.toMinutes() % <span class="hljs-number">60</span>, <span class="hljs-number">5</span>)
                    shouldEqual(duration.<span class="hljs-keyword">get</span>(ChronoUnit.SECONDS) % <span class="hljs-number">60</span>, <span class="hljs-number">12</span>)
                }
            }
        }
    }
}</code></pre>
<p>Thankfully the ever-popular Hamcrest library has been ported over to Kotlin as <a href="https://github.com/npryce/hamkrest">HamKrest</a> which allows you to write very powerful tests the same way you would in JUnit.</p>
<h2>Example</h2>
<p>I&rsquo;ve coded up a simple example of using Kotlin in a standalone program <a href="https://github.com/mike-plummer/KotlinCalendar">out on GitHub</a>. This program demonstrates much of what I&rsquo;ve discussed here, including many of Kotlin&rsquo;s core features and Spek tests.</p>
<h2>Conclusion</h2>
<p>I hope I&rsquo;ve shown you a few reasons to get excited about Kotlin and want to use it in your next project. Especially now that version 1.0 has dropped it&rsquo;s never been a better time. Popular frameworks like Spring Boot are <a href="https://spring.io/blog/2016/02/15/developing-spring-boot-applications-with-kotlin">adding support</a> which makes it downright easy to gain the power and expressiveness of Kotlin. If you have any questions leave a comment below. If you would like to see more detail on specific Kotlin features leave that below too; if there&rsquo;s enough interest I will explore them in future posts. In the meantime, take a look at the <a href="https://github.com/mike-plummer/KotlinCalendar">example code</a> and <a href="https://kotlinlang.org/docs/">Kotlin docs</a>. Happy coding!</p>
]]></description><link>https://objectpartners.com/2016/02/23/an-introduction-to-kotlin/</link><guid isPermaLink="true">https://objectpartners.com/2016/02/23/an-introduction-to-kotlin/</guid><category><![CDATA[Kotlin]]></category><dc:creator><![CDATA[Mike Plummer]]></dc:creator><pubDate>Tue, 23 Feb 2016 09:00:00 GMT</pubDate></item><item><title><![CDATA[Kotlin 1.0 is finally released!]]></title><description><![CDATA[<p>Last week, there was a wonderful announcement: (see title of post)! No more milestones, betas, or release candidates required! Obviously, release candidates for later versions will be coming out, but now you don&rsquo;t have to worry about them if you don&rsquo;t want to.</p>
<p>If you&rsquo;re like me and were waiting until release before trying to convince company management to consider Kotlin as a development option, now is the time to speak out!</p>
<p>In celebration of Kotlin&rsquo;s proper release, I will be doing a short series of articles describing some of my favorite things about the language. Starting this weekend with a quick overview of smaller features that I don&rsquo;t have a ton to say about. I&rsquo;m calling it Kotlin Month, and I only slightly regret that the first one will be in one month while the others are in the next month :P</p>
<p>Also, you may notice that there&rsquo;s now a page at the top pertaining to Kotlin articles. This won&rsquo;t be much more useful than selecting the Kotlin tag from the tag cloud to the right, but it will at least stay there, even if Kotlin posts dwindle far enough to remove the tag from the cloud.</p>
]]></description><link>https://programmingideaswithjake.wordpress.com/2016/02/22/kotlin-1-0-is-finally-released/</link><guid isPermaLink="true">https://programmingideaswithjake.wordpress.com/2016/02/22/kotlin-1-0-is-finally-released/</guid><category><![CDATA[Kotlin]]></category><dc:creator><![CDATA[Jacob Zimmerman]]></dc:creator><pubDate>Mon, 22 Feb 2016 23:09:00 GMT</pubDate></item><item><title><![CDATA[Kotlin: Easily storing a list in SharedPreferences with Custom Accessors]]></title><description><![CDATA[<p>SharedPreferences is at its core a simple tool with a deceptively verbose interface that weighs heavily on developer productivity. Kotlin on its own will not necessarily make Java-interfacing code pretty and concise, but you can apply a few particular concepts to create an elegant, downright easy-to-use solution to a common use-case:</p>
<p><strong>Storing a list of strings that will persist across app sessions.</strong></p>
<p>You can write code as if you have a regular old stored List<String> property, with the additional benefit that it is always in sync with SharedPreferences (*):</p>
<pre><code class="hljs language-kotlin"><span class="hljs-comment">// Adding to a list</span>
<span class="hljs-keyword">if</span> (syncingSongIds.indexOf(song.id) == <span class="hljs-number">-1</span>) {
    syncingSongIds += song.id
}

<span class="hljs-comment">// Iterate through a list and do something with each element</span>
syncingSongIds.forEach { id -&gt;
    stopSyncing(id)
}

<span class="hljs-comment">// Best of all: subtracting from a list</span>
<span class="hljs-variable"><span class="hljs-keyword">val</span> intent</span> = Intent(DONE_SYNCING)
intent.putExtra(<span class="hljs-string">"song"</span>, song)
sendBroadcast(intent) <span class="hljs-comment">// send a broadcast that we're done syncing</span>

syncingSongIds -= song.id <span class="hljs-comment">// and remove the song id from the persisted list of syncing songs</span></code></pre>
<p>If you&rsquo;re interested, read on.</p>
<p>I&rsquo;m assuming you&rsquo;re doing this all inside an object or class with access to a <code>context</code> property.</p>
<p>First of all, let&rsquo;s set up easy access to the SharedPreferences file we&rsquo;ll be reading/writing:</p>
<pre><code class="hljs language-kotlin"><span class="hljs-variable"><span class="hljs-keyword">val</span> sharedPreferences</span>: SharedPreferences by lazy {
    <span class="hljs-comment">// Replace with your code for accessing shared preferences</span>
    <span class="hljs-comment">// e.g. context.getSharedPreferences(SHARED_PREFERENCES_FILENAME, Context.MODE_PRIVATE)</span>
}</code></pre>
<p>For the uninitiated, the beauty of lazy properties (<code>by lazy</code>) is that they are initialized when you first access the property (i.e. when you first type <code>sharedPreferences</code>, it will call <code>context.getSharedPreferences(...)</code>) and stored from then on, so in this case, you will only ever call <code>context.getSharedPreferences(...)</code> once in the lifetime of your object.</p>
<p><em>Skip this paragraph if you already know what a property without a backing field is</em>. In Java, instance variables are conventionally stored properties. In Kotlin, we get the option to provide completely custom accessors for a property without having any storage for the property. That means we can have a property called <code>count: Float</code> on a class <code>Counter</code> where the property is never actually <strong>stored</strong> on the Counter class. It&rsquo;s very useful in instances where you want to have a property that wraps data stored somewhere else (database, server) without having to copy that data into the class containing the property. So the count property on Counter might actually be stored in (i.e., &ldquo;backed by&rdquo;) a file on disk: every time you increment the counter, it writes directly to the file on disk, and every time you retrieve the counter&rsquo;s value, it reads directly from the file on disk. <em>While this particular example out of context is not a great idea as it incurs tons of I/O overhead, I feel it effectively illustrates the concept of a non-stored property</em>.</p>
<p>We are going to create a property that reads directly from, and writes directly to, SharedPreferences, using Kotlin&rsquo;s syntax for custom accessors:</p>
<pre><code class="hljs language-kotlin">var syncingSongIds: List
    get() {
        val raw = sharedPreferences.getString("syncing_song_ids", null) ?: return emptyList()
        return raw.split(",")
    }
    set(value) {
        sharedPreferences.edit().putString("syncing_song_idslue.joinToString(",")).apply()
    }</code></pre>
<p>That&rsquo;s actually all you need to do for really simple strings that are guaranteed not to have commas in them.</p>
<p><strong>NB: This will only work for very simple strings. If you want to extend this functionality to be more powerful and accept any string or object type</strong>, try using Google GSON or another JSON serialization library (JSONObject from the Android SDK is perfectly workable, if quirky) and replacing <code>raw.split(&quot;,&quot;)</code> and <code>value.joinToString(&quot;,&quot;)</code> with a JSON -&gt; Object, and Object -&gt; JSON conversion respectively.</p>
<p><strong>NB: Because we call <code>apply()</code> in the setter rather than <code>commit</code>, this code is relatively safe to call on the main thread but it does NOT have immediate consistency</strong>. That is, if you call <code>syncingSongIds += &quot;asdf&quot;; print(syncingSongIds)</code> it may not include &ldquo;asdf&rdquo; in the printout. <strong>To fix this, change <code>apply()</code> to <code>commit()</code>, but beware of incurring additional overhead</strong> as the setter now has to write to disk synchronously every time it is called. It is your decision as to whether or not to call the setter on the main thread; I think it is relatively safe when done sparingly, but I would certainly keep an eye on that particular setter and make sure it doesn&rsquo;t adversely impact performance in your app noticeably.</p>
<p>* I&rsquo;m not making any synchronicity guarantees&ndash;maybe as a part two, but ultimately if your code is not thread-safe, you should still modify and test these code snippets to fit your synchronicity needs.</p>
]]></description><link>http://blog.dennislysenko.com/2016/01/22/kotlin-easily-storing-a-list-in-sharedpreferences-with-custom-accessors/</link><guid isPermaLink="true">http://blog.dennislysenko.com/2016/01/22/kotlin-easily-storing-a-list-in-sharedpreferences-with-custom-accessors/</guid><category><![CDATA[Android]]></category><category><![CDATA[Kotlin]]></category><dc:creator><![CDATA[Dennis Lysenko]]></dc:creator><pubDate>Mon, 22 Feb 2016 09:36:00 GMT</pubDate></item><item><title><![CDATA[A Very Peculiar, but Possibly Cunning Kotlin Language Feature.]]></title><description><![CDATA[<p>This has caught me by surprise. After studying the <a href="https://kotlinlang.org/">Kotlin language</a> to learn about how to best leverage this interesting new language for <a href="http://www.jooq.org/">jOOQ</a>, I stumbled upon this puzzler. What do you think the following program will print?</p>
<pre><code class="hljs language-kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">(args: <span class="hljs-type">Array</span>)</span> {</span>
    (<span class="hljs-number">1.</span><span class="hljs-number">.5</span>).forEach {
        <span class="hljs-keyword">if</span> (it == <span class="hljs-number">3</span>)
            <span class="hljs-keyword">return</span>
        print(it)
    }

    print(<span class="hljs-string">"done"</span>)
}</code></pre>
<p>Well... You might have guessed wrong. The above will print:</p>
<pre><code>12
</code></pre>
<p>It will NOT print what most people might expect:</p>
<pre><code>1245done
</code></pre>
<p><strong>Note to those of you who are not surprised</strong>:</p>
<p>The above is peculiar for someone used to working with Java 8, where the following code will indeed print 1245done:</p>
<pre><code class="hljs language-java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
    IntStream.rangeClosed(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>).forEach(it -&gt; {
        <span class="hljs-keyword">if</span> (it == <span class="hljs-number">3</span>)
            <span class="hljs-keyword">return</span>;

        System.out.print(it);
    });

    System.out.print(<span class="hljs-string">"done"</span>);
}</code></pre>
<p>The syntactical reason is explained in this section of the Kotlin manual:
<a href="https://kotlinlang.org/docs/reference/returns.html">https://kotlinlang.org/docs/reference/returns.html</a></p>
<p>In lambdas / closures, the return statement will not (necessarily) return from the lambda / closure, but from the immediate enclosing scope of the lambda / closure. The rationale has been kindly given to me by Dmitry Jemerov from JetBrains in two tweets:</p>
<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr"><a href="https://twitter.com/lukaseder">@lukaseder</a> <a href="https://twitter.com/kotlin">@kotlin</a> reason is very simple: we want to have lambdas that work exactly like built-in language features (e.g. synchronised)</p>&mdash; Dmitry Jemerov (@intelliyole) <a href="https://twitter.com/intelliyole/status/701729566453321728">February 22, 2016</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr"><a href="https://twitter.com/lukaseder">@lukaseder</a> therefore ‘return’ in a lambda passed to ‘synchronised’ function must do the same as a ‘return’ in a Java ‘synchronised’ block</p>&mdash; Dmitry Jemerov (@intelliyole) <a href="https://twitter.com/intelliyole/status/701729699198799874">February 22, 2016</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>Cunningly, the Kotlin language has removed language-based support for Java constructs like try-with-resources, or the synchronized statement. That&rsquo;s very reasonable, because these language constructs don&rsquo;t necessarily belong in the language (<a href="http://blog.jooq.org/2016/01/12/if-java-were-designed-today-the-synchronizable-interface/">as we&rsquo;ve previously claimed in another blog post</a>), but could be moved to libraries instead. For example:</p>
<pre><code class="hljs language-kotlin"><span class="hljs-comment">// try-with-resources is emulated using an</span>
<span class="hljs-comment">// extension function "use"</span>
OutputStreamWriter(r.getOutputStream()).use {
    it.write('a')
}</code></pre>
<p>(criticism here)</p>
<p>Or:</p>
<pre><code class="hljs language-kotlin"><span class="hljs-comment">// Synchronized is a function!</span>
<span class="hljs-variable"><span class="hljs-keyword">val</span> x</span> = synchronized (lock, { computation() })</code></pre>
<p>See also:
<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/synchronized.html">https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/synchronized.html</a></p>
<p>After all, even in Java, the language feature only works because the language depends on library types, like Iterable (foreach), AutoCloseable (try-with-resources), or JVM features (monitor on each reference for synchronized)</p>
<h2>So, what&rsquo;s the deal with return?</h2>
<p>Along the lines of the above rationale, when language designers want to avoid language constructs for things that can be implemented with libraries, but still want you to feel like these were language constructs, then the only reasonable meaning of return inside of such a &ldquo;construct-ish&rdquo; lambda / closure is to return from the outer scope. So, when you write something like:</p>
<pre><code class="hljs language-kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">(args : <span class="hljs-type">Array</span>)</span> {</span>
    <span class="hljs-variable"><span class="hljs-keyword">val</span> lock</span> = Object()
    <span class="hljs-variable"><span class="hljs-keyword">val</span> x</span> = synchronized(lock, {
        <span class="hljs-keyword">if</span> (<span class="hljs-number">1</span> == <span class="hljs-number">1</span>)
            <span class="hljs-keyword">return</span>

        <span class="hljs-string">"1"</span>
    })

    print(x)
}</code></pre>
<p>The real intention is for this to be the equivalent of the following Java code:</p>
<pre><code class="hljs language-java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
    Object lock = <span class="hljs-keyword">new</span> Object();
    String x;

    <span class="hljs-keyword">synchronized</span> (lock) {
        <span class="hljs-keyword">if</span> (<span class="hljs-number">1</span> == <span class="hljs-number">1</span>)
            <span class="hljs-keyword">return</span>;

        x = <span class="hljs-string">"1"</span>;
    }

    System.out.println(x);
}</code></pre>
<p>In the Java case, obviously, the return statement exits the main() method, because there is no other reasonable stack frame to return from. Unlike in Kotlin, where one might argue the lambda / closure would produce its own stack frame.</p>
<p>But it really doesn&rsquo;t. The reason for this is the inline modifier on the synchronized function:</p>
<pre><code class="hljs language-kotlin"><span class="hljs-keyword">public</span> <span class="hljs-keyword">inline</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-type">&lt;R&gt;</span> <span class="hljs-title">synchronized</span><span class="hljs-params">(lock: <span class="hljs-type">Any, block: (</span>)</span> -&gt; R): R {</span>
    monitorEnter(lock)
    <span class="hljs-keyword">try</span> {
        <span class="hljs-keyword">return</span> block()
    }
    <span class="hljs-keyword">finally</span> {
        monitorExit(lock)
    }
}</code></pre>
<p>See also:
<a href="https://kotlinlang.org/docs/reference/inline-functions.html">https://kotlinlang.org/docs/reference/inline-functions.html</a></p>
<p>Which means that the block closure passed as an argument isn&rsquo;t really a pure lambda expression, but just syntactic sugar embedded in the call-site&rsquo;s scope.</p>
<p>Weird. Cunning. Clever. But a bit unexpected.</p>
<p>Is this a good idea? Or will the language designers regret this, later on? Are all lambdas / closures potentially &ldquo;language construct-ish&rdquo;, where such a return statement is expected to leave the outer scope? Or are there clear cases where this inline behaviour just makes total sense?</p>
<p>We&rsquo;ll see. In any case, it is very interesting for a language to have chosen this path.</p>
]]></description><link>http://blog.jooq.org/2016/02/22/a-very-peculiar-but-possibly-cunning-kotlin-language-feature/</link><guid isPermaLink="true">http://blog.jooq.org/2016/02/22/a-very-peculiar-but-possibly-cunning-kotlin-language-feature/</guid><category><![CDATA[Kotlin]]></category><category><![CDATA[Puzzlers]]></category><dc:creator><![CDATA[Lukas Eder]]></dc:creator><pubDate>Mon, 22 Feb 2016 12:33:00 GMT</pubDate></item><item><title><![CDATA[More Kotlin Features to Love]]></title><description><![CDATA[<p>Constants are important
One of the things that I&rsquo;ve come to appreciate more and more as a programmer are constants. Before I would have yawned and said big deal why? Now I&rsquo;d say they are so important as they prevent so many needless bugs. If we are guaranteed that something is not null then we can focus simply on getting our work done instead having to null check the world.</p>
<p>that is gnarly
In Java we used the final keyword to create a constant. Unfortunately the gnarly requirement for using the final keyword is that you must either declare the value inline or set it in the constructor. I&rsquo;ve run into a fair number of cases where I want something to be final, but don&rsquo;t know it yet, worse is when it belongs in a class but will not be available until after that class has been constructed and had one of it&rsquo;s methods executed. Fortunately Kotlin allows us to have constants declared that aren&rsquo;t required to be set during the constructor. We can use the lazy keyword:</p>
<pre><code class="hljs language-kotlin"><span class="hljs-variable"><span class="hljs-keyword">val</span> myConstant</span> : String by Lazy{
     calculateConstant();
}</code></pre>
<p>This allows us to have a constant that is instantiated the first time myConstant is used. This is perfect for two reasons:</p>
<ol>
<li>We don&rsquo;t need to do this calculation in the constructor(which is bad anyways as it violates SOLID principles by having logic in the constructor other than variable assignment)</li>
<li>The result of the Lazy calculation is cached, and will not be run in subsequent requests(good for expensive calculations)</li>
</ol>
<h2>Sort of Ternary Operator</h2>
<p>While Kotlin doesn&rsquo;t have a true Ternary Operator it does have an operator that comes close that I had not noticed before:</p>
<pre><code class="hljs language-kotlin">println(listOfStrings?.size ?: <span class="hljs-string">"empty"</span>) <span class="hljs-comment">// will first check if the strings is not null and print the size, or empty if it is null</span></code></pre>
<h2>Kotlin is concise</h2>
<p>The common theme I keep coming back to with Kotlin is that the language allows use to concisely write code. For example in Java if we wanted to execute a block of code if a null check was passed we&rsquo;d do this:</p>
<pre><code class="hljs language-kotlin"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">object</span> != <span class="hljs-literal">null</span>) {
     <span class="hljs-comment">// do some action with object</span>
}</code></pre>
<p>but in Kotlin we can be more concise and do the following:</p>
<pre><code class="hljs language-kotlin"><span class="hljs-keyword">object</span>?.let {
    <span class="hljs-comment">// if object is not null execute what is in the curly braces</span>
}</code></pre>
<p>It&rsquo;s a much simpler syntax for doing the same thing</p>
<p><img src="http://i.giphy.com/UnQ68p0AVulkQ.gif" alt="Kotlin is concise"></p>
]]></description><link>http://blog.jimbaca.com/2016/02/22/more-kotlin-features-to-love/</link><guid isPermaLink="true">http://blog.jimbaca.com/2016/02/22/more-kotlin-features-to-love/</guid><category><![CDATA[Kotlin]]></category><dc:creator><![CDATA[Jim Baca]]></dc:creator><pubDate>Mon, 22 Feb 2016 12:44:00 GMT</pubDate></item><item><title><![CDATA[Kotlin — Love at first line]]></title><description><![CDATA[<h2>Kotlin&#x200A;&mdash;&#x200A;Love at first line</h2>
<p>Kotlin 1.0 has been <a href="https://blog.jetbrains.com/kotlin/2016/02/kotlin-1-0-released-pragmatic-language-for-jvm-and-android/">released</a>
a few days ago and it&rsquo;s time to check out its awesome features.</p>
<p>For those of you who might have been living under a rock and don&rsquo;t know what Kotlin is&#x200A;&mdash;&#x200A;Kotlin is a new JVM programming language that tries to &ldquo;fill in the gaps&rdquo; that Java has. It&rsquo;s 100% interoperable with Java&#x200A;&mdash;&#x200A;meaning that you can have a mixed project that contains Kotlin &amp; Java classes. The classes are compiled to Java bytecode, and that bytecode is &ldquo;runnable&rdquo; on Java6+, which makes it runnable on Android.</p>
<p>The language is awesome, and combined with the <a href="https://github.com/Kotlin/anko">Anko</a> library it&rsquo;s even <a href="http://www.urbandictionary.com/define.php?term=Awesome-er">awesome-er*</a>. I won&rsquo;t be explaining the syntax of the language (for that you have the official <a href="https://kotlinlang.org/">page</a>). I&rsquo;m just going to try and expose a few of it&rsquo;s awesome features.</p>
<h3><a href="https://kotlinlang.org/docs/reference/functions.html#single-expression-functions">Single-Expression functions</a></h3>
<p>If we have a function that boils down to a single expression, we can use the single-expression function syntax:</p>
<pre><code>override fun equals(other: Any?) = other is Task &amp;&amp; other.id == id
</code></pre>
<h3><a href="https://kotlinlang.org/docs/reference/extensions.html">Extensions</a></h3>
<p>Extensions allow us to extend any existing class by adding functions and properties without the need to inherit from that class.</p>
<pre><code class="hljs language-kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> ViewGroup.<span class="hljs-title">inflate</span><span class="hljs-params">(
    @LayoutRes layoutRes: <span class="hljs-type">Int,
    attachToRoot: Boolean</span> = false)</span> =</span>

    LayoutInflater
        .from(context)
        .inflate(layoutRes, this, attachToRoot)</code></pre>
<p>The extension function above adds the <strong>.inflate(...)</strong> method to the ViewGroup class, so instead of doing this every time:</p>
<pre><code class="hljs language-kotlin"><span class="hljs-variable"><span class="hljs-keyword">val</span> view</span> = LayoutInflater
    .from(parent)
    .inflate(R.layout.todo_list_item, parent, <span class="hljs-literal">false</span>)</code></pre>
<p>now we can just do this:</p>
<pre><code class="hljs language-kotlin"><span class="hljs-variable"><span class="hljs-keyword">val</span> view</span> = parent.inflate(R.layout.todo_list_item)</code></pre>
<p>or:</p>
<pre><code class="hljs language-kotlin"><span class="hljs-variable"><span class="hljs-keyword">val</span> view</span> = parent.inflate(R.layout.todo_list_item,
    attachToRoot = <span class="hljs-literal">true</span>)</code></pre>
<p>I guess you already noticed that Kotlin also supports <a href="https://kotlinlang.org/docs/reference/functions.html#default-arguments">default arguments</a>.</p>
<h3><a href="https://kotlinlang.org/docs/reference/lambdas.html#lambda-expressions-and-anonymous-functions">Lambda</a></h3>
<p>Intentionally left blank.</p>
<h3><a href="https://kotlinlang.org/docs/reference/null-safety.html">Optionals / Null safety</a></h3>
<p>Forget about NullPointerExceptions. Kotlin has 2 types of variables, nullable and non-nullable. If we declare our variable as non-nullable&#x200A;&mdash;&#x200A;the compiler won&rsquo;t let us assign a null value to it. Only nullable variables can be null.</p>
<pre><code class="hljs language-kotlin"><span class="hljs-variable"><span class="hljs-keyword">var</span> nonNullable</span>: String = <span class="hljs-string">"This is a title"</span> <span class="hljs-comment">// Non-nullable variable</span>
<span class="hljs-variable"><span class="hljs-keyword">var</span> nullable</span>: String? = <span class="hljs-literal">null</span> <span class="hljs-comment">// Nullable variable</span></code></pre>
<p>In case of the <em>nonNullable</em> variable, we can safely call methods on it, without any null checks, because it <em>cannot have a null value</em>.</p>
<p>In case of the <em>nullable</em> variable, we can safely call methods with the help of the <em>safe-trasversal operator (?.)</em>, and forget about null checks:</p>
<pre><code class="hljs language-kotlin"><span class="hljs-variable"><span class="hljs-keyword">val</span> length</span> = nullable?.length</code></pre>
<p>The code above won&rsquo;t fail, even if the <em>nullable</em> variable has a null value. In that case, the value of the <em>length</em> variable will be <em>null</em>.</p>
<h3><a href="https://kotlinlang.org/docs/reference/null-safety.html#elvis-operator">Elvis operator</a></h3>
<p>The result of a <strong>safe call (?.)</strong> is always a nullable variable. So in cases where we are calling a method on a null variable&#x200A;&mdash;&#x200A;the result will be null.</p>
<p>That can be inconvenient sometimes. For example, in the code sample above, we want our <strong>length</strong> variable to be a non-null variable because it&rsquo;s logical for it to have a value of 0 in case of a null string.</p>
<p>In cases like that, we can use the <strong>elvis operator ( ?: )</strong>.</p>
<pre><code class="hljs language-kotlin"><span class="hljs-variable"><span class="hljs-keyword">val</span> length</span> = nullable?.length ?: <span class="hljs-number">0</span></code></pre>
<p>The elvis operator will use the left side value if it&rsquo;s not null. In case the left side value is null, it will use the right non-nullable value.</p>
<p>You can even use it to make your sanity checks more readable.</p>
<pre><code class="hljs language-kotlin">    ...
}</code></pre>
<p>With help of the elvis operator, the same method in Kotlin will look like this:</p>
<pre><code class="hljs language-kotlin"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">myMethod</span><span class="hljs-params">(str: <span class="hljs-type">String?</span>)</span> {</span>
    <span class="hljs-comment">// Sanity check</span>
    str ?: <span class="hljs-keyword">return</span>

    ...
}</code></pre>
<p>The great part of using this is that the compiler will <strong>smart cast</strong> our <strong>str</strong> variable to a non-nullable variable after the &ldquo;<em>str ?: return</em>&rdquo; line.</p>
<h3><a href="https://kotlinlang.org/docs/reference/properties.html#properties-and-fields">Optional getters/setters</a></h3>
<p>Unlike in Java, where we are used to define all of our class properties <strong><em>private</em></strong> and write getters and setters, in Kotlin we write getters and setters only if we want to have some custom behaviour.</p>
<p>The simplest definition looks like this:</p>
<pre><code class="hljs language-kotlin"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Task</span> </span>{
   <span class="hljs-variable"><span class="hljs-keyword">var</span> completed</span> = <span class="hljs-literal">false</span>
}</code></pre>
<p>And we can access the property:</p>
<pre><code class="hljs language-kotlin"><span class="hljs-variable"><span class="hljs-keyword">val</span> task</span> = Task()
<span class="hljs-keyword">if</span> (task.completed) ...</code></pre>
<p>If we wan&rsquo;t to expose just the getter and allow setting the value only from within the class:</p>
<pre><code class="hljs language-kotlin"><span class="hljs-variable"><span class="hljs-keyword">var</span> completed</span> = <span class="hljs-literal">false</span>
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">set</span></code></pre>
<p>And if we want to have completely custom behaviour:</p>
<pre><code class="hljs language-kotlin"><span class="hljs-variable"><span class="hljs-keyword">var</span> completedInt</span> = <span class="hljs-number">0</span>
<span class="hljs-variable"><span class="hljs-keyword">var</span> completed</span>: <span class="hljs-keyword">Boolean</span>
    <span class="hljs-keyword">get</span>() = completedInt == <span class="hljs-number">1</span>
    <span class="hljs-keyword">set</span>(value) { completedInt = <span class="hljs-keyword">if</span> (value) <span class="hljs-number">1</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span> }</code></pre>
<h3><a href="https://kotlinlang.org/docs/reference/delegated-properties.html#lazy">Lazy properties</a></h3>
<p>Kotlin allows us to declare lazy properties&#x200A;&mdash;&#x200A;properties that are initialized when we first access them.</p>
<pre><code class="hljs language-kotlin"><span class="hljs-keyword">private</span> <span class="hljs-variable"><span class="hljs-keyword">val</span> recyclerView by lazy {
    find&lt;RecyclerView&gt;(R.id.task_list_new)
}</span></code></pre>
<p>When we first access the <strong>recyclerView</strong> property, the lambda expression is evaluated and the returned value from the lamdba is saved and returned in that and every subsequent call.</p>
<h3><a href="https://kotlinlang.org/docs/reference/delegated-properties.html#observable">Observable properties</a></h3>
<p>In Kotlin we can observe properties. The syntax for declaring such properties is the following:</p>
<pre><code class="hljs language-kotlin"><span class="hljs-variable"><span class="hljs-keyword">var</span> tasks by Delegates.observable(mutableListOf&lt;Task&gt;()) {
    prop, old, new -&gt;
        notifyDataSetChanged()
        dataChangedListener?.invoke()
}</span></code></pre>
<p>This means that we are going to be notified every time the value of our property changes (the provided lambda will be called).</p>
<h2><a href="https://github.com/Kotlin/anko">Anko extensions</a></h2>
<p>Anko is a great library and has a lot of great extensions. I will list a couple.</p>
<h3>find<T>(id: Int)</h3>
<p>It replaces the findViewById(int id) method. This extension function returns the view already cast to the given type T, so there is no need to cast it.</p>
<pre><code class="hljs language-kotlin"><span class="hljs-variable"><span class="hljs-keyword">val</span> recyclerView</span> = find<span class="hljs-type">&lt;RecyclerView&gt;</span>(R.id.task_list_new)</code></pre>
<h3><a href="https://github.com/Kotlin/anko/blob/master/doc/SQLITE.md#anko-heart-sqlite">SQLite</a></h3>
<p>Anko has great support for SQLite databases. For a complete overview, check their <a href="https://github.com/Kotlin/anko/blob/master/doc/SQLITE.md#anko-heart-sqlite">guide</a>. I will just show you one example:</p>
<pre><code class="hljs language-kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">allTasks</span><span class="hljs-params">()</span> = use {</span>
    select(table)
        .orderBy(completed)
        .orderBy(priority, SqlOrderDirection.DESC)
        .exec {
            parseList(parser)
        }
}</code></pre>
<p>The <strong>use {...}</strong> function opens the database for us, and closes it after the given lambda executes. So we don&rsquo;t have to worry about closing it anymore and can forget about all those <strong>try {...} catch(...) {...} finally {...}</strong> blocks. Inside the lambda that we pass to the <strong>use</strong> function, <strong>this</strong> references our database. That is the power of Kotlin&rsquo;s <strong>type-safe builders</strong>. Read more about them <a href="http://blog.jetbrains.com/kotlin/2011/10/dsls-in-kotlin-part-1-whats-in-the-toolbox-builders/">here</a> and <a href="https://kotlinlang.org/docs/reference/type-safe-builders.html">here</a>.</p>
<p>The <strong>select(...)...exec {}</strong> call chain, selects data from the database. And the <strong>parseList(parser)</strong> call parses the rows of data and returns a list of objects, that our <strong>parser</strong> returns. The definition of our <strong>parser</strong> is:</p>
<pre><code class="hljs language-kotlin"><span class="hljs-variable"><span class="hljs-keyword">val</span> parser</span> = rowParser {
    id: <span class="hljs-keyword">Int</span>, name: String, priority: <span class="hljs-keyword">Int</span>, completed: <span class="hljs-keyword">Int</span> -&gt;
    Task(id, name, priority, completed)
}</code></pre>
]]></description><link>https://medium.com/@dime.kotevski/kotlin-love-at-first-line-7127befe240f#.p5hp6dxlh</link><guid isPermaLink="true">https://medium.com/@dime.kotevski/kotlin-love-at-first-line-7127befe240f#.p5hp6dxlh</guid><category><![CDATA[Anko]]></category><category><![CDATA[Android]]></category><category><![CDATA[Kotlin]]></category><dc:creator><![CDATA[Dimitar Kotevski]]></dc:creator><pubDate>Sun, 21 Feb 2016 09:13:00 GMT</pubDate></item><item><title><![CDATA[[RU] Радио-Т 484]]></title><description><![CDATA[<ul>
<li><a href="http://thenextweb.com/dd/2016/02/15/kotlin-the-pragmatic-language-for-android-and-jvm-has-reached-its-1-0-release/">Kotlin &#x434;&#x43E;&#x440;&#x43E;&#x441; &#x434;&#x43E; &#x432;&#x435;&#x440;&#x441;&#x438;&#x438; 1.0</a> - 00:02:45.</li>
<li><a href="https://dzone.com/articles/kotlin-10-is-now-available">&#x412; &#x447;&#x435;&#x43C; &#x435;&#x433;&#x43E; &#x43F;&#x440;&#x430;&#x433;&#x43C;&#x430;&#x442;&#x438;&#x437;&#x43C;</a> - 00:12:57.</li>
<li>&#x412;&#x435;&#x440;&#x441;&#x438;&#x44F; 3 iTerm2 - 00:42:04.</li>
<li>&#x421;&#x442;&#x440;&#x430;&#x43D;&#x43D;&#x430;&#x44F; &#x438;&#x441;&#x442;&#x43E;&#x440;&#x438;&#x44F; &#x431;&#x43E;&#x440;&#x44C;&#x431;&#x44B; Apple - 00:52:37.</li>
<li>GitHub &#x434;&#x43E;&#x431;&#x430;&#x432;&#x438;&#x43B; &#x43F;&#x43E;&#x434;&#x434;&#x435;&#x440;&#x436;&#x43A;&#x443; &#x448;&#x430;&#x431;&#x43B;&#x43E;&#x43D;&#x43E;&#x432; - 01:10:35.</li>
<li>Go 1.6 - 01:15:12.</li>
<li>&#x421;&#x442;&#x440;&#x430;&#x448;&#x43D;&#x44B;&#x439; &#x431;&#x430;&#x433; &#x443;&#x433;&#x440;&#x43E;&#x436;&#x430;&#x435;&#x442; &#x43D;&#x430;&#x448;&#x438;&#x43C; &#x441;&#x435;&#x440;&#x432;&#x435;&#x440;&#x430;&#x43C; - 01:21:21.</li>
<li>&#x410;&#x440;&#x445;&#x438;&#x442;&#x435;&#x43A;&#x442;&#x443;&#x440;&#x430; Stack Overflow &#x43D;&#x430; 2016 - 01:26:33.</li>
<li>Custom Machine Types - &#x43A;&#x43E;&#x43D;&#x444;&#x438;&#x433;&#x443;&#x440;&#x430;&#x446;&#x438;&#x438; &#x43F;&#x43E; &#x432;&#x43A;&#x443;&#x441;&#x443; - 01:31:15.</li>
<li>&#x422;&#x435;&#x43C;&#x44B; &#x43D;&#x430;&#x448;&#x438;&#x445; &#x441;&#x43B;&#x443;&#x448;&#x430;&#x442;&#x435;&#x43B;&#x435;&#x439;</li>
</ul>
]]></description><link>https://radio-t.com/p/2016/02/20/podcast-484/</link><guid isPermaLink="true">https://radio-t.com/p/2016/02/20/podcast-484/</guid><category><![CDATA[Podcast]]></category><category><![CDATA[Kotlin]]></category><dc:creator><![CDATA[Umputun, Bobuk, Gray, Ksenks]]></dc:creator><pubDate>Sat, 20 Feb 2016 12:44:00 GMT</pubDate><enclosure url="http://cdn.radio-t.com/rt_podcast484.mp3" length="72259834" type="audio/mpeg"/></item><item><title><![CDATA[The Kobalt diaries: testing]]></title><description><![CDATA[<p>Kobalt automatically detects how to run your tests based on the test dependencies that you declared:</p>
<pre><code class="hljs language-kotlin">dependenciesTest {
    compile(<span class="hljs-string">"org.testng:testng:6.9.9"</span>)
}</code></pre>
<p>By default, Kobalt supports TestNG, JUnit and Spek. You can also configure how your tests run with the test{} directive:</p>
<pre><code class="hljs language-Kotlin">test {
    args(<span class="hljs-string">"-excludegroups"</span>, <span class="hljs-string">"broken"</span>, <span class="hljs-string">"src/test/resources/testng.xml"</span>)
}</code></pre>
<p>The full list of configuration parameters can be found in the <a href="https://github.com/cbeust/kobalt/blob/master/modules/kobalt-plugin-api/src/main/kotlin/com/beust/kobalt/TestDirective.kt#L6">TestConfig</a> class.</p>
<p>Additionally, you can define multiple test configurations, each with a different name. Each configuration will create an additional task named &quot;test&quot; followed by the name of that configuration. For example:</p>
<pre><code class="hljs language-Kotlin">test {
    args(<span class="hljs-string">"-excludegroups"</span>, <span class="hljs-string">"broken"</span>, <span class="hljs-string">"src/test/resources/testng.xml"</span>)
}

test {
    name = <span class="hljs-string">"All"</span>
    args(<span class="hljs-string">"src/test/resources/testng.xml"</span>)
}</code></pre>
<p>The first configuration has no name, so it will be launched with the task &quot;test&quot;, while the second one can be run with the task &quot;testAll&quot;.</p>
<p>The full series of articles on Kobalt can be found <a href="http://beust.com/weblog/category/kobalt/">here</a>.</p>
]]></description><link>http://beust.com/weblog/2016/02/20/the-kobalt-diaries-testing/</link><guid isPermaLink="true">http://beust.com/weblog/2016/02/20/the-kobalt-diaries-testing/</guid><category><![CDATA[Kotlin]]></category><category><![CDATA[Kobalt]]></category><dc:creator><![CDATA[Cédric Beust]]></dc:creator><pubDate>Sat, 20 Feb 2016 07:35:00 GMT</pubDate></item><item><title><![CDATA[Using Mockito for unit testing with Kotlin (1/x)]]></title><description><![CDATA[<p>Dependencies:</p>
<pre><code class="hljs language-gradle"><span class="hljs-comment">// Android stuff...</span>
<span class="hljs-keyword">dependencies</span> {
    <span class="hljs-comment">//...</span>
    <span class="hljs-keyword">compile</span> <span class="hljs-string">"org.jetbrains.kotlin:kotlin-stdlib:1.0.0"</span>

    testCompile <span class="hljs-string">'junit:junit:4.12'</span>
    testCompile <span class="hljs-string">'org.mockito:mockito-core:2.0.42-beta'</span>
    testCompile(<span class="hljs-string">'com.squareup.assertj:assertj-android:1.1.1'</span>) {
        <span class="hljs-keyword">exclude</span> <span class="hljs-keyword">group</span>: <span class="hljs-string">'com.android.support'</span>, module: <span class="hljs-string">'support-annotations'</span>
    }
}</code></pre>
<h2>Little Notes</h2>
<ul>
<li>All the functions AND PROPERTIES should be open, by default functions and properties are final and mockito cant mock them.</li>
<li><strong>DONT USE</strong> spy functions make tests fail bc of some weird crash (<em>if someone had use them right comment!!</em>).</li>
</ul>
<h2>Example</h2>
<p>We will show:</p>
<ol>
<li><code>Settings</code>: manage settings storage, where to store them and which ones.</li>
<li><code>SettingsView</code>: ...</li>
<li><code>SettingsPresenter</code>: manage the bussiness logic for the settings.</li>
</ol>
<p>You may have a class <code>Settings</code>:</p>
<pre><code class="hljs language-kotlin"><span class="hljs-keyword">open</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Settings</span></span>(context: Context) {
    <span class="hljs-variable"><span class="hljs-keyword">val</span> localCache</span> = LocalCache(context)

    <span class="hljs-keyword">open</span> <span class="hljs-variable"><span class="hljs-keyword">var</span> playJustWithHeadphones</span>: <span class="hljs-keyword">Boolean</span>
        <span class="hljs-keyword">get</span>() = localCache.<span class="hljs-keyword">get</span>(<span class="hljs-string">"headphones"</span>, <span class="hljs-literal">false</span>)
        <span class="hljs-keyword">set</span>(value) = localCache.put(<span class="hljs-string">"headphones"</span>, value)
}</code></pre>
<p>Then a presenter that use those settings:</p>
<pre><code class="hljs language-kotlin"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SettingsPresenter</span> </span>{
    <span class="hljs-keyword">private</span> <span class="hljs-variable"><span class="hljs-keyword">var</span> mSettings</span>: Settings? = <span class="hljs-literal">null</span>
    <span class="hljs-keyword">private</span> <span class="hljs-variable"><span class="hljs-keyword">var</span> mView</span>: SettingsView? = <span class="hljs-literal">null</span>

    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">onCreate</span><span class="hljs-params">(view: <span class="hljs-type">SettingsView, settings: Settings</span>)</span> {</span>
        mView = view
        mSettings = settings

        view.setHeadphonesToggleCheck(settings.playJustWithHeadphones)
    }
}</code></pre>
<p>Check that mocked Settings class <strong>is open</strong> and mocked var property <strong>is open</strong></p>
<p>Then the tests passing:</p>
<pre><code class="hljs language-kotlin"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SettingsPresenterTests</span> </span>{
    @Mock lateinit <span class="hljs-variable"><span class="hljs-keyword">var</span> mockedView</span>: SettingsView
    @Mock lateinit <span class="hljs-variable"><span class="hljs-keyword">var</span> mockedSettings</span>: Settings
    lateinit <span class="hljs-variable"><span class="hljs-keyword">var</span> presenter</span>: SettingsPresenter

    @Before
    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">setUp</span><span class="hljs-params">()</span> {</span>
        MockitoAnnotations.initMocks(this)
        presenter = SettingsPresenter()
    }

    @Test
    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">test_onCreate_updateGui</span><span class="hljs-params">()</span> {</span>
        Mockito.`<span class="hljs-keyword">when</span>`(mockedSettings.playJustWithHeadphones).thenReturn(<span class="hljs-literal">true</span>)
        presenter.onCreate(mockedView, mockedSettings)

        Mockito.verify(mockedView).setHeadphonesToggleCheck(<span class="hljs-literal">true</span>)
    }
}</code></pre>
<h2>Notes</h2>
<ul>
<li>Using <code>lateinit</code> to let the variables be initialized on <code>@Before</code> and avoid using <code>?</code> or <code>!!</code> all over the tests.</li>
<li><code>SettingsView</code> and <code>Settings</code> are mocked using <code>MockitoAnnotations</code></li>
</ul>
]]></description><link>http://makingiants.com/blog/using-mockito-for-unit-tests-with-kotlin-1x/</link><guid isPermaLink="true">http://makingiants.com/blog/using-mockito-for-unit-tests-with-kotlin-1x/</guid><category><![CDATA[Android]]></category><category><![CDATA[Kotlin]]></category><dc:creator><![CDATA[MAKINGIANTS]]></dc:creator><pubDate>Fri, 19 Feb 2016 21:00:00 GMT</pubDate></item><item><title><![CDATA[[RU] DevZen Podcast: Kotlin и Vulkan 1.0 — Episode 0080.]]></title><description><![CDATA[<p>&#x422;&#x435;&#x43C;&#x44B; &#x432;&#x44B;&#x43F;&#x443;&#x441;&#x43A;&#x430;: &#x421;&#x440;&#x430;&#x432;&#x43D;&#x435;&#x43D;&#x438;&#x435; &#x440;&#x430;&#x437;&#x43D;&#x44B;&#x445; &#x43A;&#x43E;&#x43D;&#x444;&#x438;&#x433;&#x443;&#x440;&#x430;&#x446;&#x438;&#x438; &#x441;&#x435;&#x442;&#x438; &#x432; Kubernetes, Kotlin &#x43D;&#x430;&#x43A;&#x43E;&#x43D;&#x435;&#x446; &#x432;&#x44B;&#x448;&#x435;&#x43B; &#x432; &#x432;&#x435;&#x440;&#x441;&#x438;&#x438; 1.0, Vulkan &#x442;&#x43E;&#x436;&#x435; &#x432;&#x44B;&#x448;&#x435;&#x43B; &#x432; 1.0, &#x43A;&#x440;&#x438;&#x442;&#x438;&#x447;&#x435;&#x441;&#x43A;&#x430;&#x44F; &#x443;&#x44F;&#x437;&#x432;&#x438;&#x43C;&#x43E;&#x441;&#x442;&#x44C; &#x432; glibc, ZFS &#x432; Ubuntu 16.04, &#x441;&#x43D;&#x43E;&#x432;&#x430; Rust, &#x438; &#x43F;&#x440;&#x43E; &#x41C;&#x43E;&#x43D;&#x430;&#x434;&#x44B;. &#x418;, &#x43A;&#x43E;&#x43D;&#x435;&#x447;&#x43D;&#x43E;, &#x43E;&#x442;&#x432;&#x435;&#x442;&#x44B; &#x43D;&#x430; &#x432;&#x43E;&#x43F;&#x440;&#x43E;&#x441;&#x44B; &#x441;&#x43B;&#x443;&#x448;&#x430;&#x442;&#x435;&#x43B;&#x435;&#x439;.</p>
<p>&#x428;&#x43E;&#x443; &#x43D;&#x43E;&#x442;&#x435;&#x441;:</p>
<ul>
<li>&#x412;&#x430;&#x43A;&#x430;&#x43D;&#x441;&#x438;&#x44F; C++ &amp; Scala Software Engineer</li>
<li>Comparison of Networking Solutions for Kubernetes &mdash; Comparison of Networking Solutions for Kubernetes 2 documentation</li>
<li><a href="http://blog.jetbrains.com/kotlin/2016/02/kotlin-1-0-released-pragmatic-language-for-jvm-and-android/">Kotlin 1.0 Released: Pragmatic Language for JVM and Android | Kotlin Blog</a></li>
<li>Go 1.6 is released &mdash; The Go Blog</li>
<li>Does FreeBSD support OpenGL 3.3?</li>
<li>Unable to build Assimp on FreeBSD 10.2 &middot; Issue #795 &middot; assimp/assimp &middot; GitHub</li>
<li>Vulkan &mdash; Industry Forged</li>
<li>Vulkan in 30 minutes</li>
<li>OpenNews: &#x41E;&#x43F;&#x443;&#x431;&#x43B;&#x438;&#x43A;&#x43E;&#x432;&#x430;&#x43D; &#x433;&#x440;&#x430;&#x444;&#x438;&#x447;&#x435;&#x441;&#x43A;&#x438;&#x439; &#x441;&#x442;&#x430;&#x43D;&#x434;&#x430;&#x440;&#x442; Vulkan 1.0</li>
<li>Khronos Products</li>
<li>Vulkan 1.0 Released: What You Need To Know About This Cross-Platform, High-Performance Graphics API &mdash; Phoronix</li>
<li>PVS-Studio &#x43F;&#x43E;&#x43A;&#x43E;&#x43F;&#x430;&#x43B;&#x441;&#x44F; &#x432; &#x44F;&#x434;&#x440;&#x435; FreeBSD</li>
<li>&#x41A;&#x440;&#x438;&#x442;&#x438;&#x447;&#x435;&#x441;&#x43A;&#x430;&#x44F; &#x443;&#x44F;&#x437;&#x432;&#x438;&#x43C;&#x43E;&#x441;&#x442;&#x44C; &#x431;&#x438;&#x431;&#x43B;&#x438;&#x43E;&#x442;&#x435;&#x43A;&#x438; glibc &#x43F;&#x43E;&#x437;&#x432;&#x43E;&#x43B;&#x44F;&#x435;&#x442; &#x43E;&#x441;&#x443;&#x449;&#x435;&#x441;&#x442;&#x432;&#x43B;&#x44F;&#x442;&#x44C; &#x443;&#x434;&#x430;&#x43B;&#x435;&#x43D;&#x43D;&#x43E;&#x435; &#x432;&#x44B;&#x43F;&#x43E;&#x43B;&#x43D;&#x435;&#x43D;&#x438;&#x435; &#x43A;&#x43E;&#x434;&#x430; / &#x411;&#x43B;&#x43E;&#x433; &#x43A;&#x43E;&#x43C;&#x43F;&#x430;&#x43D;&#x438;&#x438; Positive Technologies / &#x425;&#x430;&#x431;&#x440;&#x430;&#x445;&#x430;&#x431;&#x440;</li>
<li>FreeBSD and CVE-2015-7547</li>
<li>OpenNews: &#x412; Ubuntu 16.04 &#x431;&#x443;&#x434;&#x435;&#x442; &#x434;&#x43E;&#x431;&#x430;&#x432;&#x43B;&#x435;&#x43D;&#x430; &#x43F;&#x43E;&#x434;&#x434;&#x435;&#x440;&#x436;&#x43A;&#x430; ZFS &#x438; Vulkan</li>
<li>From the Canyon Edge: ZFS is <em>the</em> FS for Containers in Ubuntu 16.04!</li>
<li>There is No Now &mdash; ACM Queue</li>
<li>select * from depesz; &raquo; Blog Archive &raquo; Waiting for 9.6 &ndash; Remove GROUP BY columns that are functionally dependent on other columns.</li>
<li>Hint Bits &mdash; PostgreSQL wiki</li>
<li>Speeding up things with hint bits &mdash; Cybertec &mdash; The PostgreSQL Database Company</li>
<li>Introduction to Windows shellcode development &ndash; Part 3 &ndash; Security Caf&eacute;</li>
<li>The latest high-end Ubuntu phone will be available globally | ZDNet</li>
<li>CharybdeFS: a new fault-injecting filesystem for software testing</li>
<li>Red Book, 5th ed. Ch. 6: Weak Isolation and Distribution</li>
<li>PostgreSQL: Documentation: 9.5: Transaction Isolation</li>
<li>[Libevent-users] Comparison of libevent and libuv</li>
<li>Kazuho&rsquo;s Weblog: The reasons I stopped using libuv for H2O</li>
<li>Using non-blocking and asynchronous I/O (CK10 problem) in Linux and Windows (with epool, iocp, libevent/libev/libuv/boost.asio and librt/libaio) | Rui&rsquo;s Blog</li>
<li>&#x417;&#x430;&#x43F;&#x430;&#x445; &#x43C;&#x43E;&#x43D;&#x430;&#x434; &#x43F;&#x43E; &#x443;&#x442;&#x440;&#x430;&#x43C; &mdash; &#x41F;&#x440;&#x43E;&#x433;&#x443;&#x43B;&#x43A;&#x438; &#x43F;&#x43E; &#x432;&#x43E;&#x434;&#x435;</li>
<li>&#x422;&#x435;&#x43C;&#x44B; &#x438; &#x432;&#x43E;&#x43F;&#x440;&#x43E;&#x441;&#x44B; &#x441;&#x43B;&#x443;&#x448;&#x430;&#x442;&#x435;&#x43B;&#x435;&#x439; &#x434;&#x43B;&#x44F; 0080 &laquo; DevZen Podcast</li>
</ul>
]]></description><link>http://devzen.ru/episode-0080/</link><guid isPermaLink="true">http://devzen.ru/episode-0080/</guid><category><![CDATA[Podcast]]></category><category><![CDATA[Kotlin]]></category><dc:creator><![CDATA[DevZen Podcast]]></dc:creator><pubDate>Sat, 20 Feb 2016 08:34:00 GMT</pubDate><enclosure url="http://devzen.ru/download/2016/devzen-0080-2016-02-19-3280e712a2cc1485.mp3" length="55240704" type="audio/mpeg"/></item><item><title><![CDATA[[RU] Немного о Kotlin.]]></title><description><![CDATA[<p><img src="https://habrastorage.org/getpro/habr/post_images/b30/fc2/317/b30fc231752f0d1d270b4c80538a28dc.jpg" alt="Kotlin"></p>
<p>&#x41D;&#x430; &#x434;&#x43D;&#x44F;&#x445; JetBrains &#x43F;&#x43E;&#x441;&#x43B;&#x435; &#x43F;&#x44F;&#x442;&#x438;&#x43B;&#x435;&#x442;&#x43D;&#x435;&#x439; &#x440;&#x430;&#x431;&#x43E;&#x442;&#x44B; &#x432;&#x44B;&#x43F;&#x443;&#x441;&#x442;&#x438;&#x43B;&#x430; &#x43F;&#x435;&#x440;&#x432;&#x44B;&#x439; &#x440;&#x435;&#x43B;&#x438;&#x437; &#x44F;&#x437;&#x44B;&#x43A;&#x430; Kotlin. &#x414;&#x430;&#x432;&#x430;&#x439;&#x442;&#x435; &#x43F;&#x43E;&#x441;&#x43C;&#x43E;&#x442;&#x440;&#x438;&#x43C;, &#x447;&#x442;&#x43E; &#x436;&#x435; &#x44D;&#x442;&#x43E; &#x437;&#x430; &#x44F;&#x437;&#x44B;&#x43A;, &#x43F;&#x43E;&#x43F;&#x440;&#x43E;&#x431;&#x443;&#x435;&#x43C; &#x440;&#x430;&#x437;&#x43E;&#x431;&#x440;&#x430;&#x442;&#x44C;&#x441;&#x44F; &#x437;&#x430;&#x447;&#x435;&#x43C; &#x438; &#x434;&#x43B;&#x44F; &#x43A;&#x43E;&#x433;&#x43E; &#x43E;&#x43D;, &#x43A;&#x430;&#x43A;&#x438;&#x435; &#x438;&#x43C;&#x435;&#x435;&#x442; &#x444;&#x443;&#x43D;&#x43A;&#x446;&#x438;&#x43E;&#x43D;&#x430;&#x43B;&#x44C;&#x43D;&#x44B;&#x435; &#x43E;&#x441;&#x43E;&#x431;&#x435;&#x43D;&#x43D;&#x43E;&#x441;&#x442;&#x438;. &#x421;&#x43A;&#x43E;&#x440;&#x435;&#x435; &#x432;&#x441;&#x435;&#x433;&#x43E; &#x432; &#x441;&#x442;&#x430;&#x442;&#x44C;&#x44E; &#x437;&#x430;&#x442;&#x435;&#x441;&#x430;&#x43B;&#x438;&#x441;&#x44C; &#x438; &#x43B;&#x438;&#x447;&#x43D;&#x44B;&#x435; &#x432;&#x43F;&#x435;&#x447;&#x430;&#x442;&#x43B;&#x435;&#x43D;&#x438;&#x44F; &#x43E;&#x442; &#x44F;&#x437;&#x44B;&#x43A;&#x430;, &#x43D;&#x43E; &#x44F; &#x441;&#x442;&#x430;&#x440;&#x430;&#x43B;&#x441;&#x44F;, &#x447;&#x442;&#x43E;&#x431;&#x44B; &#x43E;&#x43D;&#x438; &#x43D;&#x435; &#x432;&#x43B;&#x438;&#x44F;&#x43B;&#x438; &#x43D;&#x430; &#x438;&#x437;&#x43B;&#x43E;&#x436;&#x435;&#x43D;&#x438;&#x435; &#x43F;&#x43E;&#x43B;&#x435;&#x437;&#x43D;&#x43E;&#x439; &#x438;&#x43D;&#x444;&#x43E;&#x440;&#x43C;&#x430;&#x446;&#x438;&#x438;. &#x415;&#x441;&#x43B;&#x438; &#x432;&#x44B; &#x435;&#x449;&#x435; &#x43D;&#x438;&#x447;&#x435;&#x433;&#x43E; &#x438;&#x43B;&#x438; &#x43F;&#x43E;&#x447;&#x442;&#x438; &#x43D;&#x438;&#x447;&#x435;&#x433;&#x43E; &#x43D;&#x435; &#x437;&#x43D;&#x430;&#x435;&#x442;&#x435; &#x43E; Kotlin, &#x442;&#x43E; &#x44F; &#x437;&#x430;&#x432;&#x438;&#x434;&#x443;&#x44E; &#x432;&#x430;&#x43C;, &#x438;&#x431;&#x43E; &#x43F;&#x43E; &#x43C;&#x43E;&#x435;&#x43C;&#x443; &#x43E;&#x449;&#x443;&#x449;&#x435;&#x43D;&#x438;&#x44E; &#x43F;&#x43E;&#x447;&#x438;&#x442;&#x430;&#x442;&#x44C; &#x43F;&#x440;&#x43E; &#x438;&#x43D;&#x441;&#x442;&#x440;&#x443;&#x43C;&#x435;&#x43D;&#x442;, &#x43A;&#x43E;&#x442;&#x43E;&#x440;&#x44B;&#x439; &#x442;&#x44B; &#x434;&#x43E;&#x43B;&#x433;&#x43E; &#x436;&#x434;&#x430;&#x43B;, &#x441;&#x440;&#x43E;&#x434;&#x43D;&#x438; &#x440;&#x430;&#x441;&#x43F;&#x430;&#x43A;&#x43E;&#x432;&#x43A;&#x435; &#x43D;&#x43E;&#x432;&#x43E;&#x433;&#x43E;&#x434;&#x43D;&#x435;&#x433;&#x43E; &#x43F;&#x43E;&#x434;&#x430;&#x440;&#x43A;&#x430;. &#x412;&#x43F;&#x440;&#x43E;&#x447;&#x435;&#x43C; &#x441;&#x443;&#x434;&#x438;&#x442;&#x435; &#x441;&#x430;&#x43C;&#x438;.</p>
<h2>&#x427;&#x442;&#x43E; &#x442;&#x430;&#x43A;&#x43E;&#x435; &#x41A;&#x43E;&#x442;&#x43B;&#x438;&#x43D;</h2>
<p>&#x41A;&#x43E;&#x442;&#x43B;&#x438;&#x43D; &mdash; &#x44D;&#x442;&#x43E; &#x43D;&#x435;&#x431;&#x43E;&#x43B;&#x44C;&#x448;&#x43E;&#x439; &#x43E;&#x441;&#x442;&#x440;&#x43E;&#x432; &#x432; &#x424;&#x438;&#x43D;&#x441;&#x43A;&#x43E;&#x43C; &#x437;&#x430;&#x43B;&#x438;&#x432;&#x435; &#x43D;&#x435;&#x434;&#x430;&#x43B;&#x435;&#x43A;&#x43E; &#x43E;&#x442; &#x421;&#x430;&#x43D;&#x43A;&#x442;-&#x41F;&#x435;&#x442;&#x435;&#x440;&#x431;&#x443;&#x440;&#x433;&#x430;. &#x412;&#x438;&#x434;&#x438;&#x43C;&#x43E;, &#x442;&#x435;&#x43C; &#x441;&#x430;&#x43C;&#x44B;&#x43C; &#x441;&#x43E;&#x437;&#x434;&#x430;&#x442;&#x435;&#x43B;&#x438; &#x434;&#x430;&#x44E;&#x442; &#x43E;&#x442;&#x441;&#x44B;&#x43B;&#x43A;&#x443; &#x43A; &#x442;&#x43E;&#x43C;&#x443;, &#x447;&#x442;&#x43E; &#x43D;&#x43E;&#x432;&#x44B;&#x439; &#x44F;&#x437;&#x44B;&#x43A;, &#x43A;&#x430;&#x43A; &#x43E;&#x441;&#x442;&#x440;&#x43E;&#x432; &#x41A;&#x43E;&#x442;&#x43B;&#x438;&#x43D; &mdash; &#x43C;&#x43B;&#x430;&#x434;&#x448;&#x438;&#x439; &#x440;&#x443;&#x441;&#x441;&#x43A;&#x438;&#x439; &#x431;&#x440;&#x430;&#x442; &#x434;&#x430;&#x43B;&#x435;&#x43A;&#x43E;&#x433;&#x43E; &#x43E;&#x441;&#x442;&#x440;&#x43E;&#x432;&#x430; <a href="https://ru.wikipedia.org/wiki/%D0%AF%D0%B2%D0%B0">&#x42F;&#x432;&#x430;</a>.</p>
<h2>&#x414;&#x43B;&#x44F; &#x43A;&#x43E;&#x433;&#x43E; &#x44D;&#x442;&#x43E;&#x442; &#x44F;&#x437;&#x44B;&#x43A;</h2>
<p>&#x414;&#x435;&#x439;&#x441;&#x442;&#x432;&#x438;&#x442;&#x435;&#x43B;&#x44C;&#x43D;&#x43E;, &#x43D;&#x43E;&#x432;&#x44B;&#x439; &#x44F;&#x437;&#x44B;&#x43A; &#x43A;&#x43E;&#x43C;&#x43F;&#x438;&#x43B;&#x438;&#x440;&#x443;&#x435;&#x442;&#x441;&#x44F; &#x432; JVM &#x431;&#x430;&#x439;&#x442;-&#x43A;&#x43E;&#x434; (&#x435;&#x441;&#x442;&#x44C; &#x435;&#x449;&#x435; &#x438; &#x43A;&#x43E;&#x43C;&#x43F;&#x438;&#x43B;&#x44F;&#x446;&#x438;&#x44F; &#x432; JavaScript, &#x43D;&#x43E; &#x442;&#x430;&#x43A; &#x43A;&#x430;&#x43A; &#x440;&#x435;&#x43B;&#x438;&#x437; &#x43A;&#x43E;&#x43C;&#x43F;&#x438;&#x43B;&#x44F;&#x442;&#x43E;&#x440;&#x430; &#x438;&#x43C;&#x435;&#x43D;&#x43D;&#x43E; &#x432; JVM, &#x44D;&#x442;&#x443; &#x442;&#x435;&#x43C;&#x443; &#x43F;&#x440;&#x438;&#x434;&#x435;&#x442;&#x441;&#x44F; &#x43E;&#x43F;&#x44F;&#x442;&#x44C; &#x43E;&#x442;&#x43B;&#x43E;&#x436;&#x438;&#x442;&#x44C;). &#x410; &#x44D;&#x442;&#x43E; &#x437;&#x43D;&#x430;&#x447;&#x438;&#x442;, &#x447;&#x442;&#x43E; &#x43E;&#x43D; &#x43C;&#x43E;&#x436;&#x435;&#x442; &#x437;&#x430;&#x438;&#x43D;&#x442;&#x435;&#x440;&#x435;&#x441;&#x43E;&#x432;&#x430;&#x442;&#x44C; &#x432;&#x441;&#x435;&#x445;, &#x43A;&#x442;&#x43E; &#x438;&#x43C;&#x435;&#x435;&#x442; &#x434;&#x435;&#x43B;&#x43E; &#x441; Java-&#x43C;&#x430;&#x448;&#x438;&#x43D;&#x43E;&#x439; &#x438; &#x432; &#x446;&#x435;&#x43B;&#x43E;&#x43C; &#x441; &#x44F;&#x437;&#x44B;&#x43A;&#x430;&#x43C;&#x438; &#x441;&#x43E; &#x441;&#x431;&#x43E;&#x440;&#x449;&#x438;&#x43A;&#x43E;&#x43C; &#x43C;&#x443;&#x441;&#x43E;&#x440;&#x430; (&#x430; &#x441; &#x432;&#x44B;&#x445;&#x43E;&#x434;&#x43E;&#x43C; &#x440;&#x435;&#x43B;&#x438;&#x437;&#x430; &#x43A;&#x43E;&#x43C;&#x43F;&#x438;&#x43B;&#x44F;&#x446;&#x438;&#x438; &#x432; JavaScript &#x43F;&#x43E;&#x43A;&#x440;&#x44B;&#x442;&#x438;&#x435; &#x438; &#x432;&#x43E;&#x437;&#x43C;&#x43E;&#x436;&#x43D;&#x43E;&#x441;&#x442;&#x438; &#x431;&#x443;&#x434;&#x443;&#x442; &#x435;&#x449;&#x435; &#x448;&#x438;&#x440;&#x435;).</p>
<h2>&#x41F;&#x440;&#x43E;&#x441;&#x442;&#x43E;&#x439; &#x438; &#x441;&#x43E;&#x432;&#x43C;&#x435;&#x441;&#x442;&#x438;&#x43C;&#x44B;&#x439;</h2>
<p>&#x414;&#x432;&#x435; &#x433;&#x43B;&#x430;&#x432;&#x43D;&#x44B;&#x445; &#x43E;&#x441;&#x43E;&#x431;&#x435;&#x43D;&#x43D;&#x43E;&#x441;&#x442;&#x438; &#x43A;&#x43E;&#x442;&#x43B;&#x438;&#x43D;&#x430;, &#x43D;&#x430; &#x43C;&#x43E;&#x439; &#x432;&#x437;&#x433;&#x43B;&#x44F;&#x434;, &#x44D;&#x442;&#x43E; &#x435;&#x433;&#x43E; &#x43F;&#x440;&#x43E;&#x441;&#x442;&#x43E;&#x442;&#x430; &#x438; &#x43F;&#x43E;&#x43B;&#x43D;&#x430;&#x44F; &#x441;&#x43E;&#x432;&#x43C;&#x435;&#x441;&#x442;&#x438;&#x43C;&#x43E;&#x441;&#x442;&#x44C; &#x441; Java. &#x41A;&#x43E;&#x442;&#x43B;&#x438;&#x43D; &#x441;&#x43E;&#x437;&#x434;&#x430;&#x432;&#x430;&#x43B;&#x441;&#x44F; &#x43A;&#x43E;&#x43C;&#x43F;&#x430;&#x43D;&#x438;&#x435;&#x439;, &#x43A;&#x43E;&#x442;&#x43E;&#x440;&#x430;&#x44F; &#x434;&#x435;&#x43B;&#x430;&#x435;&#x442; &#x43E;&#x447;&#x435;&#x43D;&#x44C; &#x43C;&#x43D;&#x43E;&#x433;&#x43E; &#x43F;&#x440;&#x43E;&#x434;&#x443;&#x43A;&#x442;&#x43E;&#x432; &#x43D;&#x430; Java &#x438; &#x43A;&#x43E;&#x442;&#x43E;&#x440;&#x430;&#x44F; &#x445;&#x43E;&#x440;&#x43E;&#x448;&#x43E; &#x440;&#x430;&#x437;&#x431;&#x438;&#x440;&#x430;&#x435;&#x442;&#x441;&#x44F; &#x432; &#x441;&#x43E;&#x432;&#x440;&#x435;&#x43C;&#x435;&#x43D;&#x43D;&#x44B;&#x445; &#x438;&#x43D;&#x441;&#x442;&#x440;&#x443;&#x43C;&#x435;&#x43D;&#x442;&#x430;&#x445; &#x440;&#x430;&#x437;&#x440;&#x430;&#x431;&#x43E;&#x442;&#x43A;&#x438;. &#x417;&#x430;&#x43F;&#x440;&#x43E;&#x441; &#x43D;&#x430; &#x43D;&#x43E;&#x432;&#x44B;&#x439; &#x44F;&#x437;&#x44B;&#x43A; &#x432;&#x438;&#x442;&#x430;&#x435;&#x442; &#x432; &#x432;&#x43E;&#x437;&#x434;&#x443;&#x445;&#x435; &#x434;&#x430;&#x432;&#x43D;&#x43E;, &#x43D;&#x43E; &#x441;&#x434;&#x435;&#x43B;&#x430;&#x442;&#x44C; &#x442;&#x430;&#x43A;&#x43E;&#x439; &#x44F;&#x437;&#x44B;&#x43A;, &#x43A;&#x43E;&#x442;&#x43E;&#x440;&#x44B;&#x439; &#x431;&#x44B; &#x43F;&#x43E;&#x437;&#x432;&#x43E;&#x43B;&#x438;&#x43B; &#x432;&#x437;&#x44F;&#x442;&#x44C; (&#x43E;&#x433;&#x440;&#x43E;&#x43C;&#x43D;&#x443;&#x44E;) &#x433;&#x43E;&#x442;&#x43E;&#x432;&#x443;&#x44E; &#x43A;&#x43E;&#x434;&#x43E;&#x432;&#x443;&#x44E; &#x431;&#x430;&#x437;&#x443; Java, &#x43E;&#x431;&#x44B;&#x447;&#x43D;&#x44B;&#x445; Java-&#x440;&#x430;&#x437;&#x440;&#x430;&#x431;&#x43E;&#x442;&#x447;&#x438;&#x43A;&#x43E;&#x432;, &#x434;&#x430;&#x442;&#x44C; &#x438;&#x43C; &#x43D;&#x43E;&#x432;&#x44B;&#x439; &#x438;&#x43D;&#x441;&#x442;&#x440;&#x443;&#x43C;&#x435;&#x43D;&#x442; &#x438; &#x431;&#x435;&#x441;&#x448;&#x43E;&#x432;&#x43D;&#x43E; (&#x43D;&#x43E; &#x431;&#x43E;&#x43B;&#x435;&#x435; &#x44D;&#x444;&#x444;&#x435;&#x43A;&#x442;&#x438;&#x432;&#x43D;&#x43E;) &#x43F;&#x440;&#x43E;&#x434;&#x43E;&#x43B;&#x436;&#x430;&#x442;&#x44C; &#x440;&#x430;&#x437;&#x440;&#x430;&#x431;&#x43E;&#x442;&#x43A;&#x443; &mdash; &#x442;&#x430;&#x43A;&#x43E;&#x433;&#x43E; &#x438;&#x43D;&#x441;&#x442;&#x440;&#x443;&#x43C;&#x435;&#x43D;&#x442;&#x430; &#x434;&#x43E; &#x43F;&#x43E;&#x44F;&#x432;&#x43B;&#x435;&#x43D;&#x438;&#x44F; &#x43A;&#x43E;&#x442;&#x43B;&#x438;&#x43D;&#x430; &#x43D;&#x435; &#x441;&#x443;&#x449;&#x435;&#x441;&#x442;&#x432;&#x43E;&#x432;&#x430;&#x43B;&#x43E;. &#x421;&#x43E;&#x437;&#x434;&#x430;&#x442;&#x435;&#x43B;&#x438; &#x43D;&#x43E;&#x432;&#x43E;&#x433;&#x43E; &#x44F;&#x437;&#x44B;&#x43A;&#x430;, &#x43D;&#x430; &#x43C;&#x43E;&#x439; &#x432;&#x437;&#x433;&#x43B;&#x44F;&#x434;, &#x43E;&#x447;&#x435;&#x43D;&#x44C; &#x445;&#x43E;&#x440;&#x43E;&#x448;&#x43E; &#x43F;&#x43E;&#x447;&#x443;&#x432;&#x441;&#x442;&#x432;&#x43E;&#x432;&#x430;&#x43B;&#x438; &#x43F;&#x43E;&#x442;&#x440;&#x435;&#x431;&#x43D;&#x43E;&#x441;&#x442;&#x438; &#x431;&#x438;&#x437;&#x43D;&#x435;&#x441;&#x430; &#x438; &#x440;&#x430;&#x437;&#x440;&#x430;&#x431;&#x43E;&#x442;&#x447;&#x438;&#x43A;&#x43E;&#x432;: &#x431;&#x438;&#x437;&#x43D;&#x435;&#x441;&#x443; &#x434;&#x430;&#x43B;&#x438; &#x432;&#x43E;&#x437;&#x43C;&#x43E;&#x436;&#x43D;&#x43E;&#x441;&#x442;&#x44C; &#x443;&#x432;&#x435;&#x43B;&#x438;&#x447;&#x438;&#x442;&#x44C; &#x44D;&#x444;&#x444;&#x435;&#x43A;&#x442;&#x438;&#x432;&#x43D;&#x43E;&#x441;&#x442;&#x44C; &#x440;&#x430;&#x437;&#x440;&#x430;&#x431;&#x43E;&#x442;&#x447;&#x438;&#x43A;&#x43E;&#x432;, &#x430; &#x440;&#x430;&#x437;&#x440;&#x430;&#x431;&#x43E;&#x442;&#x447;&#x438;&#x43A;&#x430;&#x43C; &#x434;&#x430;&#x442;&#x44C; &#x441;&#x43E;&#x432;&#x440;&#x435;&#x43C;&#x435;&#x43D;&#x43D;&#x44B;&#x439; &#x438;&#x43D;&#x441;&#x442;&#x440;&#x443;&#x43C;&#x435;&#x43D;&#x442; &#x434;&#x43B;&#x44F; &#x440;&#x430;&#x437;&#x440;&#x430;&#x431;&#x43E;&#x442;&#x43A;&#x438;. &#x418; &#x43A;&#x43E;&#x433;&#x434;&#x430; &#x44F; &#x433;&#x43E;&#x432;&#x43E;&#x440;&#x44E; &#x43E; &laquo;&#x441;&#x43E;&#x432;&#x440;&#x435;&#x43C;&#x435;&#x43D;&#x43D;&#x43E;&#x43C; &#x438;&#x43D;&#x441;&#x442;&#x440;&#x443;&#x43C;&#x435;&#x43D;&#x442;&#x435;&raquo;, &#x44F;, &#x43A;&#x43E;&#x43D;&#x435;&#x447;&#x43D;&#x43E;, &#x438;&#x43C;&#x435;&#x44E; &#x432;&#x432;&#x438;&#x434;&#x443; &#x43D;&#x435; &#x442;&#x43E;&#x43B;&#x44C;&#x43A;&#x43E; &#x43A;&#x43E;&#x43C;&#x43F;&#x438;&#x43B;&#x44F;&#x442;&#x43E;&#x440;, &#x43D;&#x43E; &#x438; &#x43F;&#x43E;&#x434;&#x434;&#x435;&#x440;&#x436;&#x43A;&#x443; &#x432; IDE, &#x431;&#x435;&#x437; &#x43A;&#x43E;&#x442;&#x43E;&#x440;&#x43E;&#x439; &#x43B;&#x438;&#x447;&#x43D;&#x43E; &#x43C;&#x43E;&#x44F; &#x434;&#x435;&#x44F;&#x442;&#x435;&#x43B;&#x44C;&#x43D;&#x43E;&#x441;&#x442;&#x44C; &#x440;&#x430;&#x437;&#x440;&#x430;&#x431;&#x43E;&#x442;&#x447;&#x438;&#x43A;&#x430; &#x43C;&#x43D;&#x435; &#x432;&#x438;&#x434;&#x438;&#x442;&#x441;&#x44F; &#x441;&#x43E;&#x432;&#x441;&#x435;&#x43C; &#x43D;&#x435;&#x43C;&#x44B;&#x441;&#x43B;&#x438;&#x43C;&#x43E;&#x439;.
&#x412; &#x438;&#x442;&#x43E;&#x433;&#x435;: &#x43F;&#x440;&#x43E;&#x441;&#x442;&#x43E;&#x442;&#x430; &#x43F;&#x43E;&#x437;&#x432;&#x43E;&#x43B;&#x44F;&#x435;&#x442; &#x438;&#x441;&#x43F;&#x43E;&#x43B;&#x44C;&#x437;&#x43E;&#x432;&#x430;&#x442;&#x44C; &#x44F;&#x437;&#x44B;&#x43A; &#x43F;&#x43E;&#x447;&#x442;&#x438; &#x43B;&#x44E;&#x431;&#x43E;&#x43C;&#x443; Java-&#x440;&#x430;&#x437;&#x440;&#x430;&#x431;&#x43E;&#x442;&#x447;&#x438;&#x43A;&#x443;, &#x43A;&#x43E;&#x442;&#x43E;&#x440;&#x44B;&#x439; &#x433;&#x43E;&#x442;&#x43E;&#x432; &#x43F;&#x43E;&#x442;&#x440;&#x430;&#x442;&#x438;&#x442;&#x44C; &#x43F;&#x43E;&#x43B;&#x447;&#x430;&#x441;&#x430; &#x43D;&#x430; &#x442;&#x43E;, &#x447;&#x442;&#x43E;&#x431;&#x44B; &#x43F;&#x43E;&#x441;&#x43C;&#x43E;&#x442;&#x440;&#x435;&#x442;&#x44C; &#x442;&#x443;&#x442;&#x43E;&#x440;&#x438;&#x430;&#x43B; &#x438;&#x43B;&#x438; &#x441;&#x43F;&#x435;&#x446;&#x438;&#x444;&#x438;&#x43A;&#x430;&#x446;&#x438;&#x44E; &#x44F;&#x437;&#x44B;&#x43A;&#x430;, &#x43E;&#x431;&#x440;&#x430;&#x442;&#x43D;&#x430;&#x44F; &#x441;&#x43E;&#x432;&#x43C;&#x435;&#x441;&#x442;&#x438;&#x43C;&#x43E;&#x441;&#x442;&#x44C; &#x436;&#x435; &#x43F;&#x43E;&#x437;&#x432;&#x43E;&#x43B;&#x44F;&#x435;&#x442; &#x438;&#x441;&#x43F;&#x43E;&#x43B;&#x44C;&#x437;&#x43E;&#x432;&#x430;&#x442;&#x44C; &#x44F;&#x437;&#x44B;&#x43A; &#x432; &#x443;&#x436;&#x435; &#x441;&#x443;&#x449;&#x435;&#x441;&#x442;&#x432;&#x443;&#x44E;&#x449;&#x435;&#x43C; &#x43F;&#x440;&#x43E;&#x435;&#x43A;&#x442;&#x435;.</p>
<h2>Production-ready</h2>
<p>&#x41A;&#x43E;&#x43D;&#x435;&#x447;&#x43D;&#x43E;, &#x432; &#x43F;&#x435;&#x440;&#x432;&#x443;&#x44E; &#x43E;&#x447;&#x435;&#x440;&#x435;&#x434;&#x44C;, &#x437;&#x430;&#x43F;&#x440;&#x43E;&#x441; &#x43D;&#x430; &#x44D;&#x442;&#x43E;&#x442; &#x44F;&#x437;&#x44B;&#x43A; &#x431;&#x44B;&#x43B; &#x443; &#x441;&#x430;&#x43C;&#x43E;&#x439; JetBrains, &#x43E;&#x442;&#x441;&#x44E;&#x434;&#x430; &#x438; &#x43D;&#x435;&#x43A;&#x43E;&#x442;&#x43E;&#x440;&#x43E;&#x435; &#x43F;&#x43E;&#x43D;&#x438;&#x43C;&#x430;&#x43D;&#x438;&#x435;, &#x43A;&#x430;&#x43A;&#x438;&#x43C; &#x43E;&#x43D; &#x434;&#x43E;&#x43B;&#x436;&#x435;&#x43D; &#x431;&#x44B;&#x442;&#x44C;. &#x411;&#x43E;&#x43B;&#x435;&#x435; &#x442;&#x43E;&#x433;&#x43E;, JetBrains &#x436;&#x435; &#x432;&#x43D;&#x443;&#x442;&#x440;&#x438; &#x43A;&#x43E;&#x43C;&#x43F;&#x430;&#x43D;&#x438;&#x438; &#x435;&#x433;&#x43E; &#x438; &#x442;&#x435;&#x441;&#x442;&#x438;&#x440;&#x43E;&#x432;&#x430;&#x43B;&#x430;: &#x43A; &#x43C;&#x43E;&#x43C;&#x435;&#x43D;&#x442;&#x443; &#x432;&#x44B;&#x445;&#x43E;&#x434;&#x430; &#x44D;&#x442;&#x43E;&#x433;&#x43E; &#x440;&#x435;&#x43B;&#x438;&#x437;&#x430; &#x443; &#x43A;&#x43E;&#x43C;&#x43F;&#x430;&#x43D;&#x438;&#x438; &#x443;&#x436;&#x435; &#x435;&#x441;&#x442;&#x44C; &#x43A;&#x430;&#x43A; &#x43C;&#x438;&#x43D;&#x438;&#x43C;&#x443;&#x43C; &#x43E;&#x434;&#x438;&#x43D; <a href="https://blog.jetbrains.com/dotnet/2016/01/13/project-rider-a-csharp-ide/">&#x43A;&#x440;&#x443;&#x43F;&#x43D;&#x44B;&#x439; &#x43F;&#x440;&#x43E;&#x434;&#x443;&#x43A;&#x442; &#x441;&#x434;&#x435;&#x43B;&#x430;&#x43D;&#x43D;&#x44B;&#x439; &#x447;&#x438;&#x441;&#x442;&#x43E; &#x43D;&#x430; &#x43A;&#x43E;&#x442;&#x43B;&#x438;&#x43D;&#x435;</a> (&#x434;&#x430;, &#x44F; &#x43F;&#x43E;&#x43D;&#x438;&#x43C;&#x430;&#x44E;, &#x447;&#x442;&#x43E; &#x43F;&#x43B;&#x430;&#x442;&#x444;&#x43E;&#x440;&#x43C;&#x430; &#x43F;&#x43E; &#x43F;&#x440;&#x435;&#x436;&#x43D;&#x435;&#x43C;&#x443; &#x43D;&#x430;&#x43F;&#x438;&#x441;&#x430;&#x43D;&#x430; &#x43D;&#x430; Java). &#x41E;&#x442;&#x441;&#x44E;&#x434;&#x430; &#x43C;&#x43E;&#x436;&#x43D;&#x43E; &#x43F;&#x440;&#x435;&#x434;&#x43F;&#x43E;&#x43B;&#x43E;&#x436;&#x438;&#x442;&#x44C;, &#x447;&#x442;&#x43E; &#x437;&#x430;&#x44F;&#x432;&#x43B;&#x435;&#x43D;&#x438;&#x44F; &#x43E; &#x433;&#x43E;&#x442;&#x43E;&#x432;&#x43D;&#x43E;&#x441;&#x442;&#x438; &#x44F;&#x437;&#x44B;&#x43A;&#x430; &#x43A; &#x43F;&#x440;&#x43E;&#x434;&#x430;&#x43A;&#x448;&#x435;&#x43D;&#x443; &#x43D;&#x435; &#x433;&#x43E;&#x43B;&#x43E;&#x441;&#x43B;&#x43E;&#x432;&#x43D;&#x44B;. &#x410; &#x438;&#x437; &#x441;&#x432;&#x43E;&#x435;&#x433;&#x43E; &#x436;&#x435; &#x43E;&#x43F;&#x44B;&#x442;&#x430; &#x438;&#x441;&#x43F;&#x43E;&#x43B;&#x44C;&#x437;&#x43E;&#x432;&#x430;&#x43D;&#x438;&#x44F; &#x43A;&#x43E;&#x442;&#x43B;&#x438;&#x43D;&#x430; &#x441; 2012 &#x433;&#x43E;&#x434;&#x430; &#x43C;&#x43E;&#x433;&#x443; &#x441;&#x43A;&#x430;&#x437;&#x430;&#x442;&#x44C;, &#x447;&#x442;&#x43E; &#x438;&#x437; &#x442;&#x435;&#x445; &#x43F;&#x440;&#x43E;&#x431;&#x43B;&#x435;&#x43C;, &#x441; &#x43A;&#x43E;&#x442;&#x43E;&#x440;&#x44B;&#x43C;&#x438; &#x44F; &#x441;&#x442;&#x430;&#x43B;&#x43A;&#x438;&#x432;&#x430;&#x43B;&#x441;&#x44F; &#x432; &#x434;&#x43E;&#x440;&#x435;&#x43B;&#x438;&#x437;&#x43D;&#x44B;&#x435; &#x432;&#x440;&#x435;&#x43C;&#x435;&#x43D;&#x430;, &#x434;&#x43E; &#x440;&#x435;&#x43B;&#x438;&#x437;&#x430; &#x43D;&#x438; &#x43E;&#x434;&#x43D;&#x430; &#x43D;&#x435; &#x434;&#x43E;&#x436;&#x438;&#x43B;&#x430;. &#x415;&#x441;&#x442;&#x44C; &#x435;&#x449;&#x435; &#x43D;&#x435;&#x431;&#x43E;&#x43B;&#x44C;&#x448;&#x438;&#x435; &#x43F;&#x440;&#x43E;&#x431;&#x43B;&#x435;&#x43C;&#x44B; &#x441; &#x43F;&#x43B;&#x430;&#x433;&#x438;&#x43D;&#x43E;&#x43C; &#x434;&#x43B;&#x44F; IDEA, &#x43D;&#x43E; &#x441;&#x430;&#x43C; &#x43A;&#x43E;&#x43C;&#x43F;&#x438;&#x43B;&#x44F;&#x442;&#x43E;&#x440; &#x440;&#x430;&#x431;&#x43E;&#x442;&#x430;&#x435;&#x442; &#x43A;&#x430;&#x43A; &#x447;&#x430;&#x441;&#x44B;.</p>
<h2>&#x421;&#x43E;&#x432;&#x43C;&#x435;&#x441;&#x442;&#x438;&#x43C; &#x441; Java 1.6</h2>
<p>&#x42D;&#x442;&#x43E; &#x43E;&#x447;&#x435;&#x43D;&#x44C; &#x432;&#x430;&#x436;&#x43D;&#x44B;&#x439; &#x43C;&#x43E;&#x43C;&#x435;&#x43D;&#x442;, &#x432;&#x435;&#x434;&#x44C; &#x438;&#x43C;&#x435;&#x43D;&#x43D;&#x43E; &#x44D;&#x442;&#x430; &#x432;&#x435;&#x440;&#x441;&#x438;&#x44F; Java &#x438;&#x441;&#x43F;&#x43E;&#x43B;&#x44C;&#x437;&#x443;&#x435;&#x442;&#x441;&#x44F; &#x432;&#x43E; &#x432;&#x441;&#x435;&#x445; &#x441;&#x43E;&#x432;&#x440;&#x435;&#x43C;&#x435;&#x43D;&#x43D;&#x44B;&#x445; &#x432;&#x435;&#x440;&#x441;&#x438;&#x44F;&#x445; Android, &#x438;, &#x43D;&#x435; &#x441;&#x43C;&#x43E;&#x442;&#x440;&#x44F; &#x43D;&#x430; <a href="http://venturebeat.com/2015/12/29/google-confirms-next-android-version-wont-use-oracles-proprietary-java-apis/">&#x437;&#x430;&#x43F;&#x43B;&#x430;&#x43D;&#x438;&#x440;&#x43E;&#x432;&#x430;&#x43D;&#x43D;&#x44B;&#x439; &#x43F;&#x435;&#x440;&#x435;&#x445;&#x43E;&#x434; &#x43D;&#x430; OpenJDK</a>, &#x432;&#x43E;&#x441;&#x44C;&#x43C;&#x430;&#x44F; &#x432;&#x435;&#x440;&#x441;&#x438;&#x44F; &#x43F;&#x43E;&#x43F;&#x430;&#x434;&#x435;&#x442; &#x432; &#x440;&#x443;&#x43A;&#x438; &#x440;&#x430;&#x437;&#x440;&#x430;&#x431;&#x43E;&#x442;&#x447;&#x438;&#x43A;&#x430;&#x43C; &#x43F;&#x43E;&#x434; &#x43C;&#x43E;&#x431;&#x438;&#x43B;&#x44C;&#x43D;&#x44B;&#x435; &#x443;&#x441;&#x442;&#x440;&#x43E;&#x439;&#x441;&#x442;&#x432;&#x430; &#x43D;&#x435; &#x442;&#x430;&#x43A; &#x441;&#x43A;&#x43E;&#x440;&#x43E; &#x43A;&#x430;&#x43A; &#x445;&#x43E;&#x442;&#x435;&#x43B;&#x43E;&#x441;&#x44C; &#x431;&#x44B;. &#x41A;&#x43E;&#x43D;&#x435;&#x447;&#x43D;&#x43E;, &#x435;&#x441;&#x442;&#x44C; &#x432;&#x441;&#x44F;&#x43A;&#x438;&#x435; &#x440;&#x435;&#x442;&#x440;&#x43E;&#x43B;&#x44F;&#x43C;&#x431;&#x434;&#x44B; &#x438; &#x434;&#x440;&#x443;&#x433;&#x438;&#x435; &#x443;&#x445;&#x438;&#x449;&#x440;&#x435;&#x43D;&#x438;&#x44F;, &#x43D;&#x43E; &#x43A;&#x43E;&#x442;&#x43B;&#x438;&#x43D; &mdash; &#x44D;&#x442;&#x43E; &#x43D;&#x435; &#x442;&#x43E;&#x43B;&#x44C;&#x43A;&#x43E; &#x43B;&#x44F;&#x43C;&#x431;&#x434;&#x44B; &#x434;&#x43B;&#x44F; &#x430;&#x43D;&#x434;&#x440;&#x43E;&#x438;&#x434;, &#x43D;&#x43E; &#x438; &#x441;&#x43E;&#x432;&#x440;&#x435;&#x43C;&#x435;&#x43D;&#x43D;&#x44B;&#x439; &#x44F;&#x437;&#x44B;&#x43A;, &#x43F;&#x43E;&#x437;&#x432;&#x43E;&#x43B;&#x44F;&#x44E;&#x449;&#x438;&#x439; &#x441;&#x434;&#x435;&#x43B;&#x430;&#x442;&#x44C; &#x440;&#x430;&#x437;&#x440;&#x430;&#x431;&#x43E;&#x442;&#x43A;&#x443; &#x43F;&#x43E;&#x434; &#x430;&#x43D;&#x434;&#x440;&#x43E;&#x438;&#x434; <a href="https://kotlinlang.org/docs/tutorials/android-plugin.html">&#x43F;&#x440;&#x43E;&#x449;&#x435;</a> &#x438; &#x43F;&#x440;&#x438;&#x44F;&#x442;&#x43D;&#x435;&#x439; &#x431;&#x435;&#x437; &#x43E;&#x441;&#x43E;&#x431;&#x44B;&#x445; &#x437;&#x430;&#x442;&#x440;&#x430;&#x442;. &#x410; &#x443;&#x432;&#x435;&#x43B;&#x438;&#x447;&#x435;&#x43D;&#x438;&#x435; &#x440;&#x430;&#x437;&#x43C;&#x435;&#x440;&#x430; apk &#x441;&#x43E;&#x432;&#x441;&#x435;&#x43C; &#x43D;&#x435; &#x437;&#x43D;&#x430;&#x447;&#x438;&#x442;&#x435;&#x43B;&#x44C;&#x43D;&#x43E; &#x43F;&#x43E; &#x43D;&#x44B;&#x43D;&#x435;&#x448;&#x43D;&#x438;&#x43C; &#x432;&#x440;&#x435;&#x43C;&#x435;&#x43D;&#x430;&#x43C;: 823KB (&#x434;&#x43B;&#x44F; &#x432;&#x435;&#x440;&#x441;&#x438;&#x438; 1.0.0)</p>
<h2>&#x41E;&#x441;&#x43E;&#x431;&#x435;&#x43D;&#x43D;&#x43E;&#x441;&#x442;&#x438;</h2>
<p>&#x41F;&#x43E;&#x43B;&#x43D;&#x44B;&#x439; &#x441;&#x43F;&#x438;&#x441;&#x43E;&#x43A; &#x432;&#x43E;&#x437;&#x43C;&#x43E;&#x436;&#x43D;&#x43E;&#x441;&#x442;&#x435;&#x439;, &#x43A;&#x43E;&#x43D;&#x435;&#x447;&#x43D;&#x43E;, &#x43B;&#x443;&#x447;&#x448;&#x435; &#x438;&#x441;&#x43A;&#x430;&#x442;&#x44C; &#x432; <a href="https://kotlinlang.org/docs/reference/">&#x434;&#x43E;&#x43A;&#x443;&#x43C;&#x435;&#x43D;&#x442;&#x430;&#x446;&#x438;&#x438;</a>, &#x44F; &#x436;&#x435; &#x43F;&#x43E;&#x441;&#x442;&#x430;&#x440;&#x430;&#x44E;&#x441;&#x44C; &#x43E;&#x442;&#x440;&#x430;&#x437;&#x438;&#x442;&#x44C; &#x43D;&#x430;&#x438;&#x431;&#x43E;&#x43B;&#x435;&#x435; &#x432;&#x430;&#x436;&#x43D;&#x44B;&#x435; &#x43D;&#x430; &#x43C;&#x43E;&#x439; &#x432;&#x437;&#x433;&#x43B;&#x44F;&#x434; &#x43C;&#x43E;&#x43C;&#x435;&#x43D;&#x442;&#x44B; &#x432; &#x43E;&#x431;&#x449;&#x438;&#x445; &#x441;&#x43B;&#x43E;&#x432;&#x430;&#x445;:</p>
<h2>Null safety</h2>
<p>&#x41F;&#x43E;&#x447;&#x435;&#x43C;&#x443;-&#x442;&#x43E; &#x438;&#x441;&#x442;&#x43E;&#x440;&#x438;&#x447;&#x435;&#x441;&#x43A;&#x438; &#x442;&#x430;&#x43A; &#x441;&#x43B;&#x43E;&#x436;&#x438;&#x43B;&#x43E;&#x441;&#x44C;, &#x447;&#x442;&#x43E; <a href="https://kotlinlang.org/docs/reference/null-safety.html">&#x44D;&#x442;&#x430;</a> &#x43E;&#x441;&#x43E;&#x431;&#x435;&#x43D;&#x43D;&#x43E;&#x441;&#x442;&#x44C; &#x43A;&#x43E;&#x442;&#x43B;&#x438;&#x43D;&#x430; &#x432;&#x441;&#x43F;&#x43E;&#x43C;&#x438;&#x43D;&#x430;&#x435;&#x442;&#x441;&#x44F; &#x43F;&#x435;&#x440;&#x432;&#x43E;&#x439;. &#x418; &#x445;&#x43E;&#x442;&#x44F; &#x43E;&#x43D;&#x430; &#x431;&#x435;&#x437;&#x443;&#x441;&#x43B;&#x43E;&#x432;&#x43D;&#x43E; &#x432;&#x430;&#x436;&#x43D;&#x430;, &#x43D;&#x430; &#x43C;&#x43E;&#x439; &#x432;&#x437;&#x433;&#x43B;&#x44F;&#x434; &#x43D;&#x435; &#x44F;&#x432;&#x43B;&#x44F;&#x435;&#x442;&#x441;&#x44F; &#x432;&#x430;&#x436;&#x43D;&#x435;&#x439;&#x448;&#x435;&#x439;. &#x417;&#x434;&#x435;&#x441;&#x44C; &#x44F;&#x437;&#x44B;&#x43A; &#x43F;&#x43E;&#x437;&#x432;&#x43E;&#x43B;&#x44F;&#x435;&#x442;, &#x43E;&#x43F;&#x440;&#x435;&#x434;&#x435;&#x43B;&#x44F;&#x44F; &#x43F;&#x435;&#x440;&#x435;&#x43C;&#x435;&#x43D;&#x43D;&#x44B;&#x435;, &#x43F;&#x43E;&#x43B;&#x44F;, &#x43A;&#x43E;&#x43D;&#x441;&#x442;&#x430;&#x43D;&#x442;&#x44B; &#x438; &#x442;&#x434;, &#x443;&#x43A;&#x430;&#x437;&#x430;&#x442;&#x44C;, &#x43C;&#x43E;&#x436;&#x435;&#x442; &#x43B;&#x438; &#x432; &#x43D;&#x438;&#x445; &#x445;&#x440;&#x430;&#x43D;&#x438;&#x442;&#x44C;&#x441;&#x44F; &#x441;&#x441;&#x44B;&#x43B;&#x43A;&#x430; &#x43D;&#x430; null. &#x41F;&#x43E;&#x434;&#x43D;&#x438;&#x43C;&#x430;&#x435;&#x442; &#x43D;&#x430; &#x43D;&#x43E;&#x432;&#x44B;&#x439; &#x443;&#x440;&#x43E;&#x432;&#x435;&#x43D;&#x44C; &#x438;&#x434;&#x435;&#x44E; &#x430;&#x43D;&#x43D;&#x43E;&#x442;&#x430;&#x446;&#x438;&#x439; &#x432;&#x440;&#x43E;&#x434;&#x435; @Nullable &#x438; NotNull, &#x43F;&#x43E;&#x437;&#x432;&#x43E;&#x43B;&#x44F;&#x435;&#x442; &#x443;&#x43C;&#x43D;&#x43E; &#x43F;&#x440;&#x438;&#x432;&#x43E;&#x434;&#x438;&#x442;&#x44C; &#x43A; &#x43D;&#x435;-nullable &#x442;&#x438;&#x43F;&#x443; &#x43F;&#x43E;&#x441;&#x43B;&#x435; &#x43F;&#x440;&#x43E;&#x432;&#x435;&#x440;&#x43A;&#x438; &#x435;&#x451; &#x43D;&#x430; null. &#x41D;&#x430;&#x434;&#x43E; &#x43E;&#x442;&#x43C;&#x435;&#x442;&#x438;&#x442;&#x44C;, &#x447;&#x442;&#x43E; &#x431;&#x44B;&#x432;&#x430;&#x44E;&#x442; &#x441;&#x43B;&#x443;&#x447;&#x430;&#x438;, &#x43A;&#x43E;&#x433;&#x434;&#x430; &#x44D;&#x442;&#x430; &#x43E;&#x441;&#x43E;&#x431;&#x435;&#x43D;&#x43D;&#x43E;&#x441;&#x442;&#x44C; &#x440;&#x430;&#x441;&#x445;&#x43E;&#x434;&#x438;&#x442;&#x441;&#x44F; &#x441; &#x43C;&#x43E;&#x438;&#x43C; &#x437;&#x430;&#x43A;&#x43E;&#x441;&#x442;&#x435;&#x43D;&#x435;&#x43B;&#x44B;&#x43C; &#x440;&#x430;&#x437;&#x440;&#x430;&#x431;&#x43E;&#x442;&#x43A;&#x43E;&#x439; &#x43D;&#x430; Java &#x43F;&#x440;&#x435;&#x434;&#x441;&#x442;&#x430;&#x432;&#x43B;&#x435;&#x43D;&#x438;&#x435;&#x43C; &#x43E; &#x442;&#x43E;&#x43C; &#x43A;&#x430;&#x43A; &#x434;&#x43E;&#x43B;&#x436;&#x43D;&#x44B; &#x431;&#x44B;&#x442;&#x44C; &#x441;&#x434;&#x435;&#x43B;&#x430;&#x43D;&#x44B; &#x43D;&#x435;&#x43A;&#x43E;&#x442;&#x43E;&#x440;&#x44B;&#x435; &#x432;&#x435;&#x449;&#x438;, &#x43D;&#x43E; &#x43F;&#x43E;&#x441;&#x43B;&#x435; &#x43D;&#x435;&#x43A;&#x43E;&#x442;&#x43E;&#x440;&#x43E;&#x433;&#x43E; &#x440;&#x430;&#x437;&#x434;&#x443;&#x43C;&#x44C;&#x44F; &#x445;&#x43E;&#x440;&#x43E;&#x448;&#x435;&#x435; &#x440;&#x435;&#x448;&#x435;&#x43D;&#x438;&#x435; &#x432;&#x441;&#x435;&#x433;&#x434;&#x430; &#x43D;&#x430;&#x445;&#x43E;&#x434;&#x438;&#x442;&#x441;&#x44F;.</p>
<pre><code class="hljs language-kotlin"><span class="hljs-comment">/* вопросом помечаем, что может прийти null */</span>
<span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">someFunction</span><span class="hljs-params">(someNullableParam:<span class="hljs-type">SomeType?</span>)</span> {</span>
    <span class="hljs-keyword">if</span>(someNullableParam != <span class="hljs-literal">null</span>) {
         <span class="hljs-comment">// smart cast. Компилятор видит, что передаваемое</span>
         <span class="hljs-comment">// значение не null и разрешает его передать в функцию</span>
        anotherFunction(someNullableParam)
    }
}

<span class="hljs-comment">/* здесь же уже null не пройдет, в попытке передать
 * null или nullable значение компилятор выдаст ошибку */</span>
<span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">anotherFunction</span><span class="hljs-params">(someParam:<span class="hljs-type">SomeType</span>)</span> {</span>
    <span class="hljs-comment">// делаем что-то без опаски, что переданное значение null</span>
}</code></pre>
<h2>&#x412;&#x44B;&#x432;&#x435;&#x434;&#x435;&#x43D;&#x438;&#x435; &#x442;&#x438;&#x43F;&#x43E;&#x432;</h2>
<p>&#x414;&#x430;, &#x43A;&#x43E;&#x442;&#x43B;&#x438;&#x43D; &#x43F;&#x43E;&#x447;&#x442;&#x438; &#x432;&#x435;&#x437;&#x434;&#x435; &#x433;&#x434;&#x435; &#x432;&#x43E;&#x437;&#x43C;&#x43E;&#x436;&#x43D;&#x43E;, &#x443;&#x43C;&#x435;&#x435;&#x442; &#x432;&#x44B;&#x432;&#x435;&#x441;&#x442;&#x438; &#x442;&#x438;&#x43F;, &#x43E;&#x434;&#x43D;&#x430;&#x43A;&#x43E; &#x442;&#x438;&#x43F; &#x432;&#x441;&#x451; &#x436;&#x435; &#x43F;&#x440;&#x438;&#x434;&#x435;&#x442;&#x441;&#x44F; &#x43E;&#x43F;&#x440;&#x435;&#x434;&#x435;&#x43B;&#x438;&#x442;&#x44C; &#x434;&#x43B;&#x44F; &#x43F;&#x443;&#x431;&#x43B;&#x438;&#x447;&#x43D;&#x44B;&#x445; &#x43C;&#x435;&#x442;&#x43E;&#x434;&#x43E;&#x432; &#x438; &#x441;&#x432;&#x43E;&#x439;&#x441;&#x442;&#x432;, &#x447;&#x442;&#x43E; &#x43E;&#x447;&#x435;&#x43D;&#x44C; &#x440;&#x430;&#x437;&#x443;&#x43C;&#x43D;&#x43E; (&#x43C;&#x43D;&#x435; &#x43F;&#x43E;&#x434;&#x441;&#x43A;&#x430;&#x437;&#x44B;&#x432;&#x430;&#x44E;&#x442;, &#x447;&#x442;&#x43E; &#x44D;&#x442;&#x43E; &#x43D;&#x435;&#x43F;&#x440;&#x430;&#x432;&#x434;&#x430; &mdash; &#x441; &#x43A;&#x430;&#x43A;&#x43E;&#x439;-&#x442;&#x43E; &#x432;&#x435;&#x440;&#x441;&#x438;&#x438; &#x44D;&#x442;&#x43E; &#x443;&#x431;&#x440;&#x430;&#x43B;&#x438;):</p>
<pre><code class="hljs language-kotlin"><span class="hljs-comment">// Kotlin в курсе, что здесь List&lt;Char&gt;</span>
<span class="hljs-variable"><span class="hljs-keyword">val</span> result</span> = sequenceOf(<span class="hljs-number">10</span>).map { it.toString() }.flatMap { it.toCharArray().asSequence() }.toList()</code></pre>
<h2>Extension methods</h2>
<p><a href="https://kotlinlang.org/docs/reference/extensions.html">&#x412;&#x43E;&#x437;&#x43C;&#x43E;&#x436;&#x43D;&#x43E;&#x441;&#x442;&#x44C;</a>, &#x43A;&#x43E;&#x442;&#x43E;&#x440;&#x43E;&#x439; &#x43C;&#x43D;&#x435; &#x43E;&#x441;&#x442;&#x440;&#x43E; &#x43D;&#x435; &#x445;&#x432;&#x430;&#x442;&#x430;&#x435;&#x442; &#x432; Java &#x434;&#x43B;&#x44F; &#x443;&#x432;&#x435;&#x43B;&#x438;&#x447;&#x435;&#x43D;&#x438;&#x44F; &#x433;&#x438;&#x431;&#x43A;&#x43E;&#x441;&#x442;&#x438; &#x44F;&#x437;&#x44B;&#x43A;&#x430; &#x438; &#x440;&#x435;&#x448;&#x435;&#x43D;&#x438;&#x439;. &#x417;&#x430;&#x43A;&#x43B;&#x44E;&#x447;&#x430;&#x435;&#x442;&#x441;&#x44F; &#x432; &#x432;&#x43E;&#x437;&#x43C;&#x43E;&#x436;&#x43D;&#x43E;&#x441;&#x442;&#x438; &#x43E;&#x43F;&#x440;&#x435;&#x434;&#x435;&#x43B;&#x438;&#x442;&#x44C; &#x43C;&#x435;&#x442;&#x43E;&#x434; &#x434;&#x43B;&#x44F; &#x442;&#x438;&#x43F;&#x430; &#x43E;&#x442;&#x434;&#x435;&#x43B;&#x44C;&#x43D;&#x43E; &#x43E;&#x442; &#x435;&#x433;&#x43E; (&#x442;&#x438;&#x43F;&#x430;) &#x43E;&#x431;&#x44A;&#x44F;&#x432;&#x43B;&#x435;&#x43D;&#x438;&#x44F;. &#x422;&#x430;&#x43A;&#x430;&#x44F; &#x444;&#x443;&#x43D;&#x43A;&#x446;&#x438;&#x44F;, &#x43A;&#x43E;&#x43D;&#x435;&#x447;&#x43D;&#x43E;, &#x43D;&#x435; &#x431;&#x443;&#x434;&#x435;&#x442; &#x432;&#x438;&#x440;&#x442;&#x443;&#x430;&#x43B;&#x44C;&#x43D;&#x43E;&#x439; &#x438; &#x43D;&#x438;&#x43A;&#x430;&#x43A; &#x43D;&#x435; &#x43C;&#x435;&#x43D;&#x44F;&#x435;&#x442; &#x43A;&#x43B;&#x430;&#x441;&#x441;&#x430;, &#x43A;&#x43E;&#x442;&#x43E;&#x440;&#x43E;&#x43C;&#x443; &#x43C;&#x44B; &#x434;&#x43E;&#x431;&#x430;&#x432;&#x43B;&#x44F;&#x435;&#x43C; &#x43C;&#x435;&#x442;&#x43E;&#x434;, &#x43E;&#x434;&#x43D;&#x430;&#x43A;&#x43E; &#x43F;&#x43E;&#x437;&#x432;&#x43E;&#x43B;&#x44F;&#x435;&#x442; &#x434;&#x43E;&#x431;&#x430;&#x432;&#x438;&#x442;&#x44C; &#x43A;&#x430;&#x43A; &#x443;&#x442;&#x438;&#x43B;&#x438;&#x442;&#x430;&#x440;&#x43D;&#x443;&#x44E; &#x444;&#x443;&#x43D;&#x43A;&#x446;&#x438;&#x43E;&#x43D;&#x430;&#x43B;&#x44C;&#x43D;&#x43E;&#x441;&#x442;&#x44C; &#x434;&#x43B;&#x44F; &#x443;&#x436;&#x435; &#x441;&#x443;&#x449;&#x435;&#x441;&#x442;&#x432;&#x443;&#x44E;&#x449;&#x435;&#x433;&#x43E; &#x43A;&#x43E;&#x434;&#x430;, &#x442;&#x430;&#x43A; &#x438; &#x440;&#x430;&#x437;&#x433;&#x440;&#x443;&#x437;&#x438;&#x442;&#x44C; &#x438;&#x43D;&#x442;&#x435;&#x440;&#x444;&#x435;&#x439;&#x441; &#x43E;&#x442; &#x44D;&#x442;&#x438;&#x445; &#x436;&#x435; &#x443;&#x442;&#x438;&#x43B;&#x438;&#x442;&#x430;&#x440;&#x43D;&#x44B;&#x445; &#x43C;&#x435;&#x442;&#x43E;&#x434;&#x43E;&#x432;.</p>
<pre><code class="hljs language-kotlin">interface Vector2 {
    <span class="hljs-variable"><span class="hljs-keyword">val</span> x</span>:<span class="hljs-keyword">Float</span> <span class="hljs-comment">// это не поле, а ридонли свойство (property)</span>
    <span class="hljs-variable"><span class="hljs-keyword">val</span> y</span>:<span class="hljs-keyword">Float</span> <span class="hljs-comment">// в Java были бы методы getX() и getY()</span>
}

<span class="hljs-comment">/* Extension property. Без поля в классе, просто getLength() */</span>
<span class="hljs-variable"><span class="hljs-keyword">val</span> Vector2.length</span>:<span class="hljs-keyword">Float</span>
    <span class="hljs-keyword">get</span>() = (x * x + y  * y).sqrt() <span class="hljs-comment">// притворимся, что такая extension-функция для Float уже существует</span>

<span class="hljs-comment">/* переопределяем оператор + */</span>
operator <span class="hljs-function"><span class="hljs-keyword">fun</span> Vector2.<span class="hljs-title">plus</span><span class="hljs-params">(other:<span class="hljs-type">Vector2</span>)</span>:Vector2 = <span class="hljs-title">createVector</span><span class="hljs-params">(x+this.x, y+this.y)</span> <span class="hljs-comment">// какой-то способ создать новый вектор</span></span>

<span class="hljs-comment">/* без тела, после знака = пишем одно выражение */</span>
<span class="hljs-function"><span class="hljs-keyword">fun</span> Vector2.<span class="hljs-title">dot</span><span class="hljs-params">(x: <span class="hljs-type">Float, y: Float</span>)</span>: <span class="hljs-keyword">Float</span> = x * this.x + y * this.y</span>

<span class="hljs-comment">/* Помечая функцию с одним параметром как infix,
 * мы позволяем вызывать её через пробел: v1 dot v2 */</span>
infix <span class="hljs-function"><span class="hljs-keyword">fun</span> Vector2.<span class="hljs-title">dot</span><span class="hljs-params">(vec2: <span class="hljs-type">Vector2</span>)</span>: <span class="hljs-keyword">Float</span> = <span class="hljs-title">dot</span><span class="hljs-params">(vec2.x, vec2.y)</span></span>

<span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">usage</span><span class="hljs-params">(vec1:<span class="hljs-type">Vector2, vec2:Vector2</span>)</span> {</span>
    <span class="hljs-variable"><span class="hljs-keyword">val</span> dotProduct</span> = vec1 dot vec2
    <span class="hljs-variable"><span class="hljs-keyword">val</span> sum</span> = vec1 + vec2 <span class="hljs-comment">// на выходе новый вектор</span>
    <span class="hljs-variable"><span class="hljs-keyword">val</span> length</span> = sum.length <span class="hljs-comment">// обращаемся просто как к свойству</span>

}</code></pre>
<h2>&#x41B;&#x44F;&#x43C;&#x431;&#x434;&#x44B;</h2>
<p>&#x41A;&#x43E;&#x43D;&#x435;&#x447;&#x43D;&#x43E;, &#x43A;&#x430;&#x43A; &#x43B;&#x44E;&#x431;&#x43E;&#x439; &#x441;&#x43E;&#x432;&#x440;&#x435;&#x43C;&#x435;&#x43D;&#x43D;&#x44B;&#x439; &#x44F;&#x437;&#x44B;&#x43A; &#x441; &#x43F;&#x440;&#x435;&#x442;&#x435;&#x43D;&#x437;&#x438;&#x435;&#x439; &#x43D;&#x430; &#x432;&#x43E;&#x437;&#x43C;&#x43E;&#x436;&#x43D;&#x43E;&#x441;&#x442;&#x438; &#x444;&#x443;&#x43D;&#x43A;&#x446;&#x438;&#x43D;&#x430;&#x43B;&#x44C;&#x43D;&#x43E;&#x433;&#x43E; &#x43F;&#x440;&#x43E;&#x433;&#x440;&#x430;&#x43C;&#x43C;&#x438;&#x440;&#x43E;&#x432;&#x430;&#x43D;&#x438;&#x44F;, &#x443; &#x43A;&#x43E;&#x442;&#x43B;&#x438;&#x43D;&#x430; &#x444;&#x443;&#x43D;&#x43A;&#x446;&#x438;&#x44F; &mdash; &#x44D;&#x442;&#x43E; &#x441;&#x443;&#x449;&#x43D;&#x43E;&#x441;&#x442;&#x44C; &#x43F;&#x435;&#x440;&#x432;&#x43E;&#x433;&#x43E; &#x43A;&#x43B;&#x430;&#x441;&#x441;&#x430;, &#x435;&#x441;&#x43B;&#x438; &#x43F;&#x435;&#x440;&#x435;&#x432;&#x43E;&#x434;&#x438;&#x442;&#x44C; &#x434;&#x43E;&#x441;&#x43B;&#x43E;&#x432;&#x43D;&#x43E;. &#x422;.&#x435;. &#x444;&#x443;&#x43D;&#x43A;&#x446;&#x438;&#x438; &#x43C;&#x43E;&#x436;&#x43D;&#x43E; &#x43D;&#x435; &#x442;&#x43E;&#x43B;&#x44C;&#x43A;&#x43E; &#x43E;&#x431;&#x44A;&#x44F;&#x432;&#x43B;&#x44F;&#x442;&#x44C; &#x43F;&#x440;&#x44F;&#x43C;&#x43E; &#x432; &#x43F;&#x430;&#x43A;&#x435;&#x442;&#x435; (&#x438;&#x437; &#x434;&#x436;&#x430;&#x432;&#x44B; &#x43E;&#x43D;&#x438; &#x432;&#x438;&#x434;&#x43D;&#x44B; &#x432;&#x441;&#x451; &#x440;&#x430;&#x432;&#x43D;&#x43E; &#x432; &#x43A;&#x43B;&#x430;&#x441;&#x441;&#x430;&#x445; &mdash; &#x43F;&#x43E; &#x438;&#x43C;&#x435;&#x43D;&#x438; &#x444;&#x430;&#x439;&#x43B;&#x430;), &#x43D;&#x43E; &#x438; &#x43F;&#x435;&#x440;&#x435;&#x434;&#x430;&#x432;&#x430;&#x442;&#x44C; &#x432; &#x43A;&#x430;&#x447;&#x435;&#x441;&#x442;&#x432;&#x435; &#x43F;&#x430;&#x440;&#x430;&#x43C;&#x435;&#x442;&#x440;&#x43E;&#x432;, &#x432;&#x43E;&#x437;&#x432;&#x440;&#x430;&#x449;&#x430;&#x442;&#x44C; &#x438;&#x437; &#x434;&#x440;&#x443;&#x433;&#x438;&#x445; &#x444;&#x443;&#x43D;&#x43A;&#x446;&#x438;&#x439; &#x438; &#x442;&#x434;. &#x418; &#x441;&#x435;&#x439;&#x447;&#x430;&#x441;, &#x43A;&#x43E;&#x43D;&#x435;&#x447;&#x43D;&#x43E;, &#x43D;&#x438;&#x43A;&#x43E;&#x433;&#x43E; &#x44D;&#x442;&#x438;&#x43C; &#x43D;&#x435; &#x443;&#x434;&#x438;&#x432;&#x438;&#x448;&#x44C;, &#x43D;&#x43E; &#x43D;&#x430;&#x43F;&#x440;&#x438;&#x43C;&#x435;&#x440; &#x432; &#x441;&#x440;&#x430;&#x432;&#x43D;&#x435;&#x43D;&#x438;&#x438; &#x441; Java, &#x433;&#x434;&#x435; &#x441;&#x438;&#x43D;&#x442;&#x430;&#x43A;&#x441;&#x438;&#x447;&#x435;&#x441;&#x43A;&#x438; &#x444;&#x443;&#x43D;&#x43A;&#x446;&#x438;&#x439; &#x43A;&#x430;&#x43A; &#x442;&#x430;&#x43A;&#x43E;&#x432;&#x44B;&#x445; &#x43D;&#x435;&#x442; (&#x430; &#x442;&#x43E;&#x43B;&#x44C;&#x43A;&#x43E; &#x444;&#x443;&#x43D;&#x43A;&#x446;&#x438;&#x43E;&#x43D;&#x430;&#x43B;&#x44C;&#x43D;&#x44B;&#x435; &#x438;&#x43D;&#x442;&#x435;&#x440;&#x444;&#x435;&#x439;&#x441;&#x44B;), &#x432; &#x43A;&#x43E;&#x442;&#x43B;&#x438;&#x43D;&#x435; &#x43F;&#x43E;&#x43B;&#x43D;&#x43E;&#x446;&#x435;&#x43D;&#x43D;&#x44B;&#x439; &#x441;&#x438;&#x43D;&#x442;&#x430;&#x43A;&#x441;&#x438;&#x441; &#x434;&#x43B;&#x44F; &#x43E;&#x431;&#x44A;&#x44F;&#x432;&#x43B;&#x435;&#x43D;&#x438;&#x44F; &#x444;&#x443;&#x43D;&#x43A;&#x446;&#x438;&#x438;:</p>
<pre><code class="hljs language-kotlin"><span class="hljs-comment">/* передаем в одну функцию другую -- принимает в параметр Int
 * и Int же возвращает. Возвращаем её же, только с фиксированным
 * значением в качестве параметра */</span>
<span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">passTen</span><span class="hljs-params">(func: <span class="hljs-type">(Int</span>)</span>-&gt;<span class="hljs-keyword">Int</span> ): <span class="hljs-params">()</span>-&gt;<span class="hljs-keyword">Int</span> {</span>
    <span class="hljs-keyword">return</span> { func(<span class="hljs-number">10</span>) }
}</code></pre>
<h2>Extension-&#x43B;&#x44F;&#x43C;&#x431;&#x434;&#x44B;</h2>
<p>&#x41D;&#x430;&#x440;&#x44F;&#x434;&#x443; &#x441; extension-&#x43C;&#x435;&#x442;&#x43E;&#x434;&#x430;&#x43C;&#x438;, &#x44D;&#x442;&#x43E; &#x435;&#x449;&#x435; &#x43E;&#x434;&#x43D;&#x430; &#x43C;&#x43E;&#x44F; &#x43B;&#x44E;&#x431;&#x438;&#x43C;&#x430;&#x44F; &#x444;&#x438;&#x447;&#x430;. &#x41F;&#x43E;&#x437;&#x432;&#x43E;&#x43B;&#x44F;&#x435;&#x442; &#x43E;&#x43F;&#x440;&#x435;&#x434;&#x435;&#x43B;&#x438;&#x442;&#x44C; &#x43B;&#x44F;&#x43C;&#x431;&#x434;&#x443;, &#x43A;&#x43E;&#x442;&#x43E;&#x440;&#x430;&#x44F; &#x431;&#x443;&#x434;&#x435;&#x442; &#x435;&#x449;&#x435; &#x438; extension-&#x43C;&#x435;&#x442;&#x43E;&#x434;&#x43E;&#x43C;. &#x417;&#x432;&#x443;&#x447;&#x438;&#x442; &#x43D;&#x435; &#x43E;&#x447;&#x435;&#x43D;&#x44C;, &#x434;&#x430;. &#x41F;&#x43E;&#x441;&#x43C;&#x43E;&#x442;&#x440;&#x438;&#x43C; &#x43D;&#x430; &#x43F;&#x440;&#x438;&#x43C;&#x435;&#x440;&#x435;:</p>
<pre><code class="hljs language-kotlin"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">World</span></span>(<span class="hljs-variable"><span class="hljs-keyword">val</span> name</span>:String = <span class="hljs-string">"world"</span>)

<span class="hljs-variable"><span class="hljs-keyword">val</span> printName</span>:World.()-&gt;<span class="hljs-keyword">Unit</span> = {
     <span class="hljs-comment">// интерполяцией в синтаксисе языка сейчас уже</span>
     <span class="hljs-comment">// никого не привлечь на темную сторону</span>
    println(<span class="hljs-string">"Hello $name"</span>)
}

<span class="hljs-variable"><span class="hljs-keyword">val</span> world</span> = World()

 <span class="hljs-comment">// вызываем нашу функцию как будто это метод нашего класса!</span>
world.printName()</code></pre>
<p>&#x42D;&#x442;&#x430; &#x432;&#x43E;&#x437;&#x43C;&#x43E;&#x436;&#x43D;&#x43E;&#x441;&#x442;&#x44C; &#x43E;&#x441;&#x43E;&#x431;&#x435;&#x43D;&#x43D;&#x43E; &#x438;&#x43D;&#x442;&#x435;&#x440;&#x435;&#x441;&#x43D;&#x43E; &#x441;&#x43C;&#x43E;&#x442;&#x440;&#x438;&#x442;&#x441;&#x44F; &#x432; <a href="https://kotlinlang.org/docs/reference/type-safe-builders.html">&#x431;&#x438;&#x43B;&#x434;&#x435;&#x440;&#x430;&#x445;</a>, &#x43F;&#x43E;&#x441;&#x43C;&#x43E;&#x442;&#x440;&#x435;&#x442;&#x44C; &#x43D;&#x430; &#x43A;&#x43E;&#x442;&#x43E;&#x440;&#x44B;&#x435; &#x44F; &#x43F;&#x440;&#x435;&#x434;&#x43B;&#x430;&#x433;&#x430;&#x44E; &#x432;&#x430;&#x43C; &#x441;&#x430;&#x43C;&#x43E;&#x441;&#x442;&#x43E;&#x44F;&#x442;&#x435;&#x43B;&#x44C;&#x43D;&#x43E; &mdash; &#x43D;&#x430; &#x441;&#x43B;&#x443;&#x447;&#x430;&#x439;, &#x435;&#x441;&#x43B;&#x438; &#x432;&#x430;&#x43C; &#x438;&#x43D;&#x442;&#x435;&#x440;&#x435;&#x441;&#x43D;&#x43E;, &#x43A;&#x430;&#x43A; &#x43F;&#x43E;&#x43B;&#x443;&#x447;&#x430;&#x44E;&#x442;&#x441;&#x44F; &#x432;&#x43E;&#x442; &#x442;&#x430;&#x43A;&#x438;&#x435; &#x43A;&#x43E;&#x43D;&#x441;&#x442;&#x440;&#x443;&#x43A;&#x446;&#x438;&#x438;:</p>
<pre><code class="hljs language-kotlin">html {
    head {
      title {+<span class="hljs-string">"XML encoding with Kotlin"</span>}
    }
    body {
      h1 {+<span class="hljs-string">"XML encoding with Kotlin"</span>}
      a(href = <span class="hljs-string">"http://kotlinlang.org"</span>) {+<span class="hljs-string">"Kotlin"</span>}
    }
}</code></pre>
<h2>Inline-&#x444;&#x443;&#x43A;&#x43D;&#x446;&#x438;&#x438;</h2>
<p>&#x41F;&#x43E;&#x43C;&#x435;&#x447;&#x430;&#x44F; &#x444;&#x443;&#x43D;&#x43A;&#x446;&#x438;&#x44E; &#x43A;&#x430;&#x43A; inline &#x43C;&#x44B; &#x43F;&#x440;&#x43E;&#x441;&#x438;&#x43C; &#x43A;&#x43E;&#x43C;&#x43F;&#x438;&#x43B;&#x44F;&#x442;&#x43E;&#x440; &#x43F;&#x43E;&#x43C;&#x435;&#x441;&#x442;&#x438;&#x442;&#x44C; &#x435;&#x451; &#x43F;&#x43E; &#x43C;&#x435;&#x441;&#x442;&#x443; &#x438;&#x441;&#x43F;&#x43E;&#x43B;&#x44C;&#x437;&#x43E;&#x432;&#x430;&#x43D;&#x438;&#x44F;. &#x427;&#x430;&#x449;&#x435; &#x432;&#x441;&#x435;&#x433;&#x43E; &#x442;&#x430;&#x43A;&#x438;&#x43C;&#x438; &#x432;&#x435;&#x449;&#x430;&#x43C;&#x438; &#x437;&#x430;&#x43D;&#x438;&#x43C;&#x430;&#x435;&#x442;&#x441;&#x44F; &#x440;&#x430;&#x43D;&#x442;&#x430;&#x439;&#x43C;, &#x43D;&#x43E; &#x435;&#x441;&#x442;&#x44C; &#x43A;&#x435;&#x439;&#x437;&#x44B;, &#x43A;&#x43E;&#x433;&#x434;&#x430; &#x43C;&#x44B; &#x442;&#x43E;&#x447;&#x43D;&#x43E; &#x437;&#x43D;&#x430;&#x435;&#x43C;, &#x447;&#x442;&#x43E; &#x444;&#x443;&#x43A;&#x43D;&#x446;&#x438;&#x44F; &#x44D;&#x442;&#x43E; &#x43F;&#x440;&#x43E;&#x441;&#x442;&#x43E; &#x448;&#x43E;&#x440;&#x442;&#x43A;&#x430;&#x442; &#x434;&#x43B;&#x44F; &#x43A;&#x430;&#x43A;&#x43E;&#x433;&#x43E;-&#x442;&#x43E; &#x434;&#x435;&#x439;&#x441;&#x442;&#x432;&#x438;&#x44F; &mdash; &#x43E;&#x441;&#x43E;&#x431;&#x435;&#x43D;&#x43D;&#x43E; &#x44D;&#x444;&#x444;&#x435;&#x43A;&#x442;&#x438;&#x432;&#x43D;&#x43E; &#x44D;&#x442;&#x43E; &#x440;&#x430;&#x431;&#x43E;&#x442;&#x430;&#x435;&#x442; &#x441; &#x43F;&#x435;&#x440;&#x435;&#x434;&#x430;&#x432;&#x430;&#x435;&#x43C;&#x44B;&#x43C;&#x438; &#x43B;&#x44F;&#x43C;&#x431;&#x434;&#x430;&#x43C;&#x438;:</p>
<pre><code class="hljs language-kotlin"><span class="hljs-comment">/* передаваемой лямбдой block сейчас уже никого не удивишь.
 * Главно, что лишних затрат на вызов этой функции не будет вообще,
 * иногда мне кажется, что это что-то вроде макросов */</span>
<span class="hljs-keyword">inline</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">lock</span><span class="hljs-params">(lock:<span class="hljs-type">Lock, block:(</span>)</span>-&gt;<span class="hljs-keyword">Unit</span>) {</span>
    lock.lock()
    <span class="hljs-keyword">try</span> {
        block()
    } <span class="hljs-keyword">finally</span> {
        lock.unlock()
    }
}

<span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">usage</span><span class="hljs-params">()</span> {</span>
    lock(Lock()) {
        <span class="hljs-comment">// делаем что-то внутри блокировки</span>
    }
}</code></pre>
<p>&#x41A;&#x43E;&#x43D;&#x435;&#x447;&#x43D;&#x43E;, &#x43D;&#x430; &#x442;&#x430;&#x43A;&#x438;&#x435; &#x444;&#x443;&#x43D;&#x43A;&#x446;&#x438;&#x438; &#x43D;&#x430;&#x43A;&#x43B;&#x430;&#x434;&#x44B;&#x432;&#x430;&#x435;&#x442;&#x441;&#x44F; &#x441;&#x435;&#x440;&#x438;&#x44F; &#x43E;&#x433;&#x440;&#x430;&#x43D;&#x438;&#x447;&#x435;&#x43D;&#x438;&#x439;, &#x43F;&#x43E;&#x434;&#x440;&#x43E;&#x431;&#x43D;&#x435;&#x435; &#x441;&#x43C;. <a href="https://kotlinlang.org/docs/reference/inline-functions.html">&#x434;&#x43E;&#x43A;&#x443;&#x43C;&#x435;&#x43D;&#x442;&#x430;&#x446;&#x438;&#x44E;</a>.</p>
<h2>&#x414;&#x435;&#x43B;&#x435;&#x433;&#x438;&#x440;&#x43E;&#x432;&#x430;&#x43D;&#x438;&#x435;</h2>
<p>&#x412; &#x43A;&#x43E;&#x442;&#x43B;&#x438;&#x43D;&#x435; &#x435;&#x441;&#x442;&#x44C; &#x434;&#x432;&#x430; &#x442;&#x438;&#x43F;&#x430; &#x434;&#x435;&#x43B;&#x435;&#x433;&#x438;&#x440;&#x43E;&#x432;&#x430;&#x43D;&#x438;&#x44F;. <a href="https://kotlinlang.org/docs/reference/delegation.html">&#x41F;&#x435;&#x440;&#x432;&#x44B;&#x439;</a>, &#x43A;&#x43E;&#x442;&#x43E;&#x440;&#x44B;&#x439; &#x43F;&#x43E;&#x437;&#x432;&#x43E;&#x43B;&#x44F;&#x435;&#x442; &#x434;&#x435;&#x43B;&#x435;&#x433;&#x438;&#x440;&#x43E;&#x432;&#x430;&#x442;&#x44C; &#x432;&#x441;&#x435; &#x43C;&#x435;&#x442;&#x43E;&#x434;&#x44B; &#x440;&#x435;&#x430;&#x43B;&#x438;&#x437;&#x443;&#x435;&#x43C;&#x43E;&#x433;&#x43E; &#x438;&#x43D;&#x442;&#x435;&#x440;&#x444;&#x435;&#x439;&#x441;&#x430; &#x43A; &#x43A;&#x430;&#x43A;&#x43E;&#x43C;&#x443;-&#x442;&#x43E; &#x438;&#x43D;&#x441;&#x442;&#x430;&#x43D;&#x441;&#x443; &#x44D;&#x442;&#x43E;&#x433;&#x43E; &#x442;&#x438;&#x43F;&#x430;:</p>
<pre><code class="hljs language-kotlin">interface Connection {
    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">connect</span><span class="hljs-params">()</span></span>
}

<span class="hljs-comment">/* здесь мы видим стандартный для котлина синтаксис определения
 * класса вместе с параметрами конструктора и свойствами --
 * в данном случае connection будет и в конструкторе и в поле.
 * Есть возможность определить и множественный конструктор
 * см https://kotlinlang.org/docs/reference/classes.html#constructors
 * И, наконец, мы видим что класс реализует интерфейс Connection, все методы
 * которого делегируются к переданному в конструктор экземпляру Connection-а.
 * При желании их конечно можно переопределить в теле класса */</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConnectionWrapper</span></span>(<span class="hljs-variable"><span class="hljs-keyword">val</span> connection</span>:Connection) : Connection by connection</code></pre>
<p>&#x423; &#x44D;&#x442;&#x43E;&#x433;&#x43E; &#x441;&#x438;&#x43D;&#x442;&#x430;&#x43A;&#x441;&#x438;&#x441;&#x430; &#x435;&#x441;&#x442;&#x44C; &#x440;&#x44F;&#x434; &#x43E;&#x433;&#x440;&#x430;&#x43D;&#x438;&#x447;&#x435;&#x43D;&#x438;&#x439;. &#x41D;&#x430;&#x43F;&#x440;&#x438;&#x43C;&#x435;&#x440;, &#x438;&#x43D;&#x441;&#x442;&#x430;&#x43D;&#x441; &#x434;&#x43B;&#x44F; &#x434;&#x435;&#x43B;&#x435;&#x433;&#x438;&#x440;&#x43E;&#x432;&#x430;&#x43D;&#x438;&#x44F; &#x434;&#x43E;&#x43B;&#x436;&#x435;&#x43D; &#x431;&#x44B;&#x442;&#x44C; &#x438;&#x437;&#x432;&#x435;&#x441;&#x442;&#x435;&#x43D; &#x434;&#x43E; &#x432;&#x44B;&#x437;&#x43E;&#x432;&#x430; &#x43A;&#x43E;&#x43D;&#x441;&#x442;&#x440;&#x443;&#x43A;&#x442;&#x43E;&#x440;&#x430;.</p>
<p>&#x412;&#x442;&#x43E;&#x440;&#x43E;&#x439; &#x442;&#x438;&#x43F; &#x434;&#x435;&#x43B;&#x435;&#x433;&#x438;&#x440;&#x43E;&#x432;&#x430;&#x43D;&#x438;&#x44F; &mdash; &#x44D;&#x442;&#x43E; <a href="https://kotlinlang.org/docs/reference/delegated-properties.html">delegated properties</a>. &#x41F;&#x43E;&#x437;&#x432;&#x43E;&#x43B;&#x44F;&#x435;&#x442; &#x43E;&#x43F;&#x440;&#x435;&#x434;&#x435;&#x43B;&#x438;&#x442;&#x44C; &#x43E;&#x431;&#x44A;&#x435;&#x43A;&#x442; &#x441; &#x43C;&#x435;&#x442;&#x43E;&#x434;&#x430;&#x43C;&#x438; get (&#x438; set &#x434;&#x43B;&#x44F; var), &#x43A; &#x43A;&#x43E;&#x442;&#x43E;&#x440;&#x44B;&#x43C; &#x431;&#x443;&#x434;&#x435;&#x442; &#x43E;&#x441;&#x443;&#x449;&#x435;&#x441;&#x442;&#x432;&#x43B;&#x44F;&#x442;&#x44C;&#x441;&#x44F; &#x434;&#x435;&#x43B;&#x435;&#x433;&#x438;&#x440;&#x43E;&#x432;&#x430;&#x43D;&#x438;&#x435; &#x434;&#x43E;&#x441;&#x442;&#x443;&#x43F;&#x430; &#x43F;&#x440;&#x438; &#x43E;&#x431;&#x440;&#x430;&#x449;&#x435;&#x43D;&#x438;&#x438; &#x43A; &#x441;&#x432;&#x43E;&#x439;&#x441;&#x442;&#x432;&#x443; &#x43E;&#x431;&#x44A;&#x435;&#x43A;&#x442;&#x430;.</p>
<pre><code class="hljs language-kotlin"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span> </span>{
    <span class="hljs-comment">/* это делегат из стандартной библиотеки,
       позволяет отложить инициализацию поля
       до первого обращения к нему */</span>
    <span class="hljs-keyword">private</span> <span class="hljs-variable"><span class="hljs-keyword">val</span> someProeprty by lazy { HavyType() }
}</span></code></pre>
<h2>Generics</h2>
<p>&#x421;&#x43E;&#x437;&#x434;&#x430;&#x442;&#x435;&#x43B;&#x438; &#x43A;&#x43E;&#x442;&#x43B;&#x438;&#x43D;&#x430; &#x43D;&#x435;&#x441;&#x43A;&#x43E;&#x43B;&#x44C;&#x43A;&#x43E; <a href="https://kotlinlang.org/docs/reference/generics.html">&#x443;&#x43B;&#x443;&#x447;&#x448;&#x438;&#x43B;&#x438;</a> Java-&#x434;&#x436;&#x435;&#x43D;&#x435;&#x440;&#x438;&#x43A;&#x438;. &#x418;&#x437;-&#x437;&#x430; &#x441;&#x43E;&#x432;&#x43C;&#x435;&#x441;&#x442;&#x438;&#x43C;&#x43E;&#x441;&#x442;&#x438; &#x441; &#x434;&#x436;&#x430;&#x432;&#x43E;&#x439; &#x43D;&#x435; &#x432;&#x441;&#x451; &#x43F;&#x43E;&#x43B;&#x443;&#x447;&#x438;&#x43B;&#x43E;&#x441;&#x44C; &#x43A;&#x430;&#x43A; &#x445;&#x43E;&#x442;&#x435;&#x43B;&#x43E;&#x441;&#x44C; &#x431;&#x44B;, &#x43D;&#x43E; &#x438;&#x43C; &#x443;&#x434;&#x430;&#x43B;&#x43E;&#x441;&#x44C; &#x438;&#x441;&#x43F;&#x440;&#x430;&#x432;&#x438;&#x442;&#x44C; &#x43C;&#x43D;&#x43E;&#x433;&#x43E; &#x43D;&#x435;&#x43F;&#x440;&#x438;&#x44F;&#x442;&#x43D;&#x44B;&#x445; &#x43C;&#x43E;&#x43C;&#x435;&#x43D;&#x442;&#x43E;&#x432;, &#x43A;&#x43E;&#x442;&#x43E;&#x440;&#x44B;&#x435; &#x43D;&#x435; &#x443;&#x447;&#x43B;&#x438; &#x438;&#x445; &#x43F;&#x440;&#x435;&#x434;&#x448;&#x435;&#x441;&#x442;&#x432;&#x435;&#x43D;&#x43D;&#x438;&#x43A;&#x438; &#x43F;&#x440;&#x438; &#x440;&#x430;&#x431;&#x43E;&#x442;&#x435; &#x43D;&#x430;&#x434; Java 5.</p>
<h2>&#x414;&#x435;&#x441;&#x442;&#x440;&#x443;&#x43A;&#x442;&#x443;&#x440;&#x438;&#x437;&#x430;&#x446;&#x438;&#x44F;</h2>
<pre><code class="hljs language-kotlin"><span class="hljs-variable"><span class="hljs-keyword">val</span> (first, second)</span> = someFunc()</code></pre>
<p>&#x427;&#x442;&#x43E;&#x431;&#x44B; &#x442;&#x430;&#x43A;&#x43E;&#x439; &#x43A;&#x43E;&#x434; &#x437;&#x430;&#x440;&#x430;&#x431;&#x43E;&#x442;&#x430;&#x43B;, &#x432;&#x43E;&#x437;&#x432;&#x440;&#x430;&#x449;&#x430;&#x435;&#x43C;&#x43E;&#x435; &#x437;&#x43D;&#x430;&#x447;&#x435;&#x43D;&#x438;&#x435; &#x438;&#x437; someFunc() &#x434;&#x43E;&#x43B;&#x436;&#x43D;&#x43E; &#x431;&#x44B;&#x442;&#x44C; &#x442;&#x438;&#x43F;&#x430;, &#x443; &#x43A;&#x43E;&#x442;&#x43E;&#x440;&#x43E;&#x433;&#x43E; &#x435;&#x441;&#x442;&#x44C; (&#x43C;&#x43E;&#x436;&#x43D;&#x43E; extension) &#x43C;&#x435;&#x442;&#x43E;&#x434;&#x44B; component1(), component2():</p>
<pre><code class="hljs language-kotlin"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">component1</span><span class="hljs-params">()</span>:String = "test"</span>
    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">component2</span><span class="hljs-params">()</span>:<span class="hljs-keyword">Int</span> = 10</span>
}
<span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">someFunc</span><span class="hljs-params">()</span>:Foo = <span class="hljs-title">Foo</span><span class="hljs-params">()</span></span>

<span class="hljs-comment">// или так, to -- в это такой infix extension-метод определенный</span>
<span class="hljs-comment">// для Any, который создает экземпляр класса Pair, метод hashMapOf</span>
<span class="hljs-comment">// в свою очередь принимает vararg параметр таких пар</span>
<span class="hljs-variable"><span class="hljs-keyword">val</span> map</span> = hashMapOf(<span class="hljs-number">1</span> to <span class="hljs-string">"test"</span>)
<span class="hljs-keyword">for</span> ((id, name) <span class="hljs-keyword">in</span> map) {
    <span class="hljs-comment">//  такой синтаксис возможен, потому что для Map-а определен метод iterator()</span>
    <span class="hljs-comment">// возвращающий набор Map.Entry, а для него в свою очередь определены два</span>
    <span class="hljs-comment">// extension-метода component1() и component2()</span>
}</code></pre>
<h2>Data-&#x43A;&#x43B;&#x430;&#x441;&#x441;&#x44B;</h2>
<p>&#x421;&#x430;&#x445;&#x430;&#x440; &#x43A;&#x43E;&#x43C;&#x43F;&#x438;&#x43B;&#x44F;&#x442;&#x43E;&#x440;&#x430; &#x434;&#x43B;&#x44F; &#x441;&#x43E;&#x437;&#x434;&#x430;&#x43D;&#x438;&#x44F; &#x431;&#x438;&#x43D;&#x43E;&#x432;:</p>
<pre><code class="hljs language-kotlin">data <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bean</span></span>(<span class="hljs-variable"><span class="hljs-keyword">val</span> a</span>:String, <span class="hljs-variable"><span class="hljs-keyword">val</span> b</span>:<span class="hljs-keyword">Int</span>)</code></pre>
<p>&#x421;&#x43E;&#x437;&#x434;&#x430;&#x435;&#x442; &#x431;&#x438;&#x43D; &#x441; &#x43F;&#x43E;&#x43B;&#x44F;&#x43C;&#x438; + &#x430;&#x432;&#x442;&#x43E;&#x433;&#x435;&#x43D;&#x435;&#x440;&#x438;&#x440;&#x443;&#x435;&#x442; equals+hashCode+toString()+componentN &#x438;&#x437; &#x440;&#x430;&#x437;&#x434;&#x435;&#x43B;&#x430; &#x432;&#x44B;&#x448;&#x435;, &#x447;&#x442;&#x43E; &#x43F;&#x43E;&#x437;&#x432;&#x43E;&#x43B;&#x44F;&#x435;&#x442; &#x43F;&#x438;&#x441;&#x430;&#x442;&#x44C; &#x442;&#x430;&#x43A;&#x43E;&#x439; &#x43A;&#x43E;&#x434;:</p>
<pre><code class="hljs language-kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">someFunc</span><span class="hljs-params">()</span>:Bean = <span class="hljs-title">Bean</span><span class="hljs-params">("test", 10)</span></span>
<span class="hljs-variable"><span class="hljs-keyword">val</span> (a, b)</span> = someFunc()</code></pre>
<p>&#x41F;&#x43E;&#x43B;&#x435;&#x437;&#x43D;&#x430;&#x44F; &#x432;&#x435;&#x449;&#x44C;, &#x43D;&#x43E; &#x43E; &#x43D;&#x44E;&#x430;&#x43D;&#x441;&#x430;&#x445; &#x441;&#x43C;. &#x43F;&#x443;&#x43D;&#x43A;&#x442; &laquo;&#x41E; &#x433;&#x440;&#x443;&#x441;&#x442;&#x43D;&#x43E;&#x43C;&raquo;.</p>
<h2>&#x421;&#x442;&#x430;&#x43D;&#x434;&#x430;&#x440;&#x442;&#x43D;&#x430;&#x44F; &#x431;&#x438;&#x431;&#x43B;&#x438;&#x43E;&#x442;&#x435;&#x43A;&#x430;</h2>
<p>&#x41A;&#x43E;&#x43D;&#x435;&#x447;&#x43D;&#x43E;, &#x43D;&#x435;&#x43B;&#x44C;&#x437;&#x44F; &#x43D;&#x435; &#x443;&#x43F;&#x43E;&#x43C;&#x44F;&#x43D;&#x443;&#x442;&#x44C; &#x438; <a href="https://kotlinlang.org/api/latest/jvm/stdlib/index.html">&#x441;&#x442;&#x430;&#x43D;&#x434;&#x430;&#x440;&#x442;&#x43D;&#x443;&#x44E; &#x431;&#x438;&#x431;&#x43B;&#x438;&#x43E;&#x442;&#x435;&#x43A;&#x443;</a>. &#x422;&#x430;&#x43A; &#x43A;&#x430;&#x43A; &#x43A;&#x43E;&#x442;&#x43B;&#x438;&#x43D; &#x43D;&#x430;&#x446;&#x435;&#x43B;&#x435;&#x43D; &#x432; &#x43F;&#x435;&#x440;&#x432;&#x443;&#x44E; &#x43E;&#x447;&#x435;&#x440;&#x435;&#x434;&#x44C; &#x43D;&#x430; &#x440;&#x430;&#x431;&#x43E;&#x442;&#x443; &#x432;&#x43C;&#x435;&#x441;&#x442;&#x435; &#x441; Java, &#x442;&#x43E; &#x438; &#x446;&#x435;&#x43B;&#x438;&#x43A;&#x43E;&#x43C; &#x441;&#x432;&#x43E;&#x435;&#x439; &#x441;&#x442;&#x430;&#x43D;&#x434;&#x430;&#x440;&#x442;&#x43D;&#x43E;&#x439; &#x431;&#x438;&#x431;&#x43B;&#x438;&#x43E;&#x442;&#x435;&#x43A;&#x438; &#x443; &#x43D;&#x435;&#x433;&#x43E; &#x43D;&#x435;&#x442;. &#x411;&#x43E;&#x43B;&#x44C;&#x448;&#x430;&#x44F; &#x447;&#x430;&#x441;&#x442;&#x44C; &#x441;&#x442;&#x430;&#x43D;&#x434;&#x430;&#x440;&#x442;&#x43D;&#x43E;&#x439; &#x431;&#x438;&#x431;&#x43B;&#x438;&#x43E;&#x442;&#x435;&#x43A;&#x438; Kotlin &#x43D;&#x430;&#x446;&#x435;&#x43B;&#x435;&#x43D;&#x430; &#x43D;&#x430; &#x443;&#x43B;&#x443;&#x447;&#x448;&#x435;&#x43D;&#x438;&#x435; &#x438; &#x438;&#x441;&#x43F;&#x440;&#x430;&#x432;&#x43B;&#x435;&#x43D;&#x438;&#x435; &#x431;&#x438;&#x431;&#x43B;&#x438;&#x43E;&#x442;&#x435;&#x43A;&#x438; &#x441;&#x442;&#x430;&#x440;&#x448;&#x435;&#x433;&#x43E; &#x431;&#x440;&#x430;&#x442;&#x430; &mdash; Java. &#x41E;&#x434;&#x43D;&#x430;&#x43A;&#x43E;, &#x44D;&#x442;&#x43E; &#x442;&#x435;&#x43C;&#x430; &#x434;&#x43B;&#x44F; &#x434;&#x440;&#x443;&#x433;&#x43E;&#x439; &#x431;&#x43E;&#x43B;&#x44C;&#x448;&#x43E;&#x439; &#x441;&#x442;&#x430;&#x442;&#x44C;&#x438;.</p>
<h2>&#x41E; &#x433;&#x440;&#x443;&#x441;&#x442;&#x43D;&#x43E;&#x43C;</h2>
<p>&#x412;&#x44B; &#x43C;&#x43E;&#x433;&#x43B;&#x438; &#x43F;&#x43E;&#x434;&#x443;&#x43C;&#x430;&#x442;&#x44C;, &#x447;&#x442;&#x43E; &#x44D;&#x442;&#x43E; &#x438;&#x434;&#x435;&#x430;&#x43B;&#x44C;&#x43D;&#x44B;&#x439; &#x43F;&#x440;&#x43E;&#x434;&#x443;&#x43A;&#x442;, &#x43D;&#x43E; &#x43D;&#x435;&#x442;, &#x435;&#x441;&#x442;&#x44C; &#x438; &#x43D;&#x435;&#x43F;&#x440;&#x438;&#x44F;&#x442;&#x43D;&#x44B;&#x435; &#x43C;&#x43E;&#x43C;&#x435;&#x43D;&#x442;&#x44B;:</p>
<h2>IDE</h2>
<p>&#x41D;&#x430;&#x434; &#x43F;&#x43B;&#x430;&#x433;&#x438;&#x43D;&#x43E;&#x43C; &#x435;&#x449;&#x435; &#x440;&#x430;&#x431;&#x43E;&#x442;&#x430;&#x442;&#x44C; &#x438; &#x440;&#x430;&#x431;&#x43E;&#x442;&#x430;&#x442;&#x44C;, &#x43F;&#x435;&#x440;&#x438;&#x43E;&#x434;&#x438;&#x447;&#x435;&#x441;&#x43A;&#x438; &#x432;&#x44B;&#x434;&#x430;&#x435;&#x442; &#x44D;&#x43A;&#x441;&#x435;&#x43F;&#x448;&#x435;&#x43D;&#x44B;, &#x43F;&#x43B;&#x43E;&#x445;&#x43E; &#x443;&#x43C;&#x435;&#x435;&#x442; &#x432; toString() &#x432; &#x434;&#x435;&#x431;&#x430;&#x433;&#x435;, &#x430; &#x442;&#x430;&#x43A; &#x436;&#x435; &#x43B;&#x44E;&#x431;&#x438;&#x442; &#x43F;&#x440;&#x43E;&#x43C;&#x430;&#x445;&#x438;&#x432;&#x430;&#x442;&#x44C;&#x441;&#x44F; &#x43F;&#x43E; &#x441;&#x441;&#x44B;&#x43B;&#x43A;&#x435; &#x43D;&#x430; &#x438;&#x441;&#x445;&#x43E;&#x434;&#x43D;&#x438;&#x43A;, &#x438;&#x43D;&#x43E;&#x433;&#x434;&#x430; (&#x432;&#x438;&#x434;&#x438;&#x43C;&#x43E; &#x438;&#x437; &#x437;&#x430; &#x43E;&#x441;&#x43E;&#x431;&#x435;&#x43D;&#x43D;&#x43E;&#x441;&#x442;&#x435;&#x439; &#x438;&#x43D;&#x43B;&#x430;&#x439;&#x43D;&#x430;) &#x43F;&#x443;&#x442;&#x430;&#x435;&#x442; &#x433;&#x434;&#x435; &#x43F;&#x43E;&#x441;&#x442;&#x430;&#x432;&#x43B;&#x435;&#x43D; &#x431;&#x440;&#x44D;&#x43A;&#x43F;&#x43E;&#x438;&#x43D;&#x442; &#x438; &#x442;&#x43E;&#x43C;&#x443; &#x43F;&#x43E;&#x434;&#x43E;&#x431;&#x43D;&#x44B;&#x435; &#x43F;&#x440;&#x43E;&#x431;&#x43B;&#x435;&#x43C;&#x44B;. &#x42D;&#x442;&#x43E; &#x432;&#x441;&#x451; &#x43A;&#x43E;&#x43D;&#x435;&#x447;&#x43D;&#x43E; &#x441;&#x43E; &#x432;&#x440;&#x435;&#x43C;&#x435;&#x43D;&#x435;&#x43C; &#x43D;&#x430;&#x432;&#x435;&#x440;&#x43D;&#x44F;&#x43A;&#x430; &#x43F;&#x43E;&#x43F;&#x440;&#x430;&#x432;&#x44F;&#x442;, &#x43D;&#x43E; &#x441;&#x435;&#x439;&#x447;&#x430;&#x441; &#x43C;&#x44B; &#x438;&#x43C;&#x435;&#x435;&#x43C; &#x438;&#x43C;&#x435;&#x43D;&#x43D;&#x43E; &#x44D;&#x442;&#x43E;.</p>
<h2>Data-&#x43A;&#x43B;&#x430;&#x441;&#x441;&#x44B;</h2>
<p>&#x41D;&#x430;&#x434;&#x43E; &#x43F;&#x440;&#x438;&#x437;&#x43D;&#x430;&#x442;&#x44C;, &#x447;&#x442;&#x43E; &#x438;&#x434;&#x435;&#x44F; &#x431;&#x44B;&#x43B;&#x430; &#x445;&#x43E;&#x440;&#x43E;&#x448;&#x430;&#x44F;, &#x43D;&#x43E; &#x432; &#x434;&#x430;&#x43D;&#x43D;&#x44B;&#x439; &#x43C;&#x43E;&#x43C;&#x435;&#x43D;&#x442; &#x435;&#x441;&#x442;&#x44C; &#x43C;&#x430;&#x441;&#x441;&#x430; <a href="https://kotlinlang.org/docs/reference/data-classes.html">&#x43E;&#x433;&#x440;&#x430;&#x43D;&#x438;&#x447;&#x435;&#x43D;&#x438;&#x439;</a>, &#x43D;&#x430;&#x43B;&#x43E;&#x436;&#x435;&#x43D;&#x43D;&#x44B;&#x445; &#x43D;&#x430; &#x44D;&#x442;&#x43E;&#x442; &#x442;&#x438;&#x43F; &#x43A;&#x43B;&#x430;&#x441;&#x441;&#x43E;&#x432;, &#x447;&#x442;&#x43E; &#x43F;&#x43E;&#x437;&#x432;&#x43E;&#x43B;&#x44F;&#x435;&#x442; &#x438;&#x445; &#x438;&#x441;&#x43F;&#x43E;&#x43B;&#x44C;&#x437;&#x43E;&#x432;&#x430;&#x442;&#x44C; &#x432; &#x441;&#x438;&#x43B;&#x44C;&#x43D;&#x43E; &#x431;&#x43E;&#x43B;&#x435;&#x435; &#x43E;&#x433;&#x440;&#x430;&#x43D;&#x438;&#x447;&#x435;&#x43D;&#x43D;&#x43E;&#x43C; &#x447;&#x438;&#x441;&#x43B;&#x435; &#x43A;&#x435;&#x439;&#x437;&#x43E;&#x432;, &#x43D;&#x435;&#x436;&#x435;&#x43B;&#x438; &#x445;&#x43E;&#x442;&#x435;&#x43B;&#x43E;&#x441;&#x44C; &#x431;&#x44B;. &#x421;&#x43E;&#x437;&#x434;&#x430;&#x442;&#x435;&#x43B;&#x438; &#x44F;&#x437;&#x44B;&#x43A;&#x430; &#x43E;&#x431;&#x435;&#x449;&#x430;&#x44E;&#x442; &#x43F;&#x43E;&#x440;&#x430;&#x431;&#x43E;&#x442;&#x430;&#x442;&#x44C; &#x43D;&#x430;&#x434; &#x440;&#x435;&#x448;&#x435;&#x43D;&#x438;&#x435;&#x43C; &#x44D;&#x442;&#x43E;&#x439; &#x43F;&#x440;&#x43E;&#x431;&#x43B;&#x435;&#x43C;&#x44B;, &#x43D;&#x43E; &#x43F;&#x43E;&#x43A;&#x430; &#x442;&#x430;&#x43A;.</p>
<h2>&#x41D;&#x435;&#x43A;&#x43E;&#x442;&#x43E;&#x440;&#x430;&#x44F; &#x43D;&#x435;&#x440;&#x44F;&#x448;&#x43B;&#x438;&#x432;&#x43E;&#x441;&#x442;&#x44C;</h2>
<p>&#x41A;&#x43E;&#x43D;&#x435;&#x447;&#x43D;&#x43E;, &#x43D;&#x435;&#x440;&#x44F;&#x448;&#x43B;&#x438;&#x432;&#x43E;&#x441;&#x442;&#x44C; &#x432; &#x43F;&#x435;&#x440;&#x432;&#x443;&#x44E; &#x43E;&#x447;&#x435;&#x440;&#x435;&#x434;&#x44C; &#x432; &#x433;&#x43E;&#x43B;&#x43E;&#x432;&#x430;&#x445;, &#x43D;&#x43E; &#x43A;&#x440;&#x430;&#x442;&#x43A;&#x43E;&#x441;&#x442;&#x44C; &#x441;&#x438;&#x43D;&#x442;&#x430;&#x43A;&#x441;&#x438;&#x441;&#x430; &#x438;&#x43D;&#x43E;&#x433;&#x434;&#x430; &#x438;&#x433;&#x440;&#x430;&#x435;&#x442; &#x437;&#x43B;&#x443;&#x44E; &#x448;&#x443;&#x442;&#x43A;&#x443;, &#x438; &#x43C;&#x435;&#x441;&#x442;&#x430;&#x43C;&#x438; &#x43A;&#x43E;&#x434; &#x432;&#x44B;&#x433;&#x43B;&#x44F;&#x434;&#x438;&#x442; &#x43D;&#x435;&#x432;&#x430;&#x436;&#x43D;&#x43E;. &#x412;&#x43E;&#x437;&#x43C;&#x43E;&#x436;&#x43D;&#x43E;, &#x43D;&#x430;&#x43B;&#x438;&#x447;&#x438;&#x435; &#x441;&#x442;&#x430;&#x439;&#x43B;-&#x433;&#x430;&#x439;&#x434;&#x430; &#x43D;&#x435;&#x441;&#x43A;&#x43E;&#x43B;&#x44C;&#x43A;&#x43E; &#x44D;&#x442;&#x443; &#x43F;&#x440;&#x43E;&#x431;&#x43B;&#x435;&#x43C;&#x443; &#x438;&#x441;&#x43F;&#x440;&#x430;&#x432;&#x438;&#x43B;&#x43E; &#x431;&#x44B;, &#x43D;&#x43E; &#x43F;&#x43E;&#x43A;&#x430; &#x438;&#x43D;&#x43E;&#x433;&#x434;&#x430; &#x43F;&#x440;&#x438;&#x445;&#x43E;&#x434;&#x438;&#x442;&#x441;&#x44F; &#x43F;&#x43E;&#x441;&#x442;&#x430;&#x440;&#x430;&#x442;&#x44C;&#x441;&#x44F;, &#x447;&#x442;&#x43E;&#x431;&#x44B; &#x43D;&#x435; &#x442;&#x43E;&#x43B;&#x44C;&#x43A;&#x43E; &#x445;&#x43E;&#x440;&#x43E;&#x448;&#x43E; &#x440;&#x430;&#x431;&#x43E;&#x442;&#x430;&#x43B;&#x43E;, &#x43D;&#x43E; &#x438; &#x43A;&#x440;&#x430;&#x441;&#x438;&#x432;&#x43E; &#x432;&#x44B;&#x433;&#x43B;&#x44F;&#x434;&#x435;&#x43B;&#x43E;. &#x41E;&#x441;&#x43E;&#x431;&#x435;&#x43D;&#x43D;&#x43E; &#x43D;&#x430; &#x43C;&#x43E;&#x439; &#x441;&#x443;&#x431;&#x44A;&#x435;&#x43A;&#x442;&#x438;&#x432;&#x43D;&#x44B;&#x439; &#x432;&#x437;&#x433;&#x43B;&#x44F;&#x434; &#x441;&#x442;&#x440;&#x430;&#x448;&#x43D;&#x43E; &#x432;&#x44B;&#x433;&#x43B;&#x44F;&#x434;&#x44F;&#x442; get, set &#x434;&#x43B;&#x44F; &#x441;&#x432;&#x43E;&#x439;&#x441;&#x442;&#x432;.</p>
<h2>&#x412; &#x437;&#x430;&#x43A;&#x43B;&#x44E;&#x447;&#x435;&#x43D;&#x438;&#x435;</h2>
<p>&#x41E;&#x434;&#x43D;&#x43E;&#x439; &#x441;&#x442;&#x430;&#x442;&#x44C;&#x451;&#x439; &#x43D;&#x435;&#x432;&#x43E;&#x437;&#x43C;&#x43E;&#x436;&#x43D;&#x43E; &#x43E;&#x445;&#x432;&#x430;&#x442;&#x438;&#x442;&#x44C; &#x432;&#x441;&#x435; &#x43E;&#x441;&#x43E;&#x431;&#x435;&#x43D;&#x43D;&#x43E;&#x441;&#x442;&#x438; &#x438; &#x430;&#x441;&#x43F;&#x435;&#x43A;&#x442;&#x44B; &#x44F;&#x437;&#x44B;&#x43A;&#x430;, &#x43D;&#x43E; &#x44F; &#x438; &#x43D;&#x435; &#x43F;&#x44B;&#x442;&#x430;&#x43B;&#x441;&#x44F;. &#x41C;&#x43E;&#x435;&#x439; &#x437;&#x430;&#x434;&#x430;&#x447;&#x435;&#x439; &#x431;&#x44B;&#x43B;&#x43E; &#x43F;&#x43E;&#x437;&#x43D;&#x430;&#x43A;&#x43E;&#x43C;&#x438;&#x442;&#x44C; &#x441; &#x44F;&#x437;&#x44B;&#x43A;&#x43E;&#x43C;, &#x43C;&#x43E;&#x436;&#x435;&#x442; &#x431;&#x44B;&#x442;&#x44C; &#x43E;&#x431;&#x440;&#x430;&#x442;&#x438;&#x442;&#x44C; &#x43D;&#x430; &#x43D;&#x435;&#x433;&#x43E; &#x432;&#x43D;&#x438;&#x43C;&#x430;&#x43D;&#x438;&#x435;. &#x422;&#x43E;&#x442;, &#x43A;&#x442;&#x43E; &#x437;&#x430;&#x438;&#x43D;&#x442;&#x435;&#x440;&#x435;&#x441;&#x43E;&#x432;&#x430;&#x43B;&#x441;&#x44F;, &#x441;&#x43C;&#x43E;&#x436;&#x435;&#x442; &#x43D;&#x430;&#x439;&#x442;&#x438; &#x431;&#x43E;&#x43B;&#x44C;&#x448;&#x435; &#x432; <a href="https://kotlinlang.org/docs/reference/">&#x434;&#x43E;&#x43A;&#x443;&#x43C;&#x435;&#x43D;&#x442;&#x430;&#x446;&#x438;&#x438;</a>, &#x43F;&#x43E;&#x441;&#x43C;&#x43E;&#x442;&#x440;&#x435;&#x442;&#x44C; <a href="https://github.com/JetBrains/kotlin">&#x438;&#x441;&#x445;&#x43E;&#x434;&#x43D;&#x438;&#x43A;&#x438;</a>, <a href="http://try.kotlinlang.org/">&#x43F;&#x43E;&#x43F;&#x440;&#x43E;&#x431;&#x43E;&#x432;&#x430;&#x442;&#x44C;</a>, <a href="https://habrahabr.ru/company/JetBrains/blog/277573/">&#x437;&#x430;&#x434;&#x430;&#x442;&#x44C; &#x432;&#x43E;&#x43F;&#x440;&#x43E;&#x441;</a>. &#x421;&#x43B;&#x43E;&#x436;&#x43D;&#x43E; &#x43F;&#x440;&#x435;&#x434;&#x441;&#x43A;&#x430;&#x437;&#x430;&#x442;&#x44C; &#x43F;&#x43E;&#x43F;&#x443;&#x43B;&#x44F;&#x440;&#x43D;&#x43E;&#x441;&#x442;&#x44C; &#x44D;&#x442;&#x43E;&#x433;&#x43E; &#x44F;&#x437;&#x44B;&#x43A;&#x430;, &#x43D;&#x43E; &#x443;&#x436;&#x435; &#x441;&#x435;&#x439;&#x447;&#x430;&#x441; &#x432;&#x438;&#x434;&#x43D;&#x43E;, &#x447;&#x442;&#x43E; &#x442;&#x430;&#x43A;&#x43E;&#x433;&#x43E; &#x43F;&#x440;&#x43E;&#x434;&#x443;&#x43A;&#x442;&#x430; &#x43C;&#x43D;&#x43E;&#x433;&#x438;&#x435; &#x436;&#x434;&#x430;&#x43B;&#x438;, &#x43F;&#x440;&#x43E;&#x435;&#x43A;&#x442;&#x44B; &#x43D;&#x430; &#x43A;&#x43E;&#x442;&#x43B;&#x438;&#x43D;&#x435; &#x43F;&#x43E;&#x44F;&#x432;&#x43B;&#x44F;&#x44E;&#x442;&#x441;&#x44F; &#x43A;&#x430;&#x43A; &#x433;&#x440;&#x438;&#x431;&#x44B;, &#x430; &#x43F;&#x43E;&#x441;&#x43B;&#x435; &#x440;&#x435;&#x43B;&#x438;&#x437;&#x430; &#x447;&#x430;&#x441;&#x442;&#x43E;&#x442;&#x430; &#x438;&#x445; &#x43F;&#x43E;&#x44F;&#x432;&#x43B;&#x435;&#x43D;&#x438;&#x44F; &#x443;&#x432;&#x435;&#x43B;&#x438;&#x447;&#x438;&#x442;&#x441;&#x44F; &#x435;&#x449;&#x435;. &#x41F;&#x43E; &#x43C;&#x43E;&#x435;&#x43C;&#x443; &#x432;&#x43F;&#x435;&#x447;&#x430;&#x442;&#x43B;&#x435;&#x43D;&#x438;&#x44E;, &#x44F;&#x437;&#x44B;&#x43A;&#x430; &#x445;&#x43E;&#x440;&#x43E;&#x448;&#x43E; &#x441;&#x431;&#x430;&#x43B;&#x430;&#x43D;&#x441;&#x438;&#x440;&#x43E;&#x432;&#x430;&#x43D; &#x438; &#x43F;&#x440;&#x43E;&#x434;&#x443;&#x43C;&#x430;&#x43D; &mdash; &#x432;&#x43E; &#x432;&#x440;&#x435;&#x43C;&#x44F; &#x43D;&#x430;&#x43F;&#x438;&#x441;&#x430;&#x43D;&#x438;&#x44F; &#x43A;&#x43E;&#x434;&#x430;, &#x441;&#x43A;&#x43B;&#x430;&#x434;&#x44B;&#x432;&#x430;&#x435;&#x442;&#x441;&#x44F; &#x43E;&#x449;&#x443;&#x449;&#x435;&#x43D;&#x438;&#x435;, &#x447;&#x442;&#x43E; &#x432;&#x441;&#x451; &#x43D;&#x430; &#x441;&#x432;&#x43E;&#x435;&#x43C; &#x43C;&#x435;&#x441;&#x442;&#x435;. &#x415;&#x441;&#x43B;&#x438; &#x432;&#x44B; &#x438;&#x441;&#x43F;&#x43E;&#x43B;&#x44C;&#x437;&#x443;&#x435;&#x442;&#x435; jvm &#x438;&#x43B;&#x438; &#x43B;&#x44E;&#x431;&#x43E;&#x439; &#x434;&#x440;&#x443;&#x433;&#x43E;&#x439; &#x44F;&#x437;&#x44B;&#x43A; &#x441;&#x43E; &#x441;&#x431;&#x43E;&#x440;&#x43A;&#x43E;&#x439; &#x43C;&#x443;&#x441;&#x43E;&#x440;&#x430;, &#x435;&#x441;&#x442;&#x44C; &#x441;&#x43C;&#x44B;&#x441;&#x43B; &#x43E;&#x431;&#x440;&#x430;&#x442;&#x438;&#x442;&#x44C; &#x432;&#x43D;&#x438;&#x43C;&#x430;&#x43D;&#x438;&#x435; &#x43D;&#x430; &#x43A;&#x43E;&#x442;&#x43B;&#x438;&#x43D;. &#x41B;&#x438;&#x447;&#x43D;&#x43E; &#x434;&#x43B;&#x44F; &#x43C;&#x435;&#x43D;&#x44F;, &#x43A;&#x43E;&#x442;&#x43B;&#x438;&#x43D; &mdash; &#x44D;&#x442;&#x43E; &#x442;&#x43E;&#x442; &#x438;&#x43D;&#x441;&#x442;&#x440;&#x443;&#x43C;&#x435;&#x43D;&#x442;, &#x43A;&#x43E;&#x442;&#x43E;&#x440;&#x43E;&#x433;&#x43E; &#x44F; &#x434;&#x43E;&#x43B;&#x433;&#x43E; &#x436;&#x434;&#x430;&#x43B; &#x438; &#x442;&#x435;&#x43F;&#x435;&#x440;&#x44C; &#x43D;&#x435; &#x43F;&#x440;&#x435;&#x434;&#x441;&#x442;&#x430;&#x432;&#x43B;&#x44F;&#x44E;, &#x43A;&#x430;&#x43A; &#x43C;&#x43E;&#x433; &#x431;&#x44B; &#x43E;&#x431;&#x445;&#x43E;&#x434;&#x438;&#x442;&#x44C;&#x441;&#x44F; &#x431;&#x435;&#x437; &#x43D;&#x435;&#x433;&#x43E;.</p>
]]></description><link>https://habrahabr.ru/post/277479/</link><guid isPermaLink="true">https://habrahabr.ru/post/277479/</guid><category><![CDATA[Kotlin]]></category><category><![CDATA[Review]]></category><dc:creator><![CDATA[@fogone]]></dc:creator><pubDate>Sat, 20 Feb 2016 05:25:00 GMT</pubDate></item><item><title><![CDATA[[RU] Kotlin 1.0. Задай вопрос команде.]]></title><description><![CDATA[<h2>Kotlin 1.0. &#x417;&#x430;&#x434;&#x430;&#x439; &#x432;&#x43E;&#x43F;&#x440;&#x43E;&#x441; &#x43A;&#x43E;&#x43C;&#x430;&#x43D;&#x434;&#x435;</h2>
<p>&#x41D;&#x430; &#x44D;&#x442;&#x43E;&#x439; &#x43D;&#x435;&#x434;&#x435;&#x43B;&#x435; &#x441;&#x43B;&#x443;&#x447;&#x438;&#x43B;&#x43E;&#x441;&#x44C; &#x432;&#x430;&#x436;&#x43D;&#x43E;&#x435; &#x434;&#x43B;&#x44F; &#x43D;&#x430;&#x441; &#x441;&#x43E;&#x431;&#x44B;&#x442;&#x438;&#x435; &mdash; <a href="http://blog.jetbrains.com/kotlin/2016/02/kotlin-1-0-released-pragmatic-language-for-jvm-and-android/">&#x432;&#x44B;&#x448;&#x43B;&#x430; &#x43F;&#x435;&#x440;&#x432;&#x430;&#x44F; &#x432;&#x435;&#x440;&#x441;&#x438;&#x44F;</a> &#x44F;&#x437;&#x44B;&#x43A;&#x430; &#x43F;&#x440;&#x43E;&#x433;&#x440;&#x430;&#x43C;&#x43C;&#x438;&#x440;&#x43E;&#x432;&#x430;&#x43D;&#x438;&#x44F; <a href="http://kotlinlang.org/">Kotlin</a>! &#x422;&#x430;&#x43A; &#x43A;&#x430;&#x43A; &#x43F;&#x43E;&#x447;&#x442;&#x438; &#x432;&#x441;&#x44F; &#x440;&#x430;&#x437;&#x440;&#x430;&#x431;&#x43E;&#x442;&#x43A;&#x430; Kotlin &#x432;&#x435;&#x43B;&#x430;&#x441;&#x44C; &#x432; &#x41F;&#x438;&#x442;&#x435;&#x440;&#x441;&#x43A;&#x43E;&#x43C; &#x43E;&#x444;&#x438;&#x441;&#x435; &#x43A;&#x43E;&#x43C;&#x43F;&#x430;&#x43D;&#x438;&#x438; JetBrains, &#x43C;&#x43D;&#x43E;&#x433;&#x438;&#x435; &#x445;&#x430;&#x431;&#x440;&#x43E;&#x432;&#x447;&#x430;&#x43D;&#x435; &#x443;&#x436;&#x435; &#x437;&#x43D;&#x430;&#x44E;&#x442;, &#x447;&#x442;&#x43E; &#x442;&#x430;&#x43A;&#x43E;&#x435; Kotlin &#x438; &#x43F;&#x440;&#x43E;&#x431;&#x43E;&#x432;&#x430;&#x43B;&#x438; &#x435;&#x433;&#x43E; &#x43D;&#x430; &#x43F;&#x440;&#x430;&#x43A;&#x442;&#x438;&#x43A;&#x435;, &#x43F;&#x43E;&#x44D;&#x442;&#x43E;&#x43C;&#x443; &#x44D;&#x442;&#x43E;&#x442; &#x43F;&#x43E;&#x441;&#x442; &#x431;&#x43E;&#x43B;&#x44C;&#x448;&#x435; &#x434;&#x43B;&#x44F; &#x43A;&#x43E;&#x43C;&#x43C;&#x435;&#x43D;&#x442;&#x430;&#x440;&#x438;&#x435;&#x432;: &#x437;&#x430;&#x434;&#x430;&#x432;&#x430;&#x439;&#x442;&#x435; &#x43B;&#x44E;&#x431;&#x44B;&#x435; &#x432;&#x43E;&#x43F;&#x440;&#x43E;&#x441;&#x44B; &#x438; &#x43A;&#x43E;&#x43C;&#x430;&#x43D;&#x434;&#x430; Kotlin &#x43E;&#x442;&#x432;&#x435;&#x442;&#x438;&#x442;. &#x41C;&#x44B; &#x43E;&#x43D;&#x43B;&#x430;&#x439;&#x43D;!</p>
<p><img src="https://habrastorage.org/getpro/habr/post_images/2f8/f4e/685/2f8f4e6857445ecef579ae6e96e80c60.png" alt="Kotlin"></p>
<p>&#x414;&#x43B;&#x44F; &#x442;&#x435;&#x445;, &#x43A;&#x442;&#x43E; &#x441;&#x43B;&#x44B;&#x448;&#x438;&#x442; &#x43E; Kotlin &#x432;&#x43F;&#x435;&#x440;&#x432;&#x44B;&#x435;, &#x430; &#x442;&#x430;&#x43A; &#x436;&#x435; &#x434;&#x43B;&#x44F; &#x437;&#x430;&#x442;&#x440;&#x430;&#x432;&#x43A;&#x438; &#x440;&#x430;&#x437;&#x433;&#x43E;&#x432;&#x43E;&#x440;&#x430;, &#x43D;&#x435;&#x441;&#x43A;&#x43E;&#x43B;&#x44C;&#x43A;&#x43E; &#x444;&#x430;&#x43A;&#x442;&#x43E;&#x432; &#x43E; Kotlin:</p>
<ul>
<li>Kotlin &mdash; &#x44D;&#x442;&#x43E; &ldquo;&#x43F;&#x440;&#x430;&#x433;&#x43C;&#x430;&#x442;&#x438;&#x447;&#x43D;&#x44B;&#x439;&rdquo; &#x44F;&#x437;&#x44B;&#x43A; &#x434;&#x43B;&#x44F; JVM &#x438; Android, &#x43A;&#x43E;&#x442;&#x43E;&#x440;&#x44B;&#x439; &#x43C;&#x44B; &#x432; JetBrains &#x43D;&#x430;&#x43F;&#x438;&#x441;&#x430;&#x43B;&#x438;, &#x434;&#x43B;&#x44F; &#x442;&#x43E;&#x433;&#x43E; &#x447;&#x442;&#x43E;&#x431;&#x44B; &#x43D;&#x430;&#x43C; &#x431;&#x44B;&#x43B;&#x43E; &#x43D;&#x430; &#x447;&#x435;&#x43C; &#x43F;&#x440;&#x43E;&#x433;&#x440;&#x430;&#x43C;&#x43C;&#x438;&#x440;&#x43E;&#x432;&#x430;&#x442;&#x44C; ;)
<em>Kotlin &#x438;&#x43C;&#x435;&#x435;&#x442; &#x442;&#x443; &#x436;&#x435; &#x43E;&#x431;&#x43B;&#x430;c&#x442;&#x44C; &#x43F;&#x440;&#x438;&#x43C;&#x435;&#x43D;&#x438;&#x43C;&#x43E;&#x441;&#x442;&#x438;, &#x447;&#x442;&#x43E; &#x438; Jav&#x430;, &#x438; &#x441;&#x43E;&#x432;&#x43C;&#x435;&#x441;&#x442;&#x438;&#x43C; &#x441;&#x43E; &#x432;&#x441;&#x435;&#x43C;&#x438; &#x441;&#x43E;&#x432;&#x440;&#x435;&#x43C;&#x435;&#x43D;&#x43D;&#x44B;&#x43C;&#x438; &#x442;&#x435;&#x445;&#x43D;&#x43E;&#x43B;&#x43E;&#x433;&#x438;&#x44F;&#x43C;&#x438; &#x438; &#x438;&#x43D;&#x441;&#x442;&#x440;&#x443;&#x43C;&#x435;&#x43D;&#x442;&#x430;&#x43C;&#x438;:
</em> <a href="http://kotlinlang.org/docs/tutorials/getting-started.html">IntelliJ IDEA</a>, <a href="http://kotlinlang.org/docs/tutorials/kotlin-android.html">Android Studio</a>, <a href="http://kotlinlang.org/docs/tutorials/getting-started-eclipse.html">Eclipse</a>
<em> <a href="http://kotlinlang.org/docs/reference/using-maven.html">Maven</a>, <a href="http://kotlinlang.org/docs/reference/using-gradle.html">Gradle</a>, <a href="http://kotlinlang.org/docs/reference/using-ant.html">Ant</a>
</em> <a href="https://spring.io/blog/2016/02/15/developing-spring-boot-applications-with-kotlin">Spring Boot</a></li>
<li>Kotlin &#x43F;&#x43E;&#x43B;&#x43D;&#x43E;&#x441;&#x442;&#x44C;&#x44E; <a href="http://kotlinlang.org/docs/reference/java-interop.html">&#x441;&#x43E;&#x432;&#x43C;&#x435;&#x441;&#x442;&#x438;&#x43C; &#x441; Java</a>. &#x412; &#x441;&#x43C;&#x435;&#x448;&#x430;&#x43D;&#x43D;&#x44B;&#x445; &#x43F;&#x440;&#x43E;&#x435;&#x43A;&#x442;&#x430;&#x445; &#x43A;&#x43E;&#x434; &#x43D;&#x430; Kotlin &#x43C;&#x43E;&#x436;&#x435;&#x442; &#x43B;&#x435;&#x433;&#x43A;&#x43E; &#x432;&#x44B;&#x437;&#x44B;&#x432;&#x430;&#x442;&#x44C; &#x43A;&#x43E;&#x434; &#x43D;&#x430; Java &#x438; &#x43D;&#x430;&#x43E;&#x431;&#x43E;&#x440;&#x43E;&#x442;. &#x421;&#x43E;&#x43E;&#x442;&#x432;&#x435;&#x442;&#x441;&#x442;&#x432;&#x435;&#x43D;&#x43D;&#x43E;, &#x432;&#x441;&#x435; &#x441;&#x443;&#x449;&#x435;&#x441;&#x442;&#x432;&#x443;&#x44E;&#x449;&#x438;&#x435; Java-&#x431;&#x438;&#x431;&#x43B;&#x438;&#x43E;&#x442;&#x435;&#x43A;&#x438; &#x434;&#x43E;&#x441;&#x442;&#x443;&#x43F;&#x43D;&#x44B; &#x438;&#x437; Kotlin.</li>
<li>&#x412; Kotlin &#x43D;&#x435;&#x43B;&#x435;&#x433;&#x43A;&#x43E; &#x43F;&#x43E;&#x43B;&#x443;&#x447;&#x438;&#x442;&#x44C; Null Pointer Exception, &#x43F;&#x43E;&#x442;&#x43E;&#x43C;&#x443; &#x447;&#x442;&#x43E; &#x441;&#x438;&#x441;&#x442;&#x435;&#x43C;&#x430; &#x442;&#x438;&#x43F;&#x43E;&#x432; &#x438;&#x441;&#x43A;&#x43B;&#x44E;&#x447;&#x430;&#x435;&#x442; &#x44D;&#x442;&#x43E;.</li>
<li>Kotlin &#x43F;&#x43E;&#x437;&#x432;&#x43E;&#x43B;&#x44F;&#x435;&#x442; <a href="http://kotlinlang.org/docs/reference/extensions.html">&#x441;&#x43E;&#x437;&#x434;&#x430;&#x432;&#x430;&#x442;&#x44C; &#x444;&#x443;&#x43D;&#x43A;&#x446;&#x438;&#x438;-&#x440;&#x430;&#x441;&#x448;&#x438;&#x440;&#x435;&#x43D;&#x438;&#x44F;</a> &#x434;&#x43B;&#x44F; &#x441;&#x443;&#x449;&#x435;&#x441;&#x442;&#x432;&#x443;&#x44E;&#x449;&#x438;&#x445; &#x43A;&#x43B;&#x430;&#x441;&#x441;&#x43E;&#x432;. &#x41F;&#x43E;&#x44D;&#x442;&#x43E;&#x43C;&#x443; &#x441;&#x442;&#x430;&#x43D;&#x434;&#x430;&#x440;&#x442;&#x43D;&#x430;&#x44F; &#x431;&#x438;&#x431;&#x43B;&#x438;&#x43E;&#x442;&#x435;&#x43A;&#x430; &#x43D;&#x435; &#x43E;&#x43F;&#x440;&#x435;&#x434;&#x435;&#x43B;&#x44F;&#x435;&#x442; &#x441;&#x432;&#x43E;&#x438; &#x43A;&#x43B;&#x430;&#x441;&#x441;&#x44B; &#x43A;&#x43E;&#x43B;&#x43B;&#x435;&#x43A;&#x446;&#x438;&#x439;, &#x43D;&#x43E; &#x43F;&#x440;&#x435;&#x434;&#x43E;&#x441;&#x442;&#x430;&#x432;&#x43B;&#x44F;&#x435;&#x442; &#x43A;&#x443;&#x447;&#x443; &#x443;&#x434;&#x43E;&#x431;&#x43D;&#x44B;&#x445; &#x444;&#x443;&#x43D;&#x43A;&#x446;&#x438;&#x439; &#x434;&#x43B;&#x44F; &#x440;&#x430;&#x431;&#x43E;&#x442;&#x44B; &#x441; JDK &#x43A;&#x43E;&#x43B;&#x43B;&#x435;&#x43A;&#x446;&#x438;&#x44F;&#x43C;&#x438;</li>
<li>&#x41D;&#x430;&#x447;&#x438;&#x43D;&#x430;&#x44F; &#x441; &#x432;&#x435;&#x440;&#x441;&#x438;&#x438; 1.0 &#x43C;&#x44B; &#x433;&#x430;&#x440;&#x430;&#x43D;&#x442;&#x438;&#x440;&#x443;&#x435;&#x43C; &#x431;&#x438;&#x43D;&#x430;&#x440;&#x43D;&#x443;&#x44E; &#x441;&#x43E;&#x432;&#x43C;&#x435;&#x441;&#x442;&#x438;&#x43C;&#x43E;&#x441;&#x442;&#x44C;. &#x422;&#x430;&#x43A; &#x447;&#x442;&#x43E; &#x442;&#x435;&#x43F;&#x435;&#x440;&#x44C; &#x43C;&#x43E;&#x436;&#x43D;&#x43E; ;)</li>
<li>&#x41D;&#x430;&#x441; &#x43C;&#x43D;&#x43E;&#x433;&#x43E;! &#x417;&#x430; &#x44F;&#x43D;&#x432;&#x430;&#x440;&#x44C; Kotlin &#x438;&#x441;&#x43F;&#x43E;&#x43B;&#x44C;&#x437;&#x43E;&#x432;&#x430;&#x43B;&#x43E; &#x431;&#x43E;&#x43B;&#x44C;&#x448;&#x435; 11 &#x442;&#x44B;&#x441;&#x44F;&#x447; &#x447;&#x435;&#x43B;&#x43E;&#x432;&#x435;&#x43A;, &#x438;&#x437; &#x43D;&#x438;&#x445; 5 &#x442;&#x44B;&#x441;&#x44F;&#x447; &#x437;&#x430; &#x43F;&#x43E;&#x441;&#x43B;&#x435;&#x434;&#x43D;&#x44E;&#x44E; &#x43D;&#x435;&#x434;&#x435;&#x43B;&#x44E;. &#x41F;&#x43E;&#x447;&#x442;&#x438; 2 &#x442;&#x44B;&#x441;&#x44F;&#x447;&#x438; &#x447;&#x435;&#x43B;&#x43E;&#x432;&#x435;&#x43A; &#x43E;&#x431;&#x449;&#x430;&#x44E;&#x442;&#x441;&#x44F; &#x432; &#x43D;&#x430;&#x448;&#x435;&#x43C; Slack-&#x43A;&#x430;&#x43D;&#x430;&#x43B;&#x435; &#x438; &#x43F;&#x43E;&#x43C;&#x43E;&#x433;&#x430;&#x44E;&#x442; &#x434;&#x440;&#x443;&#x433; &#x434;&#x440;&#x443;&#x433;&#x443;. &#x421;&#x435;&#x439;&#x447;&#x430;&#x441; &#x432; &#x43A;&#x43E;&#x43C;&#x430;&#x43D;&#x434;&#x435; Kotlin &#x431;&#x43E;&#x43B;&#x44C;&#x448;&#x435; &#x434;&#x432;&#x430;&#x434;&#x446;&#x430;&#x442;&#x438; &#x447;&#x435;&#x43B;&#x43E;&#x432;&#x435;&#x43A;. &#x412; JetBrains &#x43D;&#x430;&#x43F;&#x438;&#x441;&#x430;&#x43D;&#x43E; &#x43E;&#x43A;&#x43E;&#x43B;&#x43E; 500&#x41A; &#x441;&#x442;&#x440;&#x43E;&#x447;&#x435;&#x43A; &#x43A;&#x43E;&#x434;&#x430; &#x43D;&#x430; Kotlin, &#x431;&#x43E;&#x43B;&#x435;&#x435; &#x447;&#x435;&#x43C; &#x432; &#x434;&#x435;&#x441;&#x44F;&#x442;&#x438; &#x43F;&#x440;&#x43E;&#x435;&#x43A;&#x442;&#x430;&#x445;, &#x430; &#x432; &#x43E;&#x442;&#x43A;&#x440;&#x44B;&#x442;&#x44B;&#x445; &#x440;&#x435;&#x43F;&#x43E;&#x437;&#x438;&#x442;&#x43E;&#x440;&#x438;&#x44F;&#x445; &#x43D;&#x430; GitHub (&#x438;&#x441;&#x43A;&#x43B;&#x44E;&#x447;&#x430;&#x44F; &#x43D;&#x430;&#x448;&#x438;) &#x447;&#x438;&#x441;&#x43B;&#x43E; &#x441;&#x442;&#x440;&#x43E;&#x447;&#x435;&#x43A; &#x440;&#x430;&#x441;&#x442;&#x435;&#x442; &#x44D;&#x43A;&#x441;&#x43F;&#x43E;&#x43D;&#x435;&#x43D;&#x446;&#x438;&#x430;&#x43B;&#x44C;&#x43D;&#x43E;, &#x438; &#x43D;&#x430; &#x43C;&#x43E;&#x43C;&#x435;&#x43D;&#x442; &#x440;&#x435;&#x43B;&#x438;&#x437;&#x430; &#x438;&#x445; &#x443;&#x436;&#x435; &#x431;&#x43E;&#x43B;&#x44C;&#x448;&#x435; &#x434;&#x432;&#x443;&#x445; &#x43C;&#x438;&#x43B;&#x43B;&#x438;&#x43E;&#x43D;&#x43E;&#x432;: <img src="https://habrastorage.org/getpro/habr/post_images/75e/087/333/75e087333d725b9f69ec3d009abf17fe.gif" alt="Kotlin GitHub"></li>
<li>&#x41C;&#x44B; &#x43F;&#x43B;&#x430;&#x43D;&#x438;&#x440;&#x443;&#x435;&#x43C; &#x432;&#x441;&#x43A;&#x43E;&#x440;&#x435; &#x437;&#x430;&#x440;&#x435;&#x43B;&#x438;&#x437;&#x438;&#x442;&#x44C; &#x43F;&#x43E;&#x434;&#x434;&#x435;&#x440;&#x436;&#x43A;&#x443; JavaScript &#x438; Java 8</li>
<li>&#x423; &#x43D;&#x430;&#x441; &#x435;&#x441;&#x442;&#x44C; &#x441;&#x432;&#x43E;&#x44F; &#x43E;&#x43D;&#x43B;&#x430;&#x439;&#x43D;-&#x43F;&#x435;&#x441;&#x43E;&#x447;&#x43D;&#x438;&#x446;&#x430;: <a href="http://try.kotl.in/">http://try.kotl.in</a> &#x412; &#x43D;&#x435;&#x439; &#x435;&#x441;&#x442;&#x44C; &#x441;&#x435;&#x440;&#x438;&#x44F; &#x437;&#x430;&#x434;&#x430;&#x447;&#x435;&#x43A; <a href="http://try.kotl.in/koans">Kotlin Koans</a>, &#x43A;&#x43E;&#x442;&#x43E;&#x440;&#x44B;&#x435; &#x43F;&#x43E;&#x43C;&#x43E;&#x433;&#x430;&#x44E;&#x442; &#x43E;&#x441;&#x432;&#x43E;&#x438;&#x442;&#x44C;&#x441;&#x44F; &#x441; &#x44F;&#x437;&#x44B;&#x43A;&#x43E;&#x43C; &#x431;&#x443;&#x43A;&#x432;&#x430;&#x43B;&#x44C;&#x43D;&#x43E; &#x437;&#x430; &#x43D;&#x435;&#x441;&#x43A;&#x43E;&#x43B;&#x44C;&#x43A;&#x43E; &#x447;&#x430;&#x441;&#x43E;&#x432;. &#x414;&#x435;&#x439;&#x441;&#x442;&#x432;&#x438;&#x442;&#x435;&#x43B;&#x44C;&#x43D;&#x43E; &#x437;&#x430; &#x43D;&#x435;&#x441;&#x43A;&#x43E;&#x43B;&#x44C;&#x43A;&#x43E; &#x447;&#x430;&#x441;&#x43E;&#x432;! &#x422;&#x430;&#x43A;&#x436;&#x435; &#x443; &#x43D;&#x430;&#x441; &#x43E;&#x442;&#x43B;&#x438;&#x447;&#x43D;&#x430;&#x44F; &#x434;&#x43E;&#x43A;&#x443;&#x43C;&#x435;&#x43D;&#x442;&#x430;&#x446;&#x438;&#x44F; &#x43D;&#x430; <a href="http://kotlinlang.org/docs/reference/">&#x43E;&#x444;&#x438;&#x446;&#x438;&#x430;&#x43B;&#x44C;&#x43D;&#x43E;&#x43C; &#x441;&#x430;&#x439;&#x442;&#x435;</a>.</li>
<li>&#x41C;&#x44B; &#x43E;&#x442;&#x43A;&#x440;&#x44B;&#x442;&#x44B;! Kotlin <a href="https://github.com/JetBrains/kotlin">&#x440;&#x430;&#x437;&#x440;&#x430;&#x431;&#x430;&#x442;&#x44B;&#x432;&#x430;&#x435;&#x442;&#x441;&#x44F; &#x43D;&#x430; GitHub</a>, &#x43F;&#x43E;&#x434; &#x43B;&#x438;&#x446;&#x435;&#x43D;&#x437;&#x438;&#x435;&#x439; Apache 2.0. &#x41D;&#x43E; &#x441;&#x430;&#x43C;&#x43E;&#x435; &#x433;&#x43B;&#x430;&#x432;&#x43D;&#x43E;&#x435;, &#x43C;&#x44B; &#x432;&#x441;&#x435;&#x433;&#x434;&#x430; &#x432;&#x43D;&#x438;&#x43C;&#x430;&#x442;&#x435;&#x43B;&#x44C;&#x43D;&#x43E; &#x43F;&#x440;&#x438;&#x441;&#x43B;&#x443;&#x448;&#x438;&#x432;&#x430;&#x435;&#x43C;&#x441;&#x44F; &#x43A;&#x43E; &#x432;&#x441;&#x435;&#x43C;&#x443; &#x432;&#x445;&#x43E;&#x434;&#x44F;&#x449;&#x435;&#x43C;&#x443; &#x444;&#x438;&#x434;&#x431;&#x435;&#x43A;&#x443;, &#x442;&#x430;&#x43A; &#x447;&#x442;&#x43E; &#x442;&#x435;&#x43F;&#x435;&#x440;&#x44C; &#x441;&#x43B;&#x43E;&#x432;&#x43E; &#x432;&#x430;&#x43C;:</li>
</ul>
]]></description><link>https://habrahabr.ru/company/JetBrains/blog/277573/</link><guid isPermaLink="true">https://habrahabr.ru/company/JetBrains/blog/277573/</guid><category><![CDATA[JetBrains]]></category><category><![CDATA[Kotlin]]></category><dc:creator><![CDATA[Роман Белов]]></dc:creator><pubDate>Fri, 19 Feb 2016 13:30:00 GMT</pubDate></item><item><title><![CDATA[Kotlin 1.0: The good, the bad and the evident.]]></title><description><![CDATA[<p>Kotlin 1.0 is a programming language made by JetBrains, the creator of the popular IntelliJ IDEA development environment. This programming language for the JVM and Android focuses on safety, interoperability, clarity and tooling support and combines OO and functional features.</p>
<p>After a long wait, Kotlin 1.0 is finally here! According to the <a href="http://blog.jetbrains.com/kotlin/2016/02/kotlin-1-0-released-pragmatic-language-for-jvm-and-android/">official announcement</a>, &rdquo; Kotlin works everywhere where Java works: server-side applications, mobile applications (Android), desktop applications. It works with all major tools and services such as IntelliJ IDEA, Android Studio and Eclipse, Maven, Gradle and Ant, Spring Boot, GitHub, Slack and even Minecraft.&rdquo;</p>
<p>Interoperability and seamless support for mixed Java+ Kotlin projects has been a focal point in the making of this project. Adoption is easier, which leads to less boilerplate code and more type-safety. Plus, the new programming language has a huge standard library which makes daily tasks not only easy, but also smooth while maintaining the byte code footprint low. Kotlin has been dubbed a &lsquo;pragmatic&rsquo; programming language because in its creation developers focused on use cases to transform it into a good tool. Utility was the idea behind Kotlin 1.0, as emphasized by Andrey Breslav, the lead language designer of Kotlin: &rdquo; the less our users have to re-learn, re-invent, re-do from scratch, the more they can re-use, the better.&rdquo;</p>
<p>Breslav explained that Kotlin 1.0 is mature enough and ready for production because the team has been using it in real-life projects on a broad scale over the past couple of years and pointed out that a handful of other companies have been using this new programming language in production &ldquo;for some time now.&rdquo;  The lead language designer of Kotlin revealed that the reason why it took so long for them to produce 1.0 was that they paid extra attention to validating their design decision in practice.</p>
<p>The team has kept Kotlin&rsquo;s development very open since 2012 and has continuously talked to the community, collecting and addressing lots of feedback. Breslav announced that they are planning to establish a centralized venue for design proposals and discussions in order to make the process even more organized and visible. The team&rsquo;s goals in the near future are to offer constant performance improvements for the Kotlin toolchain, JavaScript support and support generating Java 8 byte code.</p>
<h2>The good about Kotlin</h2>
<p>Mike Hearn, a former bitcoin core developer who recently made waves when he declared that the bitcoin project had &ldquo;failed&rdquo;, wrote in a post on <a href="https://medium.com/@octskyward/why-kotlin-is-my-next-programming-language-c25c001e26e3#.w9lbw7fso">Medium</a> last July that Kotlin is the programming language he will probably use for the next five to 10 years. He opined that Kotlin is &ldquo;of greatest interest to people who work with Java today, although it could appeal to all programmers who use a garbage collected runtime, including people who currently use Scala, Go, Python, Ruby and JavaScript.&rdquo;</p>
<p>According to Hearn, this programming language &ldquo;comes from industry, not academia and solves problems faced by working programmers today.&rdquo; It is open source, approachable and can be learned in a few hours by reading the language reference. &ldquo;The syntax is lean and intuitive. Kotlin looks a lot like Scala, but is simpler,&rdquo; he added. It allows developers to continue to use their productivity enhancing tools and adopting it is low risk because &ldquo;it can be trialled in a small part of your code base by one or two enthusiastic team members without disrupting the rest of your project.&rdquo;</p>
<h2>The bad: pre-1.0</h2>
<p>As Breslav remarked in the official announcement, the team took their time before they released Kotlin 1.0 because they paid extra attention to validating their design decision on practice. Therefore, all the problems pointed out by Hearn in his review of Kotlin should not exist anymore now that Kotlin 1.0 has been released. The former bitcoin core developer pointed out that Kotlin&rsquo;s biggest problems were its immaturity (because it was a pre 1.0 language) and that sometimes the requirements of Java interop resulted in unintuitive limitations.</p>
<p>Hearn also criticized the size of the community, which was smaller at that time. However, according to Breslav, over 11.000 people were using Kotlin last month and almost 5.000 earlier this month. Plus, there is a growing list of companies using Kotlin, including Expedia and Prezi.</p>
<p>Language docs and tutorials can be found on the <a href="https://kotlinlang.org/">official website</a>.</p>
]]></description><link>https://jaxenter.com/kotlin-1-0-the-good-the-bad-and-the-evidence-124041.html</link><guid isPermaLink="true">https://jaxenter.com/kotlin-1-0-the-good-the-bad-and-the-evidence-124041.html</guid><category><![CDATA[Kotlin]]></category><category><![CDATA[Review]]></category><dc:creator><![CDATA[Gabriela Motroc]]></dc:creator><pubDate>Tue, 16 Feb 2016 14:11:00 GMT</pubDate></item><item><title><![CDATA[[RU] Релиз Kotlin 1.0, языка программирования для JVM и Android.]]></title><description><![CDATA[<p>&#x41A;&#x43E;&#x43C;&#x43F;&#x430;&#x43D;&#x438;&#x44F; Jetbrains, &#x440;&#x430;&#x437;&#x432;&#x438;&#x432;&#x430;&#x44E;&#x449;&#x430;&#x44F; &#x438;&#x43D;&#x442;&#x435;&#x433;&#x440;&#x438;&#x440;&#x43E;&#x432;&#x430;&#x43D;&#x43D;&#x443;&#x44E; &#x441;&#x440;&#x435;&#x434;&#x443; &#x440;&#x430;&#x437;&#x440;&#x430;&#x431;&#x43E;&#x442;&#x43A;&#x438; IntelliJ IDEA, <a href="http://blog.jetbrains.com/kotlin/2016/02/kotlin-1-0-released-pragmatic-language-for-jvm-and-android/">&#x43F;&#x440;&#x435;&#x434;&#x441;&#x442;&#x430;&#x432;&#x438;&#x43B;&#x430;</a> &#x43F;&#x435;&#x440;&#x432;&#x44B;&#x439; &#x437;&#x43D;&#x430;&#x447;&#x438;&#x442;&#x435;&#x43B;&#x44C;&#x43D;&#x44B;&#x439; &#x440;&#x435;&#x43B;&#x438;&#x437; &#x43E;&#x431;&#x44A;&#x435;&#x43A;&#x442;&#x43D;&#x43E;-&#x43E;&#x440;&#x438;&#x435;&#x43D;&#x442;&#x438;&#x440;&#x43E;&#x432;&#x430;&#x43D;&#x43D;&#x43E;&#x433;&#x43E; &#x44F;&#x437;&#x44B;&#x43A;&#x430; &#x43F;&#x440;&#x43E;&#x433;&#x440;&#x430;&#x43C;&#x43C;&#x438;&#x440;&#x43E;&#x432;&#x430;&#x43D;&#x438;&#x44F; <a href="https://kotlinlang.org/">Kotlin 1.0</a>, &#x43F;&#x43E;&#x437;&#x432;&#x43E;&#x43B;&#x44F;&#x44E;&#x449;&#x435;&#x433;&#x43E; &#x441;&#x43E;&#x437;&#x434;&#x430;&#x432;&#x430;&#x442;&#x44C; &#x43F;&#x440;&#x438;&#x43B;&#x43E;&#x436;&#x435;&#x43D;&#x438;&#x44F;, &#x441;&#x43A;&#x43E;&#x43C;&#x43F;&#x438;&#x43B;&#x438;&#x440;&#x43E;&#x432;&#x430;&#x43D;&#x43D;&#x44B;&#x435; &#x434;&#x43B;&#x44F; &#x43F;&#x43E;&#x441;&#x43B;&#x435;&#x434;&#x443;&#x44E;&#x449;&#x435;&#x433;&#x43E; &#x432;&#x44B;&#x43F;&#x43E;&#x43B;&#x43D;&#x435;&#x43D;&#x438;&#x44F; &#x432;&#x43D;&#x443;&#x442;&#x440;&#x438; &#x441;&#x442;&#x430;&#x43D;&#x434;&#x430;&#x440;&#x442;&#x43D;&#x43E;&#x439; &#x432;&#x438;&#x440;&#x442;&#x443;&#x430;&#x43B;&#x44C;&#x43D;&#x43E;&#x439; &#x43C;&#x430;&#x448;&#x438;&#x43D;&#x44B; Java (JVM) &#x438;&#x43B;&#x438; Android. &#x414;&#x43E;&#x43F;&#x43E;&#x43B;&#x43D;&#x438;&#x442;&#x435;&#x43B;&#x44C;&#x43D;&#x43E; &#x43F;&#x43E;&#x434;&#x434;&#x435;&#x440;&#x436;&#x438;&#x432;&#x430;&#x435;&#x442;&#x441;&#x44F; &#x43F;&#x440;&#x435;&#x43E;&#x431;&#x440;&#x430;&#x437;&#x43E;&#x432;&#x430;&#x43D;&#x438;&#x435; &#x43F;&#x440;&#x43E;&#x433;&#x440;&#x430;&#x43C;&#x43C; &#x432; JavaScript-&#x43F;&#x440;&#x435;&#x434;&#x441;&#x442;&#x430;&#x432;&#x43B;&#x435;&#x43D;&#x438;&#x435; &#x434;&#x43B;&#x44F; &#x437;&#x430;&#x43F;&#x443;&#x441;&#x43A;&#x430; &#x432;&#x43D;&#x443;&#x442;&#x440;&#x438; &#x431;&#x440;&#x430;&#x443;&#x437;&#x435;&#x440;&#x430;, &#x43D;&#x43E; &#x434;&#x430;&#x43D;&#x43D;&#x430;&#x44F; &#x444;&#x443;&#x43D;&#x43A;&#x446;&#x438;&#x43E;&#x43D;&#x430;&#x43B;&#x44C;&#x43D;&#x43E;&#x441;&#x442;&#x44C; &#x43F;&#x43E;&#x43A;&#x430; &#x43E;&#x442;&#x43D;&#x435;&#x441;&#x435;&#x43D;&#x430; &#x43A; &#x44D;&#x43A;&#x441;&#x43F;&#x435;&#x440;&#x438;&#x43C;&#x435;&#x43D;&#x442;&#x430;&#x43B;&#x44C;&#x43D;&#x44B;&#x43C; &#x432;&#x43E;&#x437;&#x43C;&#x43E;&#x436;&#x43D;&#x43E;&#x441;&#x442;&#x44F;&#x43C;.</p>
<p>&#x412;&#x44B;&#x43F;&#x443;&#x441;&#x43A; 1.0 &#x43F;&#x43E;&#x437;&#x438;&#x446;&#x438;&#x43E;&#x43D;&#x438;&#x440;&#x443;&#x435;&#x442;&#x441;&#x44F; &#x43A;&#x430;&#x43A; &#x43F;&#x435;&#x440;&#x432;&#x44B;&#x439; &#x432;&#x44B;&#x43F;&#x443;&#x441;&#x43A;, &#x433;&#x43E;&#x442;&#x43E;&#x432;&#x44B;&#x439; &#x434;&#x43B;&#x44F; &#x43F;&#x440;&#x43E;&#x43C;&#x44B;&#x448;&#x43B;&#x435;&#x43D;&#x43D;&#x43E;&#x433;&#x43E; &#x43F;&#x440;&#x438;&#x43C;&#x435;&#x43D;&#x435;&#x43D;&#x438;&#x44F;. &#x412;&#x441;&#x435; &#x434;&#x430;&#x43B;&#x44C;&#x43D;&#x435;&#x439;&#x448;&#x438;&#x435; &#x43E;&#x431;&#x43D;&#x43E;&#x432;&#x43B;&#x435;&#x43D;&#x438;&#x44F; &#x431;&#x443;&#x434;&#x443;&#x442; &#x432;&#x44B;&#x43F;&#x443;&#x441;&#x43A;&#x430;&#x442;&#x44C;&#x441;&#x44F; &#x441; &#x443;&#x447;&#x451;&#x442;&#x43E;&#x43C; &#x441;&#x43E;&#x445;&#x440;&#x430;&#x43D;&#x435;&#x43D;&#x438;&#x44F; &#x43E;&#x431;&#x440;&#x430;&#x442;&#x43D;&#x43E;&#x439; &#x441;&#x43E;&#x432;&#x43C;&#x435;&#x441;&#x442;&#x438;&#x43C;&#x43E;&#x441;&#x442;&#x438;. &#x418;&#x441;&#x445;&#x43E;&#x434;&#x43D;&#x44B;&#x435; &#x442;&#x435;&#x43A;&#x441;&#x442;&#x44B; <a href="http://github.com/jetbrains/kotlin">&#x43E;&#x442;&#x43A;&#x440;&#x44B;&#x442;&#x44B;</a> &#x43F;&#x43E;&#x434; &#x43B;&#x438;&#x446;&#x435;&#x43D;&#x437;&#x438;&#x435;&#x439; Apache 2.0. &#x41F;&#x43B;&#x430;&#x433;&#x438;&#x43D;&#x44B; &#x441; &#x43F;&#x43E;&#x434;&#x434;&#x435;&#x440;&#x436;&#x43A;&#x43E;&#x439; Kotlin &#x43F;&#x43E;&#x434;&#x433;&#x43E;&#x442;&#x43E;&#x432;&#x43B;&#x435;&#x43D;&#x44B; &#x434;&#x43B;&#x44F; &#x438;&#x43D;&#x442;&#x435;&#x433;&#x440;&#x438;&#x440;&#x43E;&#x432;&#x430;&#x43D;&#x43D;&#x44B;&#x445; &#x441;&#x440;&#x435;&#x434; &#x440;&#x430;&#x437;&#x440;&#x430;&#x431;&#x43E;&#x442;&#x43A;&#x438; IntelliJ IDEA, Eclipse &#x438; Android Studio. &#x418;&#x437; &#x441;&#x438;&#x441;&#x442;&#x435;&#x43C; &#x441;&#x431;&#x43E;&#x440;&#x43A;&#x438; &#x43F;&#x43E;&#x434;&#x434;&#x435;&#x440;&#x436;&#x438;&#x432;&#x430;&#x44E;&#x442;&#x441;&#x44F; Maven, Gradle &#x438; Ant.</p>
<p>&#x42F;&#x437;&#x44B;&#x43A; &#x440;&#x430;&#x437;&#x432;&#x438;&#x432;&#x430;&#x435;&#x442;&#x441;&#x44F; &#x432; &#x441;&#x430;&#x43D;&#x43A;&#x442;-&#x43F;&#x435;&#x442;&#x435;&#x440;&#x431;&#x443;&#x440;&#x433;&#x441;&#x43A;&#x43E;&#x43C; &#x446;&#x435;&#x43D;&#x442;&#x440;&#x435; &#x440;&#x430;&#x437;&#x440;&#x430;&#x431;&#x43E;&#x442;&#x43A;&#x438; &#x43A;&#x43E;&#x43C;&#x43F;&#x430;&#x43D;&#x438;&#x438; JetBrains c &#x446;&#x435;&#x43B;&#x44C;&#x44E; &#x441;&#x43E;&#x437;&#x434;&#x430;&#x43D;&#x438;&#x44F; &#x43C;&#x430;&#x43A;&#x441;&#x438;&#x43C;&#x430;&#x43B;&#x44C;&#x43D;&#x43E; &#x441;&#x43E;&#x432;&#x43C;&#x435;&#x441;&#x442;&#x438;&#x43C;&#x43E;&#x433;&#x43E; &#x441; Java &#x44F;&#x437;&#x44B;&#x43A;&#x430; &#x43F;&#x440;&#x43E;&#x433;&#x440;&#x430;&#x43C;&#x43C;&#x438;&#x440;&#x43E;&#x432;&#x430;&#x43D;&#x438;&#x44F;, &#x43E;&#x434;&#x43D;&#x43E;&#x432;&#x440;&#x435;&#x43C;&#x435;&#x43D;&#x43D;&#x43E; &#x43B;&#x438;&#x448;&#x451;&#x43D;&#x43D;&#x43E;&#x433;&#x43E; &#x43E;&#x433;&#x440;&#x430;&#x43D;&#x438;&#x447;&#x435;&#x43D;&#x438;&#x439; &#x438; &#x43D;&#x435;&#x434;&#x43E;&#x441;&#x442;&#x430;&#x442;&#x43A;&#x43E;&#x432; Java, &#x43E;&#x442; &#x43A;&#x43E;&#x442;&#x43E;&#x440;&#x44B;&#x445; Java &#x43D;&#x435; &#x43C;&#x43E;&#x436;&#x435;&#x442; &#x438;&#x437;&#x431;&#x430;&#x432;&#x438;&#x442;&#x44C;&#x441;&#x44F; &#x438;&#x437;-&#x437;&#x430; &#x43D;&#x435;&#x43E;&#x431;&#x445;&#x43E;&#x434;&#x438;&#x43C;&#x43E;&#x441;&#x442;&#x438; &#x43E;&#x431;&#x435;&#x441;&#x43F;&#x435;&#x447;&#x435;&#x43D;&#x438;&#x44F; &#x43E;&#x431;&#x440;&#x430;&#x442;&#x43D;&#x43E;&#x439; &#x441;&#x43E;&#x432;&#x43C;&#x435;&#x441;&#x442;&#x438;&#x43C;&#x43E;&#x441;&#x442;&#x438;. &#x41F;&#x440;&#x438; &#x44D;&#x442;&#x43E;&#x43C; &#x43F;&#x440;&#x43E;&#x435;&#x43A;&#x442;&#x44B; &#x43D;&#x430; Kotlin &#x43F;&#x43E;&#x43B;&#x43D;&#x43E;&#x441;&#x442;&#x44C;&#x44E; &#x441;&#x43E;&#x432;&#x43C;&#x435;&#x441;&#x442;&#x438;&#x43C;&#x44B; &#x441; &#x43A;&#x43E;&#x43C;&#x43F;&#x43E;&#x43D;&#x435;&#x43D;&#x442;&#x430;&#x43C;&#x438; &#x43D;&#x430; &#x44F;&#x437;&#x44B;&#x43A;&#x435; Java - &#x438;&#x437; &#x43F;&#x440;&#x43E;&#x433;&#x440;&#x430;&#x43C;&#x43C; Kotlin &#x43C;&#x43E;&#x436;&#x43D;&#x43E; &#x432;&#x44B;&#x437;&#x44B;&#x432;&#x430;&#x442;&#x44C; Java-&#x43A;&#x43B;&#x430;&#x441;&#x441;&#x44B; &#x438; &#x43D;&#x430;&#x43E;&#x431;&#x43E;&#x440;&#x43E;&#x442;, &#x438;&#x437; Java &#x432;&#x44B;&#x437;&#x44B;&#x432;&#x430;&#x442;&#x44C; &#x43A;&#x43E;&#x43C;&#x43F;&#x43E;&#x43D;&#x435;&#x43D;&#x442;&#x44B;, &#x43D;&#x430;&#x43F;&#x438;&#x441;&#x430;&#x43D;&#x43D;&#x44B;&#x435; &#x43D;&#x430; Kotlin. &#x41A;&#x440;&#x43E;&#x43C;&#x435; &#x432;&#x43E;&#x437;&#x43C;&#x43E;&#x436;&#x43D;&#x43E;&#x441;&#x442;&#x438; &#x438;&#x441;&#x43F;&#x43E;&#x43B;&#x44C;&#x437;&#x43E;&#x432;&#x430;&#x43D;&#x438;&#x44F; &#x448;&#x442;&#x430;&#x442;&#x43D;&#x44B;&#x445; Java-&#x431;&#x438;&#x431;&#x438;&#x43B;&#x438;&#x43E;&#x442;&#x435;&#x43A; &#x434;&#x43B;&#x44F; Kotlin &#x43F;&#x43E;&#x434;&#x433;&#x43E;&#x442;&#x43E;&#x432;&#x43B;&#x435;&#x43D;&#x430; &#x431;&#x43E;&#x43B;&#x44C;&#x448;&#x430;&#x44F; &#x431;&#x438;&#x431;&#x43B;&#x438;&#x43E;&#x442;&#x435;&#x43A;&#x430; &#x43A;&#x43B;&#x430;&#x441;&#x441;&#x43E;&#x432;, &#x43E;&#x43F;&#x442;&#x438;&#x43C;&#x438;&#x437;&#x438;&#x440;&#x43E;&#x432;&#x430;&#x43D;&#x43D;&#x430;&#x44F; &#x434;&#x43B;&#x44F; &#x433;&#x435;&#x43D;&#x435;&#x440;&#x430;&#x446;&#x438;&#x438; &#x431;&#x430;&#x439;&#x442;&#x43A;&#x43E;&#x434;&#x430; &#x43C;&#x438;&#x43D;&#x438;&#x43C;&#x430;&#x43B;&#x44C;&#x43D;&#x43E;&#x433;&#x43E; &#x440;&#x430;&#x437;&#x43C;&#x435;&#x440;&#x430;.</p>
<p>&#x418;&#x437; &#x43E;&#x442;&#x43B;&#x438;&#x447;&#x438;&#x442;&#x435;&#x43B;&#x44C;&#x43D;&#x44B;&#x445; &#x447;&#x435;&#x440;&#x442; &#x44F;&#x437;&#x44B;&#x43A;&#x430; Kotlin &#x43C;&#x43E;&#x436;&#x43D;&#x43E; &#x432;&#x44B;&#x434;&#x435;&#x43B;&#x438;&#x442;&#x44C; &#x43E;&#x440;&#x438;&#x435;&#x43D;&#x442;&#x430;&#x446;&#x438;&#x44E; &#x43D;&#x430; &#x43E;&#x431;&#x435;&#x441;&#x43F;&#x435;&#x447;&#x435;&#x43D;&#x438;&#x435; &#x431;&#x43E;&#x43B;&#x435;&#x435; &#x432;&#x44B;&#x441;&#x43E;&#x43A;&#x43E;&#x439; &#x431;&#x435;&#x437;&#x43E;&#x43F;&#x430;&#x441;&#x43D;&#x43E;&#x441;&#x442;&#x438; &#x437;&#x430; &#x441;&#x447;&#x435;&#x442; &#x440;&#x435;&#x430;&#x43B;&#x438;&#x437;&#x430;&#x446;&#x438;&#x438; &#x441;&#x442;&#x430;&#x442;&#x438;&#x447;&#x435;&#x441;&#x43A;&#x438;&#x445; &#x43F;&#x440;&#x43E;&#x432;&#x435;&#x440;&#x43E;&#x43A; &#x434;&#x43B;&#x44F; &#x432;&#x44B;&#x44F;&#x432;&#x43B;&#x435;&#x43D;&#x438;&#x44F; &#x442;&#x430;&#x43A;&#x438;&#x445; &#x43F;&#x440;&#x43E;&#x431;&#x43B;&#x435;&#x43C; &#x43A;&#x430;&#x43A; &#x440;&#x430;&#x437;&#x44B;&#x43C;&#x435;&#x43D;&#x43E;&#x432;&#x430;&#x43D;&#x438;&#x435; NULL-&#x443;&#x43A;&#x430;&#x437;&#x430;&#x442;&#x435;&#x43B;&#x435;&#x439;. &#x421;&#x440;&#x435;&#x434;&#x438; &#x434;&#x440;&#x443;&#x433;&#x438;&#x445; &#x43E;&#x441;&#x43E;&#x431;&#x435;&#x43D;&#x43D;&#x43E;&#x441;&#x442;&#x435;&#x439;, &#x438;&#x43C;&#x435;&#x44E;&#x449;&#x438;&#x445; &#x43E;&#x442;&#x43D;&#x43E;&#x448;&#x435;&#x43D;&#x438;&#x435; &#x43A; &#x431;&#x435;&#x437;&#x43E;&#x43F;&#x430;&#x441;&#x43D;&#x43E;&#x441;&#x442;&#x438;, &#x43E;&#x442;&#x43C;&#x435;&#x447;&#x430;&#x435;&#x442;&#x441;&#x44F; &#x43E;&#x442;&#x441;&#x443;&#x442;&#x441;&#x442;&#x432;&#x438;&#x435; raw-&#x442;&#x438;&#x43F;&#x43E;&#x432;, &#x43F;&#x43E;&#x43B;&#x43D;&#x43E;&#x435; &#x441;&#x43E;&#x445;&#x440;&#x430;&#x43D;&#x435;&#x43D;&#x438;&#x435; &#x438;&#x43D;&#x444;&#x43E;&#x440;&#x43C;&#x430;&#x446;&#x438;&#x438; &#x43E; &#x442;&#x438;&#x43F;&#x430;&#x445; &#x432; &#x43F;&#x440;&#x43E;&#x446;&#x435;&#x441;&#x441;&#x435; &#x432;&#x44B;&#x43F;&#x43E;&#x43B;&#x43D;&#x435;&#x43D;&#x438;&#x44F; &#x438; &#x440;&#x435;&#x430;&#x43B;&#x438;&#x437;&#x430;&#x446;&#x438;&#x44F; &#x43C;&#x430;&#x441;&#x441;&#x438;&#x432;&#x43E;&#x432; &#x432; &#x432;&#x438;&#x434;&#x435; <a href="http://confluence.jetbrains.net/display/Kotlin/Basic+types#Basictypes-Arrays">&#x438;&#x43D;&#x432;&#x430;&#x440;&#x438;&#x430;&#x43D;&#x442;&#x430;</a>. &#x418;&#x437; &#x440;&#x430;&#x441;&#x448;&#x438;&#x440;&#x435;&#x43D;&#x43D;&#x44B;&#x445; &#x44F;&#x437;&#x44B;&#x43A;&#x43E;&#x432;&#x44B;&#x445; &#x432;&#x43E;&#x437;&#x43C;&#x43E;&#x436;&#x43D;&#x43E;&#x441;&#x442;&#x435;&#x439; &#x43E;&#x442;&#x43C;&#x435;&#x447;&#x430;&#x435;&#x442;&#x441;&#x44F; &#x43F;&#x43E;&#x434;&#x434;&#x435;&#x440;&#x436;&#x43A;&#x430; <a href="http://ru.wikipedia.org/wiki/%D0%A4%D1%83%D0%BD%D0%BA%D1%86%D0%B8%D1%8F_%D0%B2%D1%8B%D1%81%D1%88%D0%B5%D0%B3%D0%BE_%D0%BF%D0%BE%D1%80%D1%8F%D0%B4%D0%BA%D0%B0">&#x444;&#x443;&#x43D;&#x43A;&#x446;&#x438;&#x439; &#x432;&#x44B;&#x441;&#x448;&#x435;&#x433;&#x43E; &#x43F;&#x43E;&#x440;&#x44F;&#x434;&#x43A;&#x430;</a>, <a href="http://ru.wikipedia.org/wiki/%D0%92%D1%8B%D0%B2%D0%BE%D0%B4_%D1%82%D0%B8%D0%BF%D0%BE%D0%B2">&#x432;&#x44B;&#x432;&#x43E;&#x434;&#x430; &#x442;&#x438;&#x43F;&#x43E;&#x432;</a> &#x437;&#x43D;&#x430;&#x447;&#x435;&#x43D;&#x438;&#x439; &#x43D;&#x430; &#x43E;&#x441;&#x43D;&#x43E;&#x432;&#x430;&#x43D;&#x438;&#x438; &#x432;&#x44B;&#x440;&#x430;&#x436;&#x435;&#x43D;&#x438;&#x44F;, &#x438;&#x441;&#x43F;&#x43E;&#x43B;&#x44C;&#x437;&#x43E;&#x432;&#x430;&#x43D;&#x438;&#x435; &#x443;&#x442;&#x43E;&#x447;&#x43D;&#x44F;&#x44E;&#x449;&#x438;&#x445; &quot;<a href="http://ru.wikipedia.org/wiki/%D0%9F%D1%80%D0%B8%D0%BC%D0%B5%D1%81%D1%8C_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5)">&#x43F;&#x440;&#x438;&#x43C;&#x435;&#x441;&#x435;&#x439;</a>&quot; (mixin) &#x438; <a href="http://ru.wikipedia.org/wiki/%D0%94%D0%B5%D0%BB%D0%B5%D0%B3%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5)">&#x434;&#x435;&#x43B;&#x435;&#x433;&#x438;&#x440;&#x43E;&#x432;&#x430;&#x43D;&#x438;&#x44F;</a>.</p>
]]></description><link>http://www.opennet.ru/opennews/art.shtml?num=43882</link><guid isPermaLink="true">http://www.opennet.ru/opennews/art.shtml?num=43882</guid><category><![CDATA[Kotlin]]></category><category><![CDATA[JVM]]></category><dc:creator><![CDATA[Open Source]]></dc:creator><pubDate>Tue, 16 Feb 2016 08:21:00 GMT</pubDate></item><item><title><![CDATA[JVM Newcomer Kotlin 1.0 is GA]]></title><description><![CDATA[<p>After a long and winding road to development, pragmatic JVM and Android newcomer <a href="http://blog.jetbrains.com/kotlin/2016/02/kotlin-1-0-released-pragmatic-language-for-jvm-and-android/">Kotlin</a> 1.0 is officially GA. The open source progeny of Java IDE supremo JetBrains (it was developed on <a href="https://github.com/JetBrains/kotlin">GitHub</a> under the Apache 2.0 Open-Source license), Kotlin has been cooking since 2010, and as you&rsquo;d expect, runs seamlessly on the company&rsquo;s signature Java IDE, <a href="https://www.voxxed.com/blog/2015/09/partying-with-intellij-idea-dart-java-websocket-and-glassfish/">IntelliJ</a> IDEA.</p>
<p>A key characteristic of Kotlin is its end user focus, and a steadfast effort has been made in its development to ensure features lists are sharp and concise. It&rsquo;s also lightweight and fully interoperable with the Java language, making it a natural fit for mobile development.</p>
<p>Although originally intended to be a contemporary answer to the legacy issues Java brought in its wake, Kotlin could prove an excellent choice for Android developers in 2016 looking for a JVM alternative that reaches beyond the capabilities for version 6 of the platform. And thanks to the kotlin-android-extensions plugin in for the Kotlin compiler, developers can access views in a type-safe fashion without the need for extra user code or runtime libraries.</p>
<p>Moreover, as Antonio Leiva <a href="https://www.voxxed.com/blog/2016/01/kotlin-android-developers/">notes</a>, Kotlin&rsquo;s library is small enough to let developers work without proguard during development. Then there&rsquo;s the not-inconsequential fact that Android Studio (the official Android IDE) was constructed on top of IntelliJ.</p>
<p>Aside from its aptitude for Android development, lead language designer <a href="http://blog.jetbrains.com/kotlin/author/andrey-breslav/">Andrey Breslav</a> highlights that, because Kotlin can run wherever Java runs &ndash; be that server-side applications, mobile applications (Android), or desktop applications, it plays nicely with most of the leading Java ecosystem tools, including things like Maven, Gradle and Ant, GitHub, Slack, and, as of today, officially supports <a href="https://spring.io/blog/2016/02/15/developing-spring-boot-applications-with-kotlin">Spring Boot</a>. And, because you can use libraries interchangeably between Java and Kotlin, you can keep bytecode footprints nice and small.</p>
<p>Breslav comments that, even before its official release, a number of companies have judged Kotlin fit for production, and JetBrains themselves have been utilising the language, along with its compiler and tooling projects, on extensive &ldquo;real-life&rdquo; projects for the past two years. In terms of adoption, over 11,000 people used Kotlin last month, and there are already two books &ndash; <a href="https://www.manning.com/books/kotlin-in-action">Kotlin in Action</a> and <a href="https://leanpub.com/kotlin-for-android-developers">Kotlin for Android Developers</a> &ndash; to get developers going with the language.</p>
<p>Going forward, JetBrains will look to make Kotlin development more transparent by establishing a centralized venue for design proposals and discussions. You can expect standardization efforts to happen in the near future too. Aside from bug fixes, plans for the roadmap ahead include formalised support for JavaScript (at the moment this is strictly experimental), performance improvements to the Kotlin toolchain, and support for generating Java 8 bytecode with things like optimized lambdas.</p>
<p>For a taste of what Kotlin has to offer, its creators recommend giving this online mini-IDE <a href="https://try.kotlinlang.org/">try.kotl.in</a> a whirl and having a go at <a href="http://try.kotlinlang.org/koans">Koans</a> &mdash; a set of introductory problems to guide you through the basics of the language.</p>
<p>To learn more about Kotlin and how it compares to fellow Java-botherer Ceylon, as well as Java itself, we suggest checking out this Devoxx UK 2015 session by Russel Winder:</p>
<p><a href="https://www.youtube.com/watch?v=Q_Z_8HXt68k">https://www.youtube.com/watch?v=Q_Z_8HXt68k</a></p>
]]></description><link>https://www.voxxed.com/blog/2016/02/kotlin/</link><guid isPermaLink="true">https://www.voxxed.com/blog/2016/02/kotlin/</guid><category><![CDATA[Kotlin]]></category><category><![CDATA[JVM,]]></category><dc:creator><![CDATA[Lucy Carey]]></dc:creator><pubDate>Mon, 15 Feb 2016 14:50:00 GMT</pubDate></item><item><title><![CDATA[Developing Spring Boot applications with Kotlin.]]></title><description><![CDATA[<p>Just in time for <a href="http://blog.jetbrains.com/kotlin/2016/02/kotlin-1-0-released-pragmatic-language-for-jvm-and-android/">Kotlin 1.0 release</a>, we are adding support for Kotlin language to <a href="https://start.spring.io/#!language=kotlin">https://start.spring.io</a> in order to make it easier to start new Spring Boot projects with this language.</p>
<p>This blog post is also an opportunity for me to explain why I find this language interesting, to show you a sample project in detail and to give you some tips.</p>
<h2>What is Kotlin?</h2>
<p><a href="https://kotlinlang.org/">Kotlin</a> is a language created by <a href="https://www.jetbrains.com/">JetBrains</a>. It runs on top of the JVM (but not only), it is an object oriented language that includes many ideas from functional programming. I won&rsquo;t go too much in details about all Kotlin features (<a href="https://kotlinlang.org/docs/kotlin-docs.pdf">PDF</a>, <a href="https://kotlinlang.org/docs/reference/">HTML</a>), but I would like to highlight the ones I find the most interesting:</p>
<ul>
<li>Kotlin is a statically typed language, but thanks to its <a href="https://kotlinlang.org/docs/reference/basic-types.html">clever type inference</a>, it allows you to write code as short and expressive as dynamic language with performances close to pure Java projects</li>
<li><a href="https://kotlinlang.org/docs/reference/properties.html#declaring-properties">Properties support</a></li>
<li>Relatively lightweight standard library compared to other languages</li>
<li>Easy to learn: a Java developer can quickly understand most of the language (this <a href="https://kotlinlang.org/docs/reference/comparison-to-java.html">quick comparison to Java</a> is worth to read)</li>
<li><a href="https://kotlinlang.org/docs/reference/java-interop.html">Java interop</a> is a first class concern and great</li>
<li>Perfect for Android development</li>
<li>Built-in immutability and <a href="https://kotlinlang.org/docs/reference/null-safety.html">null safety</a> support</li>
<li>Code is easy to read, efficient to write</li>
<li>Allows to <a href="https://kotlinlang.org/docs/reference/extensions.html">extend existing libraries</a> without having to inherit from the class or use any type of design pattern such as Decorator</li>
<li>No semicolon required ;-)</li>
</ul>
<p>You will find a lot of useful links to improve your Kotlin knowledge in this <a href="http://blog.jetbrains.com/kotlin/2016/01/kotlin-digest-2015/">Kotlin digest 2015</a> blog post. Also have a look to these simple <a href="http://try.kotlinlang.org/koans">Kotlin exercices</a> to have a quick overview of the language.</p>
<h2>A sample Spring Boot + Kotlin project</h2>
<p>Kotlin has been designed to play well with the Java ecosystem, and it seems to me that it shares the same pragmatic, innovative and opinionated mindset as Spring Boot, so they play well together. You can have a look at this simple <a href="https://github.com/sdeleuze/spring-boot-kotlin-demo">Spring Boot + Spring Data JPA Kotlin project</a> to see more concretely what it looks like.</p>
<p>Kotlin allows to write (and read) your domain model easily thanks to <a href="https://kotlinlang.org/docs/reference/data-classes.html">data classes</a>. The compiler automatically derives the following members from all properties declared in the primary constructor:</p>
<ul>
<li><code>equals()</code> / <code>hashCode()</code> pair</li>
<li><code>toString()</code> of the form &ldquo;Customer(firstName=Foo, lastName=Bar, id=42)&rdquo;</li>
<li><code>componentN()</code> functions corresponding to the properties in their order or declaration</li>
<li><code>copy()</code> function</li>
</ul>
<p>You can see that Kotlin allows you to specify parameter default values, and types are declared after the name of the variable/parameter:</p>
<pre><code class="hljs language-kotlin">@Entity
data <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Customer</span></span>(
	<span class="hljs-variable"><span class="hljs-keyword">var</span> firstName</span>: String = <span class="hljs-string">""</span>,
	<span class="hljs-variable"><span class="hljs-keyword">var</span> lastName</span>: String = <span class="hljs-string">""</span>,
	@Id @GeneratedValue(strategy = GenerationType.AUTO)
	<span class="hljs-variable"><span class="hljs-keyword">var</span> id</span>: <span class="hljs-keyword">Long</span> = <span class="hljs-number">0</span>
)</code></pre>
<p>The Spring MVC REST controller you can see below is using constructor level injection, and default visibility in Kotlin is <code>public</code> so no need to specify it. When a function returns a single expression, the curly braces can be omitted and the body is specified after a <code>=</code> symbol. It is even better since the return type can be inferred by the compiler.</p>
<pre><code class="hljs language-kotlin">@RestController
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomerController</span> @<span class="hljs-title">Autowired</span> <span class="hljs-title">constructor</span></span>(<span class="hljs-variable"><span class="hljs-keyword">val</span> repository</span>:CustomerRepository) {

	@RequestMapping(<span class="hljs-string">"/"</span>)
	<span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">findAll</span><span class="hljs-params">()</span> = repository.<span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>


	@RequestMapping(<span class="hljs-string">"/{name}"</span>)
	<span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">findByLastName</span><span class="hljs-params">(@PathVariable name:<span class="hljs-type">String</span>)</span></span>
		= repository.findByLastName(name)
}</code></pre>
<p>The Spring Data repository is self explanatory:</p>
<pre><code class="hljs language-kotlin">interface CustomerRepository : CrudRepository<span class="hljs-type">&lt;Customer, Long&gt;</span> {
	<span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">findByLastName</span><span class="hljs-params">(name: <span class="hljs-type">String</span>)</span>: List<span class="hljs-type">&lt;Customer&gt;</span></span>
}</code></pre>
<p>Since Kotlin supports top-level functions, you can declare your application as simple as:</p>
<pre><code class="hljs language-kotlin">@SpringBootApplication
<span class="hljs-keyword">open</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> </span>{

	@Bean
	<span class="hljs-keyword">open</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">init</span><span class="hljs-params">(repository: <span class="hljs-type">CustomerRepository</span>)</span> = CommandLineRunner {</span>
		repository.save(Customer(<span class="hljs-string">"Jack"</span>, <span class="hljs-string">"Bauer"</span>))
		repository.save(Customer(<span class="hljs-string">"Chloe"</span>, <span class="hljs-string">"O'Brian"</span>))
		repository.save(Customer(<span class="hljs-string">"Kim"</span>, <span class="hljs-string">"Bauer"</span>))
		repository.save(Customer(<span class="hljs-string">"David"</span>, <span class="hljs-string">"Palmer"</span>))
		repository.save(Customer(<span class="hljs-string">"Michelle"</span>, <span class="hljs-string">"Dessler"</span>))
	}
}

<span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">(args: <span class="hljs-type">Array&lt;String&gt;</span>)</span> {</span>
	SpringApplication.run(Application::<span class="hljs-class"><span class="hljs-keyword">class</span>.<span class="hljs-title">java</span>, <span class="hljs-type">*args)</span></span>
}</code></pre>
<p>You need to mark <code>@Configuration</code> classes, some others like most <code>@Component</code> ones and <code>@Bean</code> methods as <code>open</code> because they cannot be <code>final</code> in Spring due to proxy usage (classes and methods in Kotlin are <code>final</code> by default without the <code>open</code> modifier).</p>
<h2>Additional tips</h2>
<p>Even if Spring Boot and Kotlin work pretty well together, these additional tips are worth to know.</p>
<h3>Property injection</h3>
<p>We have seen previously how to do constructor injection, since that&rsquo;s the <a href="http://olivergierke.de/2013/11/why-field-injection-is-evil/">recommended approach</a> (especially with Kotlin). If you have to perform property injection, you will have to use <a href="https://kotlinlang.org/docs/reference/properties.html#late-initialized-properties">late-initialized properties</a> because normally, raw properties declared as having a non-null type must be initialized in the constructor.</p>
<pre><code class="hljs language-kotlin">@RestController
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomerController</span> </span>{

	@Autowired
	lateinit <span class="hljs-variable"><span class="hljs-keyword">var</span> repository</span>:CustomerRepository

	<span class="hljs-comment">// ...</span>
}</code></pre>
<h3>Property placeholders</h3>
<p><code>$</code> is used for <a href="https://kotlinlang.org/docs/reference/basic-types.html#string-templates">String interpolation</a> in Kotlin, so you should escape it when using property placeholders: <code>@Value(&quot;\${some.property}&quot;)</code>. As an alternative you can also use <code>@ConfigurationProperties</code> instead, see <a href="http://stackoverflow.com/a/33883230/1092077">this Stack Overflow</a> answer for more details.</p>
<h3>Array annotation attribute</h3>
<p>Unlike Java, Kotlin does not allow to specify array annotation attribute as a single value, so be aware that you will have to write <code>@RequestMapping(method = arrayOf(RequestMethod.GET))</code> or <code>@EnableAutoConfiguration(exclude = arrayOf(Foo::class))</code>.</p>
<p>It will be possible to use a shorter syntax with upcoming Spring Framework 4.3 composed annotations like <code>@GetMapping</code>, see <a href="https://jira.spring.io/browse/SPR-13992">SPR-13992</a> for more details.</p>
<h3>Jackson Kotlin Module</h3>
<p>If you are using Jackson you are likely to want to add <code>com.fasterxml.jackson.module:jackson-module-kotlin</code> dependency in order to allow it to deal with data classes with no default constructor or with Kotlin collections.</p>
<p>In addition to the dependency, you need to register it in Jackson <code>ObjectMapper</code>:</p>
<pre><code class="hljs language-kotlin">@SpringBootApplication
<span class="hljs-keyword">open</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> </span>{

	@Bean
	<span class="hljs-keyword">open</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">objectMapperBuilder</span><span class="hljs-params">()</span>: Jackson2ObjectMapperBuilder</span>
	    = Jackson2ObjectMapperBuilder().modulesToInstall(KotlinModule())

	<span class="hljs-comment">// ...</span>
}</code></pre>
<h3>Experiment with the Java to Kotlin converter</h3>
<p>Last tip, the Java to Kotlin converter available in IntelliJ IDEA (Menu Code -&gt; Convert Java file to Kotlin file) is quite useful when you can&rsquo;t figure out how to write something in Kotlin. So do not hesitate to write something in Java and use it to find the Kotlin counterpart. This <a href="https://kotlinlang.org/docs/reference/comparison-to-java.html">comparison to Java documentation</a> can also provide some help.</p>
<h2>Feedbacks</h2>
<p>We are interested by your feedbacks about developing Spring applications with Kotlin. This blog post is just an introduction, there is much more to say especially about using Spring Boot with more Kotlin idiomatic code like with <a href="https://github.com/JetBrains/Exposed">Exposed</a> SQL library, so stay tuned ...</p>
]]></description><link>https://spring.io/blog/2016/02/15/developing-spring-boot-applications-with-kotlin</link><guid isPermaLink="true">https://spring.io/blog/2016/02/15/developing-spring-boot-applications-with-kotlin</guid><category><![CDATA[Kotlin]]></category><category><![CDATA[Spring]]></category><dc:creator><![CDATA[Sébastien Deleuze]]></dc:creator><pubDate>Mon, 15 Feb 2016 09:58:00 GMT</pubDate></item><item><title><![CDATA[Kotlin 1.0 Released: Pragmatic Language for JVM and Android]]></title><description><![CDATA[<p>This is it. 1.0 is here!</p>
<p>It&rsquo;s been a long and exciting road but we&rsquo;ve finally reached the first big 1.0, and we&rsquo;re celebrating the release by also presenting you with the new logo:</p>
<p><img src="http://i0.wp.com/blog.jetbrains.com/kotlin/files/2016/02/1_0_Banner.png?resize=640%252C320" alt="Kotlin logo"></p>
<p>See discussions on <a href="https://www.reddit.com/r/programming/comments/45wcnd/kotlin_10_released_pragmatic_language_for_jvm_and/">Reddit</a> and <a href="https://news.ycombinator.com/item?id=11103087">Hacker News</a></p>
<h2>What is Kotlin?</h2>
<p>Kotlin is a pragmatic programming language for JVM and Android that combines OO and functional features and is focused on <strong>interoperability</strong>, <strong>safety</strong>, <strong>clarity</strong> and <strong>tooling</strong> support.</p>
<p>Being a general-purpose language, Kotlin <strong>works everywhere where Java works</strong>: server-side applications, mobile applications (Android), desktop applications. It works with all major tools and services such as</p>
<ul>
<li>IntelliJ IDEA, Android Studio and Eclipse</li>
<li>Maven, Gradle and Ant</li>
<li>Spring Boot (Kotlin support released today!)</li>
<li>GitHub, Slack and even Minecraft :)</li>
</ul>
<p>One of the key focuses of Kotlin has been interoperability and seamless support for <strong>mixed Java+Kotlin projects</strong>, making adoption easier leading to less boilerplate code and more type-safety. Additionally, Kotlin has an <strong>extensive standard library</strong> that makes everyday tasks easy and smooth while keeping the bytecode footprint <a href="http://www.methodscount.com/?lib=org.jetbrains.kotlin%253Akotlin-stdlib%253A1.0.0-rc-1036">low</a>. Of course, <strong>any Java library can be used in Kotlin</strong>, too; and vice versa.&#x2028;</p>
<h2>What does pragmatic mean?</h2>
<p>Understanding one&rsquo;s core values is crucial for any long-running project. If I were to choose one word to describe Kotlin&rsquo;s design, it would be <strong>pragmatism</strong>. This is why, early on, we said that Kotlin is not so much about invention or research. We ended up inventing quite a few things, but this was never the point of the project. Of course we were building a <strong>type system that prevents bugs</strong>, and <strong>abstraction mechanisms that facilitate code reuse</strong>, as anybody in our position would. But our (pragmatic) way of doing it was through <strong>focusing on use cases</strong> to make the language a <strong>good tool</strong>.</p>
<p>In particular, this approach lead us immediately to the notion that <strong>interoperability with existing code and infrastructure is crucial</strong>. Re-writing the world the right way, all from scratch &mdash; who never wished to? I did, quite a few times :) And Kotlin would have been a whole lot easier to design and develop if not for the Java interop, Maven integration, Android compatibility! It would definitely be more elegant in many ways. But elegance, though highly appreciated, is not the primary goal here, <strong>the primary goal is being useful</strong>. And the less our users have to re-learn, re-invent, re-do from scratch, the more they can re-use, the better.</p>
<p>&mdash; <strong><em>So, why doesn&rsquo;t Kotlin have its own package manager, or its own build system?</em></strong>
&mdash; Because there&rsquo;s already Maven and Gradle, and re-using their huge number of plugins is crucial for many projects.
&mdash; <strong><em>Why did we invest a lot of time and effort into making JDK-compatible collection interfaces, when it was so much easier to just redesign collections from scratch?</em></strong>
&mdash; Because tons and tons of Java code work with JDK collections, and converting data on the boundary would be a pain.
&mdash; <strong><em>Why does Kotlin support Java 6 byte code?</em></strong>
&mdash; Because many people are still running Java 6 (Android, most notably, but not only Android).</p>
<p>For us pragmatism is about <strong>creating user experience</strong>, not a language or a library alone. Many of the language design decisions were made under constraints like &ldquo;Won&rsquo;t this impede incremental compilation?&rdquo;, &ldquo;What if this increases APK method counts?&rdquo;, &ldquo;How will the IDE highlight this as-you-type?&rdquo;, and many more like these. As a result, we are proud of our <strong>tooling as well as the language</strong>.</p>
<h2>Is it mature enough and ready for production?</h2>
<p>Yes. And it has been for quite some time. At JetBrains, we&rsquo;ve not only been implementing the compiler and tooling but have also been using Kotlin <strong>in real-life projects</strong> on a rather extensive scale over the last two years. In addition to JetBrains, there are quite a few companies that have been using Kotlin <strong>in production</strong> for some time now.</p>
<p>In fact, one of the reasons it took us a long time to reach 1.0 was because we paid extra attention to validating our design decisions in practice. This was and is necessary, because moving forward the compiler will be <strong>backwards compatible</strong> and future versions of Kotlin must not break existing code. As such, whatever choices we&rsquo;ve made we need to stick with them.</p>
<p>Reaching this milestone was something we couldn&rsquo;t have done without the valuable <strong>help of early adopters</strong>. We want to thank each any every one of you for your bravery, energy and enthusiasm!</p>
<h2>Who&rsquo;s behind Kotlin?</h2>
<p>First and foremost, Kotlin is an Open Source language</p>
<ul>
<li>Developed on <a href="https://github.com/JetBrains/kotlin">GitHub</a> <strong>under Apache 2.0 Open-Source license</strong>;</li>
<li>With <strong>over 100 contributors</strong> to date.</li>
</ul>
<p>JetBrains is the main backer of Kotlin at the moment: we have invested a lot of effort into developing it and <strong>we are committed to the project for the long run</strong>. We wrote it out of our own need to use in our own products. And we&rsquo;re happy to say that to date, <strong>close to 10 JetBrains products</strong>, which include IntelliJ IDEA, <a href="https://blog.jetbrains.com/dotnet/2016/01/13/project-rider-a-csharp-ide/">JetBrains Rider</a>, JetBrains Account &amp; E-Shop, YouTrack as well as some of our smaller IDE&rsquo;s and some internal projects are using Kotlin. So <strong>it&rsquo;s here to stay</strong>!</p>
<p>Since 2012 we kept Kotlin&rsquo;s development very open: talking to the community all the time, gathering and addressing lots of feedback.</p>
<p>Moving forward we are planning to set up a centralized venue for design proposals and discussions, to make the process even more visible and organized. Standardization efforts have not been started for Kotlin so far, but we realize that we&rsquo;ll need to do it rather sooner than later.</p>
<p>Language design and overall steering of the project is done by the team employed at JetBrains. We currently have <strong>over 20 people working full time</strong> on Kotlin, which also yet another testament to JetBrains&rsquo; commitment to Kotlin.</p>
<h2>The numbers</h2>
<p>Let&rsquo;s take a look at some numbers:</p>
<ul>
<li><strong>11K+</strong> people were using Kotlin last month and near <strong>5K</strong> last week alone;</li>
<li><strong>Hundreds</strong> of <a href="http://stackoverflow.com/questions/tagged/kotlin">StackOverflow answers</a>;</li>
<li><strong>Two books</strong>: <a href="https://www.manning.com/books/kotlin-in-action">Kotlin in Action</a> and <a href="https://leanpub.com/kotlin-for-android-developers">Kotlin for Android Developers</a>;</li>
<li><strong>About 1400 people</strong> on <a href="http://kotlinlang.slack.com/">Slack</a> (<a href="http://kotlinslackin.herokuapp.com/">get an invite</a>);</li>
<li><strong>Over 500K</strong> lines of Kotlin code in projects such as IntelliJ IDEA and Rider.</li>
</ul>
<p>Talking about lines of code, the number of these in open repositories on GitHub is <strong>growing exponentially over time</strong> (JetBrains&rsquo; projects excluded):</p>
<p><img src="http://blog.jetbrains.com/kotlin/files/2016/02/KotlinAdoption.gif" alt="Kotlin GitHub Adoption"></p>
<p>And of course we have a growing list of <strong>companies using Kotlin</strong> including Prezi and Expedia. By the way, if you&rsquo;re using Kotlin, make sure you send us a <a href="https://github.com/JetBrains/kotlin-web-site/blob/master/_data/companies-using-kotlin.yml">Pull Request</a>.</p>
<h2>The upcoming roadmap</h2>
<p>As of 1.0, we are committed to long-term <strong>backward compatibility</strong> of the language and its standard library (<code>kotlin-stdlib</code>):</p>
<ul>
<li><strong>a newer compiler will work with older binaries</strong> (but older compilers may not understand newer binaries, like javac 1.6 can&rsquo;t read classes compiled by javac 1.8);</li>
<li><strong>older binaries will keep working with newer binaries at runtime</strong> (newer code may require newer dependencies, though).</li>
</ul>
<p>This applies to the JVM/Android support only. The JavaScript support remains experimental for now and will have its own release later on.</p>
<p>As for the plans, our nearest goals are (apart from bug fixes):</p>
<p>Constant performance improvements for the Kotlin toolchain (this includes, for example, incremental compilation in Gradle, that is in the works now);
JavaScript support (including cross-compilation into both JVM and JS where possible);
Support generating Java 8 byte code with optimized lambdas, etc (Java 6 will be actively supported as long as Android users need it).
Tooling updates and bug fixes will be released as incremental updates, i.e. 1.0.X. Bigger changes will first go though an Early Access Program (EAP) and then will be released as 1.1.</p>
<h2>How to start</h2>
<p>The easiest way to play with the language is through its <strong>online mini-IDE</strong>: <a href="https://try.kotlinlang.org/">try.kotl.in</a>, including <a href="http://try.kotlinlang.org/koans">Koans</a> &mdash; a set of introductory problems which <strong>guide you through the basics</strong> of the language.</p>
<p>To use Kotlin on your machine (and Koans can be completed <a href="https://kotlinlang.org/docs/tutorials/koans.html">offline</a> as well):</p>
<ul>
<li><strong>IntelliJ IDEA</strong> (<a href="https://www.jetbrains.com/idea/download/">Ultimate or Community</a>): just create a Kotlin project or a Kotlin file in a Java project;</li>
<li><strong>Android Studio</strong>: install the plugin through <strong><em>Plugin Manager</em></strong>;</li>
<li><strong>Eclipse</strong>: install the plugin through <a href="https://marketplace.eclipse.org/content/kotlin-plugin-eclipse">Marketplace</a>.</li>
</ul>
<p>NOTE: If you are running an older version, you may need to update your Kotlin plugin to 1.0.</p>
<p>To get up to speed with concepts, language <strong>docs and tutorials</strong> are available from the <a href="https://kotlinlang.org/">official web site</a>. Great articles and presentations given by members of our community can be found in the <a href="http://blog.jetbrains.com/kotlin/2016/01/kotlin-digest-2015/">Digest of 2015</a>.</p>
<p>If you&rsquo;re introducing Kotlin to your Java project, you can make use of the <strong>Java-to-Kotlin converter</strong> built into the IDE, helping migration easier class by class.</p>
<p>Last but not least, make sure you join the discussions on our <a href="https://devnet.jetbrains.com/community/kotlin">Forum</a> or <a href="http://kotlinslackin.herokuapp.com/">Slack</a>.</p>
<p>Once again, <strong>we want to thank everyone</strong>. We couldn&rsquo;t have done this without the community.</p>
<p>Have a nice Kotlin! <strong>Now</strong> :)</p>
<p>P.S. See discussions on <a href="https://www.reddit.com/r/programming/comments/45wcnd/kotlin_10_released_pragmatic_language_for_jvm_and/">Reddit</a> and <a href="https://news.ycombinator.com/item?id=11103087">Hacker News</a></p>
]]></description><link>http://blog.jetbrains.com/kotlin/2016/02/kotlin-1-0-released-pragmatic-language-for-jvm-and-android/</link><guid isPermaLink="true">http://blog.jetbrains.com/kotlin/2016/02/kotlin-1-0-released-pragmatic-language-for-jvm-and-android/</guid><category><![CDATA[JetBrains]]></category><category><![CDATA[Kotlin]]></category><dc:creator><![CDATA[Andrey Breslav]]></dc:creator><pubDate>Mon, 15 Feb 2016 09:57:00 GMT</pubDate></item><item><title><![CDATA[[RU] Podcast Разбор Полетов: Episode 102 — Kotlin, тесты и здоровый сон.]]></title><description><![CDATA[<h2>&#x41C;&#x435;&#x440;&#x43E;&#x43F;&#x440;&#x438;&#x44F;&#x442;&#x438;&#x44F;</h2>
<ol>
<li><a href="http://jbreak.ru/">http://jbreak.ru/</a></li>
<li><a href="https://fosdem.org/2016/">https://fosdem.org/2016/</a></li>
</ol>
<h2>&#x422;&#x435;&#x43C;&#x43A;&#x438;</h2>
<ol>
<li>Kotlin 1.0 RC - &#x424;&#x438;&#x43B;&#x43E;&#x441;&#x43E;&#x444;&#x438;&#x44F; Kotlin</li>
<li>JavaTest, TCK, JTreg &#x438; &#x435;&#x433;&#x43E; &#x441;&#x432;&#x44F;&#x437;&#x44C; &#x441; TestNG/JUnit &#x438; &#x43F;&#x440;&#x43E;&#x447;&#x438;&#x435; &#x432;&#x43E;&#x43F;&#x440;&#x43E;&#x441;&#x44B; &#x432; &#x437;&#x43D;&#x430;&#x442;&#x43E;&#x43A;&#x443; &#x43F;&#x43E; &#x44D;&#x442;&#x438;&#x43C; &#x432;&#x43E;&#x43F;&#x440;&#x43E;&#x441;&#x430;&#x43C;</li>
<li>&#x427;&#x442;&#x43E; &#x43D;&#x443;&#x436;&#x43D;&#x43E; &#x435;&#x441;&#x442;&#x44C; &#x438; &#x441;&#x43A;&#x43E;&#x43B;&#x44C;&#x43A;&#x43E; &#x43D;&#x443;&#x436;&#x43D;&#x43E; &#x441;&#x43F;&#x430;&#x442;&#x44C;, &#x447;&#x442;&#x43E; &#x431;&#x44B; &#x431;&#x44B;&#x442;&#x44C; &#x431;&#x435;&#x43B;&#x44B;&#x43C; &#x440;&#x443;&#x441;&#x441;&#x43A;&#x438;&#x43C; &#x43C;&#x443;&#x436;&#x447;&#x438;&#x43D;&#x43E;&#x439; &#x432; &#x410;&#x43C;&#x435;&#x440;&#x438;&#x43A;&#x435;</li>
</ol>
<h2>&#x41F;&#x43E;&#x43B;&#x435;&#x437;&#x43D;&#x44F;&#x448;&#x43A;&#x438;</h2>
<ol>
<li>&#x41A;&#x43B;&#x438;&#x435;&#x43D;&#x442; &#x434;&#x43B;&#x44F; Redis - <a href="https://github.com/luin/medis">Medis</a></li>
<li><a href="http://javaby.github.io/awesome-kotlin/">http://javaby.github.io/awesome-kotlin/</a> or <a href="http://kotlin.link/">http://kotlin.link/</a></li>
<li><a href="https://github.com/Originate/git-town">https://github.com/Originate/git-town</a></li>
<li><a href="https://libraries.io/">https://libraries.io/</a></li>
</ol>
]]></description><link>http://razbor-poletov.com/2016/02/episode-102.html</link><guid isPermaLink="true">http://razbor-poletov.com/2016/02/episode-102.html</guid><category><![CDATA[Kotlin]]></category><category><![CDATA[Podcast]]></category><dc:creator><![CDATA[Dmitry Jemerov, Viktor Gamov, Alexey Abashev, Anton Arphipov,  Dmitry Churbanov, Anton Arhipov]]></dc:creator><pubDate>Thu, 04 Feb 2016 18:54:00 GMT</pubDate><enclosure url="http://traffic.libsyn.com/razborpoletov/razbor_102.mp3" length="70319173" type="audio/mpeg"/></item><item><title><![CDATA[Kotlin & Android: A Brass Tacks Experiment, Part 4]]></title><description><![CDATA[<p><img src="https://cdn-images-1.medium.com/max/800/1*UN-S8ELMC2kpHf4tJKfbLQ.png" alt="Header Picture"></p>
<p><em>Disclaimer: I am a Google employee, but the views expressed in this article are not those of my employer.</em></p>
<h2>Kotlin &amp; Android: A Brass Tacks Experiment, Part 4</h2>
<p>Welcome to part 4 in this a series! If you missed <a href="https://medium.com/p/kotlin-android-a-brass-tacks-experiment-part-2-c67661cfdf5f">part 2</a> and <a href="https://medium.com/p/kotlin-android-a-brass-tacks-experiment-part-3-84e65d567a37">part 3</a>, consider jumping back to those for a minute to see where we are in this journey to learn what the Kotlin&reg; language can uniquely offer for Android development.</p>
<p>At this point, we have a pair of functions that we can use to succinctly express the creation of an entire Android view hierarchy in Kotlin code instead of the usual XML resources. Kotlin&rsquo;s <em>type-safe builder</em> pattern is really shining here! However, in practice, there are still some rough edges with this scheme. Most notably, Android developers are used to having some special expressions in XML for certain Android concepts, such as sizes of Views measured in density independent pixels. This is super easy in XML and super tiresome in code!</p>
<p>Here&rsquo;s an example of a tiresome way to set the maxWidth property of a TextView to 120dp using our new v function:</p>
<pre><code class="hljs language-kotlin"><span class="hljs-variable"><span class="hljs-keyword">val</span> view</span> = v<span class="hljs-type">&lt;TextView&gt;</span>(context) {
    <span class="hljs-comment">// ugly!</span>
    maxWidth = TypedValue.applyDimension(
        TypedValue.COMPLEX_UNIT_DIP, <span class="hljs-number">120</span>, context.resources.displayMetrics).toInt()
}</code></pre>
<p><a href="https://gist.github.com/CodingDoug/abe3765f9fe641871ede">gist</a></p>
<p>Contrast that to XML layouts, where you&rsquo;d simply say:</p>
<pre><code class="hljs language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">TextView</span> <span class="hljs-attr">android:maxWidith</span>=<span class="hljs-string">"120dp"</span> /&gt;</span></code></pre>
<p><a href="https://gist.github.com/CodingDoug/c239a76530670537ce6b">gist</a></p>
<p>Bah! We just lost all the convenience that our v functions were trying to gain!</p>
<h3>We need an abbreviated way to convert dp to px.</h3>
<p>What I&rsquo;d like is a function to provide shortened syntax for specifying pixel measurements in other units. Here&rsquo;s what I want to say instead of the above mess:</p>
<pre><code class="hljs language-kotlin"><span class="hljs-variable"><span class="hljs-keyword">val</span> view</span> = v<span class="hljs-type">&lt;TextView&gt;</span>(context) {
    <span class="hljs-comment">// simpler way to set maxWidth to 120dp</span>
    maxWidth = dp_i(<span class="hljs-number">120</span>)
}</code></pre>
<p><a href="https://gist.github.com/CodingDoug/cef8e7f5fe6324ff6436">gist</a></p>
<p>What I&rsquo;m proposing here is a function that takes a value measured in dp and returns the value converted to px for the current device. Why call the function &ldquo;dp_i&rdquo; and not just &ldquo;dp&rdquo;? Sometimes Android wants to take pixel measurements as a floating point number and sometimes as an integer. I don&rsquo;t want to manually cast the return value (still too many more characters), so I&rsquo;ll just make one function for of each type, &ldquo;dp_i&rdquo; and &ldquo;dp_f&rdquo;.</p>
<p>But there&rsquo;s a wrinkle here. If you look back at the full code that computes the dp value, it requires a Context to operate. I don&rsquo;t want to have to pass a Context as another argument to dp_i every time I call it. So I&rsquo;m going to use a feature of Kotlin called <a href="https://kotlinlang.org/docs/reference/extensions.html">extension functions</a> to get the brevity I prefer.</p>
<p>Let&rsquo;s jump right into the code. Written as extension functions, here&rsquo;s what dp_i and dp_f look like:</p>
<pre><code class="hljs language-kotlin"><span class="hljs-keyword">import</span> android.view.View

<span class="hljs-function"><span class="hljs-keyword">fun</span> View.<span class="hljs-title">dp_f</span><span class="hljs-params">(dp: <span class="hljs-type">Float</span>)</span>: <span class="hljs-keyword">Float</span> {</span>
    <span class="hljs-keyword">return</span> TypedValue.applyDimension(
        TypedValue.COMPLEX_UNIT_DIP, dp, context.resources.displayMetrics)
}

<span class="hljs-function"><span class="hljs-keyword">fun</span> View.<span class="hljs-title">dp_i</span><span class="hljs-params">(dp: <span class="hljs-type">Float</span>)</span>: <span class="hljs-keyword">Int</span> {</span>
    <span class="hljs-keyword">return</span> dp_f(dp).toInt()
}</code></pre>
<p><a href="https://gist.github.com/CodingDoug/489045d5a92be732dec9">gist</a></p>
<h3>How does an extension function work?</h3>
<p>The first thing to notice in the above code is the apparent name of the functions. You might have expected to see just &ldquo;dp_f&rdquo; for the first function, but instead we have &ldquo;View.dp_f&rdquo;. This is a special syntax in Kotlin for extension functions. There is a dot between a class name (here, android.view.View) and the name of the function to define. What we did here was tell Kotlin to augment the View class with a new two new methods called &ldquo;dp_f&rdquo; and &ldquo;dp_i&rdquo;. There&rsquo;s a couple things you get with extension functions like these.</p>
<p><strong>First, code in the body of the extension functions can act like a member of View by accessing its members and methods (but only of &ldquo;public&rdquo; and &ldquo;internal&rdquo; visibility)</strong>. This means that dp_f can use the View&rsquo;s Context reference as exposed by the synthetic property called &ldquo;context&rdquo;. Now we don&rsquo;t have to pass a Context as a parameter since it comes implicitly with the View.</p>
<p><strong>Second, other code that imports these extension functions can call them as if they&rsquo;re normal member methods on instances of View objects</strong>. This means that our v function&rsquo;s lambda with receiver argument of type View can call these methods similarly to ordinary functions, implicitly using the receiver View object reference. So you can say &ldquo;maxWidth = dp_i(120)&rdquo; in the lambda, and Kotlin will recognize that you want to call the dp_i function on the View type receiver object.</p>
<p><strong>One important thing to know here is that Kotlin doesn&rsquo;t actually make changes to a class definition when defining an extension function</strong>. A class will always be its own complete unit after it&rsquo;s been loaded by a program, so we can only use extension functions to add code around it. Also, the existing methods on View also can&rsquo;t reach back into and extension function, because it&rsquo;s not a real member defined with the class.</p>
<p>The upshot of these points, for this experiment, is that we now have convenient functions for converting dp to px in our v function lambdas!</p>
<p><strong>We&rsquo;re not stopping here! How about another shortcut using extension functions?</strong></p>
<p>We&rsquo;ve seen that you can do tricky things with extension functions to make some kinds of functions more convenient to use. Let&rsquo;s continue with that thought to tighten up our v functions.</p>
<p>Currently, we have these two function signatures, the first for building the root view using a Context and the second for creating nested child views in a parent view:</p>
<pre><code class="hljs language-kotlin"><span class="hljs-keyword">inline</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-type">&lt;<span class="hljs-keyword">reified</span> TV : View&gt;</span> <span class="hljs-title">v</span><span class="hljs-params">(context: <span class="hljs-type">Context, init: TV.(</span>)</span> -&gt; <span class="hljs-keyword">Unit</span>) : TV</span>

<span class="hljs-keyword">inline</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-type">&lt;<span class="hljs-keyword">reified</span> TV : View&gt;</span> <span class="hljs-title">v</span><span class="hljs-params">(parent: <span class="hljs-type">ViewGroup, init: TV.(</span>)</span> -&gt; <span class="hljs-keyword">Unit</span>) : TV</span></code></pre>
<p><a href="https://gist.github.com/CodingDoug/c91ef8277e3edae1be6e">gist</a></p>
<p>It would be nice if we didn&rsquo;t have to pass the Context or ViewGroup as the first parameter. With extension functions, we achieve this just like we did above when avoiding passing a Context to dp_f. Here&rsquo;s a re-implementation of both functions as extension functions, with the commented out lines showing the original code for v above the newly modified lines:</p>
<pre><code class="hljs language-kotlin"><span class="hljs-comment">//inline fun &lt;reified TV : View&gt; v(context: Context, init: TV.() -&gt; Unit) : TV {</span>
<span class="hljs-keyword">inline</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-type">&lt;<span class="hljs-keyword">reified</span> TV : View&gt;</span> Context.<span class="hljs-title">v</span><span class="hljs-params">(init: <span class="hljs-type">TV.(</span>)</span> -&gt; <span class="hljs-keyword">Unit</span>) : TV {</span>
    <span class="hljs-variable"><span class="hljs-keyword">val</span> constr</span> = TV::<span class="hljs-class"><span class="hljs-keyword">class</span>.<span class="hljs-title">java</span>.<span class="hljs-title">getConstructor</span></span>(Context::<span class="hljs-class"><span class="hljs-keyword">class</span>.<span class="hljs-title">java</span>)</span>

 <span class="hljs-comment">// val view = constr.newInstance(context)</span>
    <span class="hljs-variable"><span class="hljs-keyword">val</span> view</span> = constr.newInstance(this)

    view.init()
    <span class="hljs-keyword">return</span> view
}

<span class="hljs-comment">//inline fun &lt;reified TV : View&gt; v(parent: ViewGroup, init: TV.() -&gt; Unit) : TV {</span>
<span class="hljs-keyword">inline</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-type">&lt;<span class="hljs-keyword">reified</span> TV : View&gt;</span> ViewGroup.<span class="hljs-title">v</span><span class="hljs-params">(init: <span class="hljs-type">TV.(</span>)</span> -&gt; <span class="hljs-keyword">Unit</span>) : TV {</span>

    <span class="hljs-variable"><span class="hljs-keyword">val</span> constr</span> = TV::<span class="hljs-class"><span class="hljs-keyword">class</span>.<span class="hljs-title">java</span>.<span class="hljs-title">getConstructor</span></span>(Context::<span class="hljs-class"><span class="hljs-keyword">class</span>.<span class="hljs-title">java</span>)</span>

 <span class="hljs-comment">// val view = constr.newInstance(parent.context)</span>
    <span class="hljs-variable"><span class="hljs-keyword">val</span> view</span> = constr.newInstance(context)

    parent.addView(view)
    view.init()
    <span class="hljs-keyword">return</span> view
}</code></pre>
<p><a href="https://gist.github.com/CodingDoug/43d17d44459805e51072">gist</a></p>
<p>You can see that we&rsquo;re removing the first argument to each function (Context and ViewGroup), and instead, expecting those references to come from the instance of the class they are extending. The functions now have just a single argument&#x200A;&mdash;&#x200A;the lambda with receiver that modifies the created View.</p>
<p>With these modified functions, if we&rsquo;re coding inside an Activity (which is a subclass of Context), we refer to v as a member of the Activity object. We can take advantage of this to build nested views even easier like this:</p>
<pre><code class="hljs language-kotlin">v<span class="hljs-type">&lt;LinearLayout&gt;</span> {
    layoutParams = LayoutParams(WRAP_CONTENT, WRAP_CONTENT)
    orientation = VERTICAL

    v<span class="hljs-type">&lt;TextView&gt;</span> {
        layoutParams = LayoutParams(WRAP_CONTENT, WRAP_CONTENT)
        text = <span class="hljs-string">"Hello"</span>
    }
    v<span class="hljs-type">&lt;TextView&gt;</span> {
        layoutParams = LayoutParams(WRAP_CONTENT, WRAP_CONTENT)
        text = <span class="hljs-string">"World"</span>
    }
}</code></pre>
<p><a href="https://gist.github.com/CodingDoug/3961d2ccc55376cf1274">gist</a></p>
<p>The invocations of v don&rsquo;t even look like function calls because we no longer need parenthesis at all. If you recall from <a href="https://medium.com/@CodingDoug/kotlin-android-a-brass-tacks-experiment-part-2-c67661cfdf5f">part 2 in this series</a>, if the last argument to a function is a lambda, you can place it after the parenthesis. And in this case, when there&rsquo;s only one argument, you don&rsquo;t need the parenthesis at all!</p>
<p>Kotlin&rsquo;s extension functions have just gone a long way toward helping us express an Android view hierarchy in a very readable and succinct way in code. However, there&rsquo;s still some more problem spots that could use some attention. For example, lets take this code that assigns 16dp of left padding to a TextView:</p>
<pre><code class="hljs language-kotlin">v<span class="hljs-type">&lt;TextView&gt;</span> {
    layoutParams = LayoutParams(WRAP_CONTENT, WRAP_CONTENT)
    setPadding(dp_i(<span class="hljs-number">16</span>), <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)
    text = <span class="hljs-string">"Hello"</span>
}</code></pre>
<p><a href="https://gist.github.com/CodingDoug/6119424973b9c0f3824d">gist</a></p>
<p>It&rsquo;s pretty ugly to mix a method call to setPadding() with the synthetic property accessors for layoutParams and text. setPadding() is causing us problems here because it&rsquo;s not a JavaBeans-style setter&#x200A;&mdash;&#x200A;it has more than one argument. Therefore, Kotlin can&rsquo;t assign a synthetic property to it. But fear not! This can be fixed with clever use of another Kotlin language feature, as we&rsquo;ll discover in the upcoming part 5.</p>
<p>If you want to stay on top of this series, you can follow me both <a href="https://medium.com/@CodingDoug">here on Medium</a> and <a href="https://twitter.com/CodingDoug">on Twitter</a> as CodingDoug and get instant notification of future parts!</p>
]]></description><link>https://medium.com/@CodingDoug/kotlin-android-a-brass-tacks-experiment-part-4-4b7b501fa457#.dllcmjpbu</link><guid isPermaLink="true">https://medium.com/@CodingDoug/kotlin-android-a-brass-tacks-experiment-part-4-4b7b501fa457#.dllcmjpbu</guid><category><![CDATA[Kotlin]]></category><category><![CDATA[Android]]></category><dc:creator><![CDATA[Doug Stevenson]]></dc:creator><pubDate>Thu, 04 Feb 2016 18:54:00 GMT</pubDate></item></channel></rss>