<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Kotlin Programming Language]]></title><description><![CDATA[News, blog posts, projects, podcasts, videos and other. All information about Kotlin.]]></description><link>https://javaby.github.io/awesome-kotlin/</link><image><url>https://javaby.github.io/awesome-kotlin/favicon.ico</url><title>Kotlin Programming Language</title><link>https://javaby.github.io/awesome-kotlin/</link></image><generator>node-rss</generator><lastBuildDate>Sun, 28 Feb 2016 11:27:10 GMT</lastBuildDate><atom:link href="https://javaby.github.io/awesome-kotlin/rss.xml" rel="self" type="application/rss+xml"/><pubDate>Sun, 28 Feb 2016 11:27:10 GMT</pubDate><copyright><![CDATA[CC0 1.0 Universal (CC0 1.0)]]></copyright><language><![CDATA[en]]></language><managingEditor><![CDATA[ruslan@ibragimov.by (Ruslan Ibragimov)]]></managingEditor><webMaster><![CDATA[ruslan@ibragimov.by (Ruslan Ibragimov)]]></webMaster><docs>https://validator.w3.org/feed/docs/rss2.html</docs><ttl>30</ttl><category><![CDATA[Kotlin]]></category><category><![CDATA[Programming]]></category><category><![CDATA[JVM]]></category><item><title><![CDATA[[RU] Podcast Разбор Полетов: Episode 102 — Kotlin, тесты и здоровый сон.]]></title><description><![CDATA[Kotlin 1.0 RC - Философия Kotlin.]]></description><link>http://razbor-poletov.com/2016/02/episode-102.html</link><guid isPermaLink="true">http://razbor-poletov.com/2016/02/episode-102.html</guid><category><![CDATA[Kotlin]]></category><category><![CDATA[Podcast]]></category><dc:creator><![CDATA[Dmitry Jemerov, Viktor Gamov, Alexey Abashev, Anton Arphipov,  Dmitry Churbanov, Anton Arhipov]]></dc:creator><pubDate>Thu, 04 Feb 2016 18:54:00 GMT</pubDate><enclosure url="http://traffic.libsyn.com/razborpoletov/razbor_102.mp3" length="70319173" type="audio/mpeg"/></item><item><title><![CDATA[Kotlin 1.0 Released: Pragmatic Language for JVM and Android]]></title><description><![CDATA[This is it. 1.0 is here! It’s been a long and exciting road but we’ve finally reached the first big 1.0, and we’re celebrating the release by also presenting you with the new logo.]]></description><link>http://blog.jetbrains.com/kotlin/2016/02/kotlin-1-0-released-pragmatic-language-for-jvm-and-android/</link><guid isPermaLink="true">http://blog.jetbrains.com/kotlin/2016/02/kotlin-1-0-released-pragmatic-language-for-jvm-and-android/</guid><category><![CDATA[JetBrains]]></category><category><![CDATA[Kotlin]]></category><dc:creator><![CDATA[Andrey Breslav]]></dc:creator><pubDate>Mon, 15 Feb 2016 09:57:00 GMT</pubDate><enclosure url="http://i0.wp.com/blog.jetbrains.com/kotlin/files/2016/02/1_0_Banner.png" length="22038" type="image/png"/></item><item><title><![CDATA[JVM Newcomer Kotlin 1.0 is GA]]></title><description><![CDATA[After a long and winding road to development, pragmatic JVM and Android newcomer Kotlin 1.0 is officially GA. The open source progeny of Java IDE supremo JetBrains (it was developed on GitHub under the Apache 2.0 Open-Source license), Kotlin has been cooking since 2010, and as you’d expect, runs seamlessly on the company’s signature Java IDE, IntelliJ IDEA.]]></description><link>https://www.voxxed.com/blog/2016/02/kotlin/</link><guid isPermaLink="true">https://www.voxxed.com/blog/2016/02/kotlin/</guid><category><![CDATA[Kotlin]]></category><category><![CDATA[JVM]]></category><dc:creator><![CDATA[Lucy Carey]]></dc:creator><pubDate>Mon, 15 Feb 2016 14:50:00 GMT</pubDate></item><item><title><![CDATA[Developing Spring Boot applications with Kotlin.]]></title><description><![CDATA[Just in time for Kotlin 1.0 release, we are adding support for Kotlin language to https://start.spring.io in order to make it easier to start new Spring Boot projects with this language. 
 This blog post is also an opportunity for me to explain why I find this language interesting, to show you a sample project in detail and to give you some hints.]]></description><link>https://spring.io/blog/2016/02/15/developing-spring-boot-applications-with-kotlin</link><guid isPermaLink="true">https://spring.io/blog/2016/02/15/developing-spring-boot-applications-with-kotlin</guid><category><![CDATA[Kotlin]]></category><category><![CDATA[Spring]]></category><dc:creator><![CDATA[Sébastien Deleuze]]></dc:creator><pubDate>Mon, 15 Feb 2016 09:58:00 GMT</pubDate></item><item><title><![CDATA[Kotlin 1.0: The good, the bad and the evident.]]></title><description><![CDATA[After a long wait, Kotlin 1.0 is finally here! According to the official announcement, ”Kotlin works everywhere where Java works: server-side applications, mobile applications (Android), desktop applications. It works with all major tools and services such as IntelliJ IDEA, Android Studio and Eclipse, Maven, Gradle and Ant, Spring Boot, GitHub, Slack and even Minecraft.”]]></description><link>https://jaxenter.com/kotlin-1-0-the-good-the-bad-and-the-evidence-124041.html</link><guid isPermaLink="true">https://jaxenter.com/kotlin-1-0-the-good-the-bad-and-the-evidence-124041.html</guid><category><![CDATA[Kotlin]]></category><category><![CDATA[Review]]></category><dc:creator><![CDATA[Gabriela Motroc]]></dc:creator><pubDate>Tue, 16 Feb 2016 14:11:00 GMT</pubDate></item><item><title><![CDATA[[RU] Релиз Kotlin 1.0, языка программирования для JVM и Android.]]></title><description><![CDATA[Компания Jetbrains, развивающая интегрированную среду разработки IntelliJ IDEA, представила первый значительный релиз объектно-ориентированного языка программирования Kotlin 1.0, позволяющего создавать приложения, скомпилированные для последующего выполнения внутри стандартной виртуальной машины Java (JVM) или Android. Дополнительно поддерживается преобразование программ в JavaScript-представление для запуска внутри браузера, но данная функциональность пока отнесена к экспериментальным возможностям.]]></description><link>http://www.opennet.ru/opennews/art.shtml?num=43882</link><guid isPermaLink="true">http://www.opennet.ru/opennews/art.shtml?num=43882</guid><category><![CDATA[Kotlin]]></category><category><![CDATA[JVM  ]]></category><dc:creator><![CDATA[Open Source]]></dc:creator><pubDate>Tue, 16 Feb 2016 08:21:00 GMT</pubDate></item><item><title><![CDATA[[RU] Kotlin 1.0. Задай вопрос команде.]]></title><description><![CDATA[На этой неделе случилось важное для нас событие — вышла первая версия языка программирования Kotlin!  Так как почти вся разработка Kotlin велась в Питерском офисе компании JetBrains, многие хабровчане уже знают, что такое Kotlin и пробовали его на практике, поэтому этот пост больше для комментариев: задавайте любые вопросы и команда Kotlin ответит. Мы онлайн!]]></description><link>https://habrahabr.ru/company/JetBrains/blog/277573/</link><guid isPermaLink="true">https://habrahabr.ru/company/JetBrains/blog/277573/</guid><category><![CDATA[JetBrains]]></category><category><![CDATA[Kotlin]]></category><dc:creator><![CDATA[Роман Белов]]></dc:creator><pubDate>Fri, 19 Feb 2016 13:30:00 GMT</pubDate></item><item><title><![CDATA[[RU] Немного о Kotlin.]]></title><description><![CDATA[На днях JetBrains после пятилетней работы выпустила первый релиз языка Kotlin. Давайте посмотрим, что же это за язык, попробуем разобраться зачем и для кого он, какие имеет функциональные особенности. Скорее всего в статью затесались и личные впечатления от языка, но я старался, чтобы они не влияли на изложение полезной информации. Если вы еще ничего или почти ничего не знаете о Kotlin, то я завидую вам, ибо по моему ощущению почитать про инструмент, который ты долго ждал, сродни распаковке новогоднего подарка. Впрочем судите сами.]]></description><link>https://habrahabr.ru/post/277479/</link><guid isPermaLink="true">https://habrahabr.ru/post/277479/</guid><category><![CDATA[Kotlin]]></category><category><![CDATA[Review]]></category><dc:creator><![CDATA[@fogone]]></dc:creator><pubDate>Sat, 20 Feb 2016 05:25:00 GMT</pubDate></item><item><title><![CDATA[[RU] DevZen Podcast: Kotlin и Vulkan 1.0 — Episode 0080.]]></title><description><![CDATA[Темы выпуска: Сравнение разных конфигурации сети в Kubernetes, Kotlin наконец вышел в версии 1.0, Vulkan тоже вышел в 1.0, критическая уязвимость в glibc, ZFS в Ubuntu 16.04, снова Rust, и про Монады. И, конечно, ответы на вопросы слушателей.]]></description><link>http://devzen.ru/episode-0080/</link><guid isPermaLink="true">http://devzen.ru/episode-0080/</guid><category><![CDATA[Podcast]]></category><category><![CDATA[Kotlin]]></category><dc:creator><![CDATA[DevZen Podcast]]></dc:creator><pubDate>Sat, 20 Feb 2016 08:34:00 GMT</pubDate><enclosure url="http://devzen.ru/download/2016/devzen-0080-2016-02-19-3280e712a2cc1485.mp3" length="55240704" type="audio/mpeg"/></item><item><title><![CDATA[The Kobalt diaries: testing]]></title><description><![CDATA[<p><a href="http://beust.com/kobalt">Kobalt</a> automatically detects how to run your tests based on the test dependencies that you declared:</p><div class="syntaxhighlighter"><div class="lines"><div class="line alt1"><table><tbody><tr><td class="content"><code class="plain">dependenciesTest {</code></td></tr></tbody></table></div><div class="line alt2"><table><tbody><tr><td class="content"><code class="spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="plain">compile(</code><code class="string">"org.testng:testng:6.9.9"</code><code class="plain">)</code></td></tr></tbody></table></div><div class="line alt1"><table><tbody><tr><td class="content"><code class="plain">}</code></td></tr></tbody></table></div></div></div><p>By default, Kobalt supports TestNG, JUnit and Spek. You can also configure how your tests run<br>with the <code>test{}</code> directive:</p>]]></description><link>http://beust.com/weblog/2016/02/20/the-kobalt-diaries-testing/</link><guid isPermaLink="true">http://beust.com/weblog/2016/02/20/the-kobalt-diaries-testing/</guid><category><![CDATA[Kotlin]]></category><category><![CDATA[Kobalt]]></category><dc:creator><![CDATA[Cédric Beust]]></dc:creator><pubDate>Sat, 20 Feb 2016 07:35:00 GMT</pubDate></item><item><title><![CDATA[[RU] Радио-Т 484]]></title><description><![CDATA[Kotlin дорос до версии 1.0]]></description><link>https://radio-t.com/p/2016/02/20/podcast-484/</link><guid isPermaLink="true">https://radio-t.com/p/2016/02/20/podcast-484/</guid><category><![CDATA[Podcast]]></category><category><![CDATA[Kotlin]]></category><dc:creator><![CDATA[Umputun, Bobuk, Gray, Ksenks]]></dc:creator><pubDate>Sat, 20 Feb 2016 12:44:00 GMT</pubDate><enclosure url="http://cdn.radio-t.com/rt_podcast484.mp3" length="72259834" type="audio/mpeg"/></item><item><title><![CDATA[Kotlin — Love at first line]]></title><description><![CDATA[<h1>Kotlin&#x200A;&mdash;&#x200A;Love at first line</h1>
<p>Kotlin 1.0 has been <a href="https://blog.jetbrains.com/kotlin/2016/02/kotlin-1-0-released-pragmatic-language-for-jvm-and-android/">released</a>
a few days ago and it&rsquo;s time to check out its awesome features.</p>
<p>For those of you who might have been living under a rock and don&rsquo;t know what Kotlin is&#x200A;&mdash;&#x200A;Kotlin is a new JVM programming language that tries to &ldquo;fill in the gaps&rdquo; that Java has. It&rsquo;s 100% interoperable with Java&#x200A;&mdash;&#x200A;meaning that you can have a mixed project that contains Kotlin &amp; Java classes. The classes are compiled to Java bytecode, and that bytecode is &ldquo;runnable&rdquo; on Java6+, which makes it runnable on Android.</p>
<p>The language is awesome, and combined with the <a href="https://github.com/Kotlin/anko">Anko</a> library it&rsquo;s even <a href="http://www.urbandictionary.com/define.php?term=Awesome-er">awesome-er*</a>. I won&rsquo;t be explaining the syntax of the language (for that you have the official <a href="https://kotlinlang.org/">page</a>). I&rsquo;m just going to try and expose a few of it&rsquo;s awesome features.</p>
<h3><a href="https://kotlinlang.org/docs/reference/functions.html#single-expression-functions">Single-Expression functions</a></h3>
<p>If we have a function that boils down to a single expression, we can use the single-expression function syntax:</p>
<pre><code>override fun equals(other: Any?) = other is Task &amp;&amp; other.id == id
</code></pre>
<h3><a href="https://kotlinlang.org/docs/reference/extensions.html">Extensions</a></h3>
<p>Extensions allow us to extend any existing class by adding functions and properties without the need to inherit from that class.</p>
<pre><code class="hljs language-kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> ViewGroup.<span class="hljs-title">inflate</span><span class="hljs-params">(
    @LayoutRes layoutRes: <span class="hljs-type">Int,
    attachToRoot: Boolean</span> = false)</span> =</span>

    LayoutInflater
        .from(context)
        .inflate(layoutRes, this, attachToRoot)</code></pre>
<p>The extension function above adds the <strong>.inflate(...)</strong> method to the ViewGroup class, so instead of doing this every time:</p>
<pre><code class="hljs language-kotlin"><span class="hljs-variable"><span class="hljs-keyword">val</span> view</span> = LayoutInflater
    .from(parent)
    .inflate(R.layout.todo_list_item, parent, <span class="hljs-literal">false</span>)</code></pre>
<p>now we can just do this:</p>
<pre><code class="hljs language-kotlin"><span class="hljs-variable"><span class="hljs-keyword">val</span> view</span> = parent.inflate(R.layout.todo_list_item)</code></pre>
<p>or:</p>
<pre><code class="hljs language-kotlin"><span class="hljs-variable"><span class="hljs-keyword">val</span> view</span> = parent.inflate(R.layout.todo_list_item,
    attachToRoot = <span class="hljs-literal">true</span>)</code></pre>
<p>I guess you already noticed that Kotlin also supports <a href="https://kotlinlang.org/docs/reference/functions.html#default-arguments">default arguments</a>.</p>
<h3><a href="https://kotlinlang.org/docs/reference/lambdas.html#lambda-expressions-and-anonymous-functions">Lambda</a></h3>
<p>Intentionally left blank.</p>
<h3><a href="https://kotlinlang.org/docs/reference/null-safety.html">Optionals / Null safety</a></h3>
<p>Forget about NullPointerExceptions. Kotlin has 2 types of variables, nullable and non-nullable. If we declare our variable as non-nullable&#x200A;&mdash;&#x200A;the compiler won&rsquo;t let us assign a null value to it. Only nullable variables can be null.</p>
<pre><code class="hljs language-kotlin"><span class="hljs-variable"><span class="hljs-keyword">var</span> nonNullable</span>: String = <span class="hljs-string">"This is a title"</span> <span class="hljs-comment">// Non-nullable variable</span>
<span class="hljs-variable"><span class="hljs-keyword">var</span> nullable</span>: String? = <span class="hljs-literal">null</span> <span class="hljs-comment">// Nullable variable</span></code></pre>
<p>In case of the <em>nonNullable</em> variable, we can safely call methods on it, without any null checks, because it <em>cannot have a null value</em>.</p>
<p>In case of the <em>nullable</em> variable, we can safely call methods with the help of the <em>safe-trasversal operator (?.)</em>, and forget about null checks:</p>
<pre><code class="hljs language-kotlin"><span class="hljs-variable"><span class="hljs-keyword">val</span> length</span> = nullable?.length</code></pre>
<p>The code above won&rsquo;t fail, even if the <em>nullable</em> variable has a null value. In that case, the value of the <em>length</em> variable will be <em>null</em>.</p>
<h3><a href="https://kotlinlang.org/docs/reference/null-safety.html#elvis-operator">Elvis operator</a></h3>
<p>The result of a <strong>safe call (?.)</strong> is always a nullable variable. So in cases where we are calling a method on a null variable&#x200A;&mdash;&#x200A;the result will be null.</p>
<p>That can be inconvenient sometimes. For example, in the code sample above, we want our <strong>length</strong> variable to be a non-null variable because it&rsquo;s logical for it to have a value of 0 in case of a null string.</p>
<p>In cases like that, we can use the <strong>elvis operator ( ?: )</strong>.</p>
<pre><code class="hljs language-kotlin"><span class="hljs-variable"><span class="hljs-keyword">val</span> length</span> = nullable?.length ?: <span class="hljs-number">0</span></code></pre>
<p>The elvis operator will use the left side value if it&rsquo;s not null. In case the left side value is null, it will use the right non-nullable value.</p>
<p>You can even use it to make your sanity checks more readable.</p>
<pre><code class="hljs language-kotlin">    ...
}</code></pre>
<p>With help of the elvis operator, the same method in Kotlin will look like this:</p>
<pre><code class="hljs language-kotlin"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">myMethod</span><span class="hljs-params">(str: <span class="hljs-type">String?</span>)</span> {</span>
    <span class="hljs-comment">// Sanity check</span>
    str ?: <span class="hljs-keyword">return</span>

    ...
}</code></pre>
<p>The great part of using this is that the compiler will <strong>smart cast</strong> our <strong>str</strong> variable to a non-nullable variable after the &ldquo;<em>str ?: return</em>&rdquo; line.</p>
<h3><a href="https://kotlinlang.org/docs/reference/properties.html#properties-and-fields">Optional getters/setters</a></h3>
<p>Unlike in Java, where we are used to define all of our class properties <strong><em>private</em></strong> and write getters and setters, in Kotlin we write getters and setters only if we want to have some custom behaviour.</p>
<p>The simplest definition looks like this:</p>
<pre><code class="hljs language-kotlin"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Task</span> </span>{
   <span class="hljs-variable"><span class="hljs-keyword">var</span> completed</span> = <span class="hljs-literal">false</span>
}</code></pre>
<p>And we can access the property:</p>
<pre><code class="hljs language-kotlin"><span class="hljs-variable"><span class="hljs-keyword">val</span> task</span> = Task()
<span class="hljs-keyword">if</span> (task.completed) ...</code></pre>
<p>If we wan&rsquo;t to expose just the getter and allow setting the value only from within the class:</p>
<pre><code class="hljs language-kotlin"><span class="hljs-variable"><span class="hljs-keyword">var</span> completed</span> = <span class="hljs-literal">false</span>
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">set</span></code></pre>
<p>And if we want to have completely custom behaviour:</p>
<pre><code class="hljs language-kotlin"><span class="hljs-variable"><span class="hljs-keyword">var</span> completedInt</span> = <span class="hljs-number">0</span>
<span class="hljs-variable"><span class="hljs-keyword">var</span> completed</span>: <span class="hljs-keyword">Boolean</span>
    <span class="hljs-keyword">get</span>() = completedInt == <span class="hljs-number">1</span>
    <span class="hljs-keyword">set</span>(value) { completedInt = <span class="hljs-keyword">if</span> (value) <span class="hljs-number">1</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span> }</code></pre>
<h3><a href="https://kotlinlang.org/docs/reference/delegated-properties.html#lazy">Lazy properties</a></h3>
<p>Kotlin allows us to declare lazy properties&#x200A;&mdash;&#x200A;properties that are initialized when we first access them.</p>
<pre><code class="hljs language-kotlin"><span class="hljs-keyword">private</span> <span class="hljs-variable"><span class="hljs-keyword">val</span> recyclerView by lazy {
    find&lt;RecyclerView&gt;(R.id.task_list_new)
}</span></code></pre>
<p>When we first access the <strong>recyclerView</strong> property, the lambda expression is evaluated and the returned value from the lamdba is saved and returned in that and every subsequent call.</p>
<h3><a href="https://kotlinlang.org/docs/reference/delegated-properties.html#observable">Observable properties</a></h3>
<p>In Kotlin we can observe properties. The syntax for declaring such properties is the following:</p>
<pre><code class="hljs language-kotlin"><span class="hljs-variable"><span class="hljs-keyword">var</span> tasks by Delegates.observable(mutableListOf&lt;Task&gt;()) {
    prop, old, new -&gt;
        notifyDataSetChanged()
        dataChangedListener?.invoke()
}</span></code></pre>
<p>This means that we are going to be notified every time the value of our property changes (the provided lambda will be called).</p>
<h2><a href="https://github.com/Kotlin/anko">Anko extensions</a></h2>
<p>Anko is a great library and has a lot of great extensions. I will list a couple.</p>
<h3>find<T>(id: Int)</h3>
<p>It replaces the findViewById(int id) method. This extension function returns the view already cast to the given type T, so there is no need to cast it.</p>
<pre><code class="hljs language-kotlin"><span class="hljs-variable"><span class="hljs-keyword">val</span> recyclerView</span> = find<span class="hljs-type">&lt;RecyclerView&gt;</span>(R.id.task_list_new)</code></pre>
<h3><a href="https://github.com/Kotlin/anko/blob/master/doc/SQLITE.md#anko-heart-sqlite">SQLite</a></h3>
<p>Anko has great support for SQLite databases. For a complete overview, check their <a href="https://github.com/Kotlin/anko/blob/master/doc/SQLITE.md#anko-heart-sqlite">guide</a>. I will just show you one example:</p>
<pre><code class="hljs language-kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">allTasks</span><span class="hljs-params">()</span> = use {</span>
    select(table)
        .orderBy(completed)
        .orderBy(priority, SqlOrderDirection.DESC)
        .exec {
            parseList(parser)
        }
}</code></pre>
<p>The <strong>use {&hellip;}</strong> function opens the database for us, and closes it after the given lambda executes. So we don&rsquo;t have to worry about closing it anymore and can forget about all those <strong>try {&hellip;} catch(&hellip;) {&hellip;} finally {&hellip;}</strong> blocks. Inside the lambda that we pass to the <strong>use</strong> function, <strong>this</strong> references our database. That is the power of Kotlin&rsquo;s <strong>type-safe builders</strong>. Read more about them <a href="http://blog.jetbrains.com/kotlin/2011/10/dsls-in-kotlin-part-1-whats-in-the-toolbox-builders/">here</a> and <a href="https://kotlinlang.org/docs/reference/type-safe-builders.html">here</a>.</p>
<p>The <strong>select(&hellip;)&hellip;exec {}</strong> call chain, selects data from the database. And the <strong>parseList(parser)</strong> call parses the rows of data and returns a list of objects, that our <strong>parser</strong> returns. The definition of our <strong>parser</strong> is:</p>
<pre><code class="hljs language-kotlin"><span class="hljs-variable"><span class="hljs-keyword">val</span> parser</span> = rowParser {
    id: <span class="hljs-keyword">Int</span>, name: String, priority: <span class="hljs-keyword">Int</span>, completed: <span class="hljs-keyword">Int</span> -&gt;
    Task(id, name, priority, completed)
}</code></pre>
]]></description><link>https://medium.com/@dime.kotevski/kotlin-love-at-first-line-7127befe240f#.p5hp6dxlh</link><guid isPermaLink="true">https://medium.com/@dime.kotevski/kotlin-love-at-first-line-7127befe240f#.p5hp6dxlh</guid><category><![CDATA[Anko]]></category><category><![CDATA[Android]]></category><category><![CDATA[Kotlin]]></category><dc:creator><![CDATA[Dimitar Kotevski]]></dc:creator><pubDate>Sun, 21 Feb 2016 09:13:00 GMT</pubDate></item><item><title><![CDATA[A Very Peculiar, but Possibly Cunning Kotlin Language Feature.]]></title><description><![CDATA[This has caught me by surprise. After studying the Kotlin language to learn about how to best leverage this interesting new language for jOOQ, I stumbled upon this puzzler. What do you think the following program will print? fun main(args: Array) { (1..5).forEach { if (it == 3) return print(it) } print("done") } Well... You...]]></description><link>http://blog.jooq.org/2016/02/22/a-very-peculiar-but-possibly-cunning-kotlin-language-feature/</link><guid isPermaLink="true">http://blog.jooq.org/2016/02/22/a-very-peculiar-but-possibly-cunning-kotlin-language-feature/</guid><category><![CDATA[Kotlin]]></category><category><![CDATA[Puzzlers]]></category><dc:creator><![CDATA[Lukas Eder]]></dc:creator><pubDate>Mon, 22 Feb 2016 12:33:00 GMT</pubDate></item></channel></rss>