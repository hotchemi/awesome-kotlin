<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Kotlin Programming Language]]></title><description><![CDATA[News, blog posts, projects, podcasts, videos and other. All information about Kotlin.]]></description><link>https://javaby.github.io/awesome-kotlin/</link><image><url>https://javaby.github.io/awesome-kotlin/favicon.ico</url><title>Kotlin Programming Language</title><link>https://javaby.github.io/awesome-kotlin/</link></image><generator>node-rss</generator><lastBuildDate>Mon, 29 Feb 2016 08:08:43 GMT</lastBuildDate><atom:link href="https://javaby.github.io/awesome-kotlin/rss.xml" rel="self" type="application/rss+xml"/><pubDate>Mon, 29 Feb 2016 08:08:43 GMT</pubDate><copyright><![CDATA[CC0 1.0 Universal (CC0 1.0)]]></copyright><language><![CDATA[en]]></language><managingEditor><![CDATA[ruslan@ibragimov.by (Ruslan Ibragimov)]]></managingEditor><webMaster><![CDATA[ruslan@ibragimov.by (Ruslan Ibragimov)]]></webMaster><docs>https://validator.w3.org/feed/docs/rss2.html</docs><ttl>30</ttl><category><![CDATA[Kotlin]]></category><category><![CDATA[Programming]]></category><category><![CDATA[JVM]]></category><item><title><![CDATA[[RU] Podcast Разбор Полетов: Episode 102 — Kotlin, тесты и здоровый сон.]]></title><description><![CDATA[<h2>&#x41C;&#x435;&#x440;&#x43E;&#x43F;&#x440;&#x438;&#x44F;&#x442;&#x438;&#x44F;</h2>
<ol>
<li><a href="http://jbreak.ru/">http://jbreak.ru/</a></li>
<li><a href="https://fosdem.org/2016/">https://fosdem.org/2016/</a></li>
</ol>
<h2>&#x422;&#x435;&#x43C;&#x43A;&#x438;</h2>
<ol>
<li>Kotlin 1.0 RC - &#x424;&#x438;&#x43B;&#x43E;&#x441;&#x43E;&#x444;&#x438;&#x44F; Kotlin</li>
<li>JavaTest, TCK, JTreg &#x438; &#x435;&#x433;&#x43E; &#x441;&#x432;&#x44F;&#x437;&#x44C; &#x441; TestNG/JUnit &#x438; &#x43F;&#x440;&#x43E;&#x447;&#x438;&#x435; &#x432;&#x43E;&#x43F;&#x440;&#x43E;&#x441;&#x44B; &#x432; &#x437;&#x43D;&#x430;&#x442;&#x43E;&#x43A;&#x443; &#x43F;&#x43E; &#x44D;&#x442;&#x438;&#x43C; &#x432;&#x43E;&#x43F;&#x440;&#x43E;&#x441;&#x430;&#x43C;</li>
<li>&#x427;&#x442;&#x43E; &#x43D;&#x443;&#x436;&#x43D;&#x43E; &#x435;&#x441;&#x442;&#x44C; &#x438; &#x441;&#x43A;&#x43E;&#x43B;&#x44C;&#x43A;&#x43E; &#x43D;&#x443;&#x436;&#x43D;&#x43E; &#x441;&#x43F;&#x430;&#x442;&#x44C;, &#x447;&#x442;&#x43E; &#x431;&#x44B; &#x431;&#x44B;&#x442;&#x44C; &#x431;&#x435;&#x43B;&#x44B;&#x43C; &#x440;&#x443;&#x441;&#x441;&#x43A;&#x438;&#x43C; &#x43C;&#x443;&#x436;&#x447;&#x438;&#x43D;&#x43E;&#x439; &#x432; &#x410;&#x43C;&#x435;&#x440;&#x438;&#x43A;&#x435;</li>
</ol>
<h2>&#x41F;&#x43E;&#x43B;&#x435;&#x437;&#x43D;&#x44F;&#x448;&#x43A;&#x438;</h2>
<ol>
<li>&#x41A;&#x43B;&#x438;&#x435;&#x43D;&#x442; &#x434;&#x43B;&#x44F; Redis - <a href="https://github.com/luin/medis">Medis</a></li>
<li><a href="http://javaby.github.io/awesome-kotlin/">http://javaby.github.io/awesome-kotlin/</a> or <a href="http://kotlin.link/">http://kotlin.link/</a></li>
<li><a href="https://github.com/Originate/git-town">https://github.com/Originate/git-town</a></li>
<li><a href="https://libraries.io/">https://libraries.io/</a></li>
</ol>
]]></description><link>http://razbor-poletov.com/2016/02/episode-102.html</link><guid isPermaLink="true">http://razbor-poletov.com/2016/02/episode-102.html</guid><category><![CDATA[Kotlin]]></category><category><![CDATA[Podcast]]></category><dc:creator><![CDATA[Dmitry Jemerov, Viktor Gamov, Alexey Abashev, Anton Arphipov,  Dmitry Churbanov, Anton Arhipov]]></dc:creator><pubDate>Thu, 04 Feb 2016 18:54:00 GMT</pubDate><enclosure url="http://traffic.libsyn.com/razborpoletov/razbor_102.mp3" length="70319173" type="audio/mpeg"/></item><item><title><![CDATA[JVM Newcomer Kotlin 1.0 is GA]]></title><description><![CDATA[<p>After a long and winding road to development, pragmatic JVM and Android newcomer <a href="http://blog.jetbrains.com/kotlin/2016/02/kotlin-1-0-released-pragmatic-language-for-jvm-and-android/">Kotlin</a> 1.0 is officially GA. The open source progeny of Java IDE supremo JetBrains (it was developed on <a href="https://github.com/JetBrains/kotlin">GitHub</a> under the Apache 2.0 Open-Source license), Kotlin has been cooking since 2010, and as you&rsquo;d expect, runs seamlessly on the company&rsquo;s signature Java IDE, <a href="https://www.voxxed.com/blog/2015/09/partying-with-intellij-idea-dart-java-websocket-and-glassfish/">IntelliJ</a> IDEA.</p>
<p>A key characteristic of Kotlin is its end user focus, and a steadfast effort has been made in its development to ensure features lists are sharp and concise. It&rsquo;s also lightweight and fully interoperable with the Java language, making it a natural fit for mobile development.</p>
<p>Although originally intended to be a contemporary answer to the legacy issues Java brought in its wake, Kotlin could prove an excellent choice for Android developers in 2016 looking for a JVM alternative that reaches beyond the capabilities for version 6 of the platform. And thanks to the kotlin-android-extensions plugin in for the Kotlin compiler, developers can access views in a type-safe fashion without the need for extra user code or runtime libraries.</p>
<p>Moreover, as Antonio Leiva <a href="https://www.voxxed.com/blog/2016/01/kotlin-android-developers/">notes</a>, Kotlin&rsquo;s library is small enough to let developers work without proguard during development. Then there&rsquo;s the not-inconsequential fact that Android Studio (the official Android IDE) was constructed on top of IntelliJ.</p>
<p>Aside from its aptitude for Android development, lead language designer <a href="http://blog.jetbrains.com/kotlin/author/andrey-breslav/">Andrey Breslav</a> highlights that, because Kotlin can run wherever Java runs &ndash; be that server-side applications, mobile applications (Android), or desktop applications, it plays nicely with most of the leading Java ecosystem tools, including things like Maven, Gradle and Ant, GitHub, Slack, and, as of today, officially supports <a href="https://spring.io/blog/2016/02/15/developing-spring-boot-applications-with-kotlin">Spring Boot</a>. And, because you can use libraries interchangeably between Java and Kotlin, you can keep bytecode footprints nice and small.</p>
<p>Breslav comments that, even before its official release, a number of companies have judged Kotlin fit for production, and JetBrains themselves have been utilising the language, along with its compiler and tooling projects, on extensive &ldquo;real-life&rdquo; projects for the past two years. In terms of adoption, over 11,000 people used Kotlin last month, and there are already two books &ndash; <a href="https://www.manning.com/books/kotlin-in-action">Kotlin in Action</a> and <a href="https://leanpub.com/kotlin-for-android-developers">Kotlin for Android Developers</a> &ndash; to get developers going with the language.</p>
<p>Going forward, JetBrains will look to make Kotlin development more transparent by establishing a centralized venue for design proposals and discussions. You can expect standardization efforts to happen in the near future too. Aside from bug fixes, plans for the roadmap ahead include formalised support for JavaScript (at the moment this is strictly experimental), performance improvements to the Kotlin toolchain, and support for generating Java 8 bytecode with things like optimized lambdas.</p>
<p>For a taste of what Kotlin has to offer, its creators recommend giving this online mini-IDE <a href="https://try.kotlinlang.org/">try.kotl.in</a> a whirl and having a go at <a href="http://try.kotlinlang.org/koans">Koans</a> &mdash; a set of introductory problems to guide you through the basics of the language.</p>
<p>To learn more about Kotlin and how it compares to fellow Java-botherer Ceylon, as well as Java itself, we suggest checking out this Devoxx UK 2015 session by Russel Winder:</p>
<p><a href="https://www.youtube.com/watch?v=Q_Z_8HXt68k">https://www.youtube.com/watch?v=Q_Z_8HXt68k</a></p>
]]></description><link>https://www.voxxed.com/blog/2016/02/kotlin/</link><guid isPermaLink="true">https://www.voxxed.com/blog/2016/02/kotlin/</guid><category><![CDATA[Kotlin]]></category><category><![CDATA[JVM,]]></category><dc:creator><![CDATA[Lucy Carey]]></dc:creator><pubDate>Mon, 15 Feb 2016 14:50:00 GMT</pubDate></item><item><title><![CDATA[Kotlin 1.0 Released: Pragmatic Language for JVM and Android]]></title><description><![CDATA[<p>This is it. 1.0 is here!</p>
<p>It&rsquo;s been a long and exciting road but we&rsquo;ve finally reached the first big 1.0, and we&rsquo;re celebrating the release by also presenting you with the new logo:</p>
<p><img src="http://i0.wp.com/blog.jetbrains.com/kotlin/files/2016/02/1_0_Banner.png?resize=640%252C320" alt="Kotlin logo"></p>
<p>See discussions on <a href="https://www.reddit.com/r/programming/comments/45wcnd/kotlin_10_released_pragmatic_language_for_jvm_and/">Reddit</a> and <a href="https://news.ycombinator.com/item?id=11103087">Hacker News</a></p>
<h2>What is Kotlin?</h2>
<p>Kotlin is a pragmatic programming language for JVM and Android that combines OO and functional features and is focused on <strong>interoperability</strong>, <strong>safety</strong>, <strong>clarity</strong> and <strong>tooling</strong> support.</p>
<p>Being a general-purpose language, Kotlin <strong>works everywhere where Java works</strong>: server-side applications, mobile applications (Android), desktop applications. It works with all major tools and services such as</p>
<ul>
<li>IntelliJ IDEA, Android Studio and Eclipse</li>
<li>Maven, Gradle and Ant</li>
<li>Spring Boot (Kotlin support released today!)</li>
<li>GitHub, Slack and even Minecraft :)</li>
</ul>
<p>One of the key focuses of Kotlin has been interoperability and seamless support for <strong>mixed Java+Kotlin projects</strong>, making adoption easier leading to less boilerplate code and more type-safety. Additionally, Kotlin has an <strong>extensive standard library</strong> that makes everyday tasks easy and smooth while keeping the bytecode footprint <a href="http://www.methodscount.com/?lib=org.jetbrains.kotlin%253Akotlin-stdlib%253A1.0.0-rc-1036">low</a>. Of course, <strong>any Java library can be used in Kotlin</strong>, too; and vice versa.&#x2028;</p>
<h2>What does pragmatic mean?</h2>
<p>Understanding one&rsquo;s core values is crucial for any long-running project. If I were to choose one word to describe Kotlin&rsquo;s design, it would be <strong>pragmatism</strong>. This is why, early on, we said that Kotlin is not so much about invention or research. We ended up inventing quite a few things, but this was never the point of the project. Of course we were building a <strong>type system that prevents bugs</strong>, and <strong>abstraction mechanisms that facilitate code reuse</strong>, as anybody in our position would. But our (pragmatic) way of doing it was through <strong>focusing on use cases</strong> to make the language a <strong>good tool</strong>.</p>
<p>In particular, this approach lead us immediately to the notion that <strong>interoperability with existing code and infrastructure is crucial</strong>. Re-writing the world the right way, all from scratch &mdash; who never wished to? I did, quite a few times :) And Kotlin would have been a whole lot easier to design and develop if not for the Java interop, Maven integration, Android compatibility! It would definitely be more elegant in many ways. But elegance, though highly appreciated, is not the primary goal here, <strong>the primary goal is being useful</strong>. And the less our users have to re-learn, re-invent, re-do from scratch, the more they can re-use, the better.</p>
<p>&mdash; <strong><em>So, why doesn&rsquo;t Kotlin have its own package manager, or its own build system?</em></strong>
&mdash; Because there&rsquo;s already Maven and Gradle, and re-using their huge number of plugins is crucial for many projects.
&mdash; <strong><em>Why did we invest a lot of time and effort into making JDK-compatible collection interfaces, when it was so much easier to just redesign collections from scratch?</em></strong>
&mdash; Because tons and tons of Java code work with JDK collections, and converting data on the boundary would be a pain.
&mdash; <strong><em>Why does Kotlin support Java 6 byte code?</em></strong>
&mdash; Because many people are still running Java 6 (Android, most notably, but not only Android).</p>
<p>For us pragmatism is about <strong>creating user experience</strong>, not a language or a library alone. Many of the language design decisions were made under constraints like &ldquo;Won&rsquo;t this impede incremental compilation?&rdquo;, &ldquo;What if this increases APK method counts?&rdquo;, &ldquo;How will the IDE highlight this as-you-type?&rdquo;, and many more like these. As a result, we are proud of our <strong>tooling as well as the language</strong>.</p>
<h2>Is it mature enough and ready for production?</h2>
<p>Yes. And it has been for quite some time. At JetBrains, we&rsquo;ve not only been implementing the compiler and tooling but have also been using Kotlin <strong>in real-life projects</strong> on a rather extensive scale over the last two years. In addition to JetBrains, there are quite a few companies that have been using Kotlin <strong>in production</strong> for some time now.</p>
<p>In fact, one of the reasons it took us a long time to reach 1.0 was because we paid extra attention to validating our design decisions in practice. This was and is necessary, because moving forward the compiler will be <strong>backwards compatible</strong> and future versions of Kotlin must not break existing code. As such, whatever choices we&rsquo;ve made we need to stick with them.</p>
<p>Reaching this milestone was something we couldn&rsquo;t have done without the valuable <strong>help of early adopters</strong>. We want to thank each any every one of you for your bravery, energy and enthusiasm!</p>
<h2>Who&rsquo;s behind Kotlin?</h2>
<p>First and foremost, Kotlin is an Open Source language</p>
<ul>
<li>Developed on <a href="https://github.com/JetBrains/kotlin">GitHub</a> <strong>under Apache 2.0 Open-Source license</strong>;</li>
<li>With <strong>over 100 contributors</strong> to date.</li>
</ul>
<p>JetBrains is the main backer of Kotlin at the moment: we have invested a lot of effort into developing it and <strong>we are committed to the project for the long run</strong>. We wrote it out of our own need to use in our own products. And we&rsquo;re happy to say that to date, <strong>close to 10 JetBrains products</strong>, which include IntelliJ IDEA, <a href="https://blog.jetbrains.com/dotnet/2016/01/13/project-rider-a-csharp-ide/">JetBrains Rider</a>, JetBrains Account &amp; E-Shop, YouTrack as well as some of our smaller IDE&rsquo;s and some internal projects are using Kotlin. So <strong>it&rsquo;s here to stay</strong>!</p>
<p>Since 2012 we kept Kotlin&rsquo;s development very open: talking to the community all the time, gathering and addressing lots of feedback.</p>
<p>Moving forward we are planning to set up a centralized venue for design proposals and discussions, to make the process even more visible and organized. Standardization efforts have not been started for Kotlin so far, but we realize that we&rsquo;ll need to do it rather sooner than later.</p>
<p>Language design and overall steering of the project is done by the team employed at JetBrains. We currently have <strong>over 20 people working full time</strong> on Kotlin, which also yet another testament to JetBrains&rsquo; commitment to Kotlin.</p>
<h2>The numbers</h2>
<p>Let&rsquo;s take a look at some numbers:</p>
<ul>
<li><strong>11K+</strong> people were using Kotlin last month and near <strong>5K</strong> last week alone;</li>
<li><strong>Hundreds</strong> of <a href="http://stackoverflow.com/questions/tagged/kotlin">StackOverflow answers</a>;</li>
<li><strong>Two books</strong>: <a href="https://www.manning.com/books/kotlin-in-action">Kotlin in Action</a> and <a href="https://leanpub.com/kotlin-for-android-developers">Kotlin for Android Developers</a>;</li>
<li><strong>About 1400 people</strong> on <a href="http://kotlinlang.slack.com/">Slack</a> (<a href="http://kotlinslackin.herokuapp.com/">get an invite</a>);</li>
<li><strong>Over 500K</strong> lines of Kotlin code in projects such as IntelliJ IDEA and Rider.</li>
</ul>
<p>Talking about lines of code, the number of these in open repositories on GitHub is <strong>growing exponentially over time</strong> (JetBrains&rsquo; projects excluded):</p>
<p><img src="http://blog.jetbrains.com/kotlin/files/2016/02/KotlinAdoption.gif" alt="Kotlin GitHub Adoption"></p>
<p>And of course we have a growing list of <strong>companies using Kotlin</strong> including Prezi and Expedia. By the way, if you&rsquo;re using Kotlin, make sure you send us a <a href="https://github.com/JetBrains/kotlin-web-site/blob/master/_data/companies-using-kotlin.yml">Pull Request</a>.</p>
<h2>The upcoming roadmap</h2>
<p>As of 1.0, we are committed to long-term <strong>backward compatibility</strong> of the language and its standard library (<code>kotlin-stdlib</code>):</p>
<ul>
<li><strong>a newer compiler will work with older binaries</strong> (but older compilers may not understand newer binaries, like javac 1.6 can&rsquo;t read classes compiled by javac 1.8);</li>
<li><strong>older binaries will keep working with newer binaries at runtime</strong> (newer code may require newer dependencies, though).</li>
</ul>
<p>This applies to the JVM/Android support only. The JavaScript support remains experimental for now and will have its own release later on.</p>
<p>As for the plans, our nearest goals are (apart from bug fixes):</p>
<p>Constant performance improvements for the Kotlin toolchain (this includes, for example, incremental compilation in Gradle, that is in the works now);
JavaScript support (including cross-compilation into both JVM and JS where possible);
Support generating Java 8 byte code with optimized lambdas, etc (Java 6 will be actively supported as long as Android users need it).
Tooling updates and bug fixes will be released as incremental updates, i.e. 1.0.X. Bigger changes will first go though an Early Access Program (EAP) and then will be released as 1.1.</p>
<h2>How to start</h2>
<p>The easiest way to play with the language is through its <strong>online mini-IDE</strong>: <a href="https://try.kotlinlang.org/">try.kotl.in</a>, including <a href="http://try.kotlinlang.org/koans">Koans</a> &mdash; a set of introductory problems which <strong>guide you through the basics</strong> of the language.</p>
<p>To use Kotlin on your machine (and Koans can be completed <a href="https://kotlinlang.org/docs/tutorials/koans.html">offline</a> as well):</p>
<ul>
<li><strong>IntelliJ IDEA</strong> (<a href="https://www.jetbrains.com/idea/download/">Ultimate or Community</a>): just create a Kotlin project or a Kotlin file in a Java project;</li>
<li><strong>Android Studio</strong>: install the plugin through <strong><em>Plugin Manager</em></strong>;</li>
<li><strong>Eclipse</strong>: install the plugin through <a href="https://marketplace.eclipse.org/content/kotlin-plugin-eclipse">Marketplace</a>.</li>
</ul>
<p>NOTE: If you are running an older version, you may need to update your Kotlin plugin to 1.0.</p>
<p>To get up to speed with concepts, language <strong>docs and tutorials</strong> are available from the <a href="https://kotlinlang.org/">official web site</a>. Great articles and presentations given by members of our community can be found in the <a href="http://blog.jetbrains.com/kotlin/2016/01/kotlin-digest-2015/">Digest of 2015</a>.</p>
<p>If you&rsquo;re introducing Kotlin to your Java project, you can make use of the <strong>Java-to-Kotlin converter</strong> built into the IDE, helping migration easier class by class.</p>
<p>Last but not least, make sure you join the discussions on our <a href="https://devnet.jetbrains.com/community/kotlin">Forum</a> or <a href="http://kotlinslackin.herokuapp.com/">Slack</a>.</p>
<p>Once again, <strong>we want to thank everyone</strong>. We couldn&rsquo;t have done this without the community.</p>
<p>Have a nice Kotlin! <strong>Now</strong> :)</p>
<p>P.S. See discussions on <a href="https://www.reddit.com/r/programming/comments/45wcnd/kotlin_10_released_pragmatic_language_for_jvm_and/">Reddit</a> and <a href="https://news.ycombinator.com/item?id=11103087">Hacker News</a></p>
]]></description><link>http://blog.jetbrains.com/kotlin/2016/02/kotlin-1-0-released-pragmatic-language-for-jvm-and-android/</link><guid isPermaLink="true">http://blog.jetbrains.com/kotlin/2016/02/kotlin-1-0-released-pragmatic-language-for-jvm-and-android/</guid><category><![CDATA[JetBrains]]></category><category><![CDATA[Kotlin]]></category><dc:creator><![CDATA[Andrey Breslav]]></dc:creator><pubDate>Mon, 15 Feb 2016 09:57:00 GMT</pubDate></item><item><title><![CDATA[Developing Spring Boot applications with Kotlin.]]></title><description><![CDATA[<p>Just in time for <a href="http://blog.jetbrains.com/kotlin/2016/02/kotlin-1-0-released-pragmatic-language-for-jvm-and-android/">Kotlin 1.0 release</a>, we are adding support for Kotlin language to <a href="https://start.spring.io/#!language=kotlin">https://start.spring.io</a> in order to make it easier to start new Spring Boot projects with this language.</p>
<p>This blog post is also an opportunity for me to explain why I find this language interesting, to show you a sample project in detail and to give you some tips.</p>
<h2>What is Kotlin?</h2>
<p><a href="https://kotlinlang.org/">Kotlin</a> is a language created by <a href="https://www.jetbrains.com/">JetBrains</a>. It runs on top of the JVM (but not only), it is an object oriented language that includes many ideas from functional programming. I won&rsquo;t go too much in details about all Kotlin features (<a href="https://kotlinlang.org/docs/kotlin-docs.pdf">PDF</a>, <a href="https://kotlinlang.org/docs/reference/">HTML</a>), but I would like to highlight the ones I find the most interesting:</p>
<ul>
<li>Kotlin is a statically typed language, but thanks to its <a href="https://kotlinlang.org/docs/reference/basic-types.html">clever type inference</a>, it allows you to write code as short and expressive as dynamic language with performances close to pure Java projects</li>
<li><a href="https://kotlinlang.org/docs/reference/properties.html#declaring-properties">Properties support</a></li>
<li>Relatively lightweight standard library compared to other languages</li>
<li>Easy to learn: a Java developer can quickly understand most of the language (this <a href="https://kotlinlang.org/docs/reference/comparison-to-java.html">quick comparison to Java</a> is worth to read)</li>
<li><a href="https://kotlinlang.org/docs/reference/java-interop.html">Java interop</a> is a first class concern and great</li>
<li>Perfect for Android development</li>
<li>Built-in immutability and <a href="https://kotlinlang.org/docs/reference/null-safety.html">null safety</a> support</li>
<li>Code is easy to read, efficient to write</li>
<li>Allows to <a href="https://kotlinlang.org/docs/reference/extensions.html">extend existing libraries</a> without having to inherit from the class or use any type of design pattern such as Decorator</li>
<li>No semicolon required ;-)</li>
</ul>
<p>You will find a lot of useful links to improve your Kotlin knowledge in this <a href="http://blog.jetbrains.com/kotlin/2016/01/kotlin-digest-2015/">Kotlin digest 2015</a> blog post. Also have a look to these simple <a href="http://try.kotlinlang.org/koans">Kotlin exercices</a> to have a quick overview of the language.</p>
<h2>A sample Spring Boot + Kotlin project</h2>
<p>Kotlin has been designed to play well with the Java ecosystem, and it seems to me that it shares the same pragmatic, innovative and opinionated mindset as Spring Boot, so they play well together. You can have a look at this simple <a href="https://github.com/sdeleuze/spring-boot-kotlin-demo">Spring Boot + Spring Data JPA Kotlin project</a> to see more concretely what it looks like.</p>
<p>Kotlin allows to write (and read) your domain model easily thanks to <a href="https://kotlinlang.org/docs/reference/data-classes.html">data classes</a>. The compiler automatically derives the following members from all properties declared in the primary constructor:</p>
<ul>
<li><code>equals()</code> / <code>hashCode()</code> pair</li>
<li><code>toString()</code> of the form &ldquo;Customer(firstName=Foo, lastName=Bar, id=42)&rdquo;</li>
<li><code>componentN()</code> functions corresponding to the properties in their order or declaration</li>
<li><code>copy()</code> function</li>
</ul>
<p>You can see that Kotlin allows you to specify parameter default values, and types are declared after the name of the variable/parameter:</p>
<pre><code class="hljs language-kotlin">@Entity
data <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Customer</span></span>(
	<span class="hljs-variable"><span class="hljs-keyword">var</span> firstName</span>: String = <span class="hljs-string">""</span>,
	<span class="hljs-variable"><span class="hljs-keyword">var</span> lastName</span>: String = <span class="hljs-string">""</span>,
	@Id @GeneratedValue(strategy = GenerationType.AUTO)
	<span class="hljs-variable"><span class="hljs-keyword">var</span> id</span>: <span class="hljs-keyword">Long</span> = <span class="hljs-number">0</span>
)</code></pre>
<p>The Spring MVC REST controller you can see below is using constructor level injection, and default visibility in Kotlin is <code>public</code> so no need to specify it. When a function returns a single expression, the curly braces can be omitted and the body is specified after a <code>=</code> symbol. It is even better since the return type can be inferred by the compiler.</p>
<pre><code class="hljs language-kotlin">@RestController
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomerController</span> @<span class="hljs-title">Autowired</span> <span class="hljs-title">constructor</span></span>(<span class="hljs-variable"><span class="hljs-keyword">val</span> repository</span>:CustomerRepository) {

	@RequestMapping(<span class="hljs-string">"/"</span>)
	<span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">findAll</span><span class="hljs-params">()</span> = repository.<span class="hljs-title">findAll</span><span class="hljs-params">()</span></span>


	@RequestMapping(<span class="hljs-string">"/{name}"</span>)
	<span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">findByLastName</span><span class="hljs-params">(@PathVariable name:<span class="hljs-type">String</span>)</span></span>
		= repository.findByLastName(name)
}</code></pre>
<p>The Spring Data repository is self explanatory:</p>
<pre><code class="hljs language-kotlin">interface CustomerRepository : CrudRepository<span class="hljs-type">&lt;Customer, Long&gt;</span> {
	<span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">findByLastName</span><span class="hljs-params">(name: <span class="hljs-type">String</span>)</span>: List<span class="hljs-type">&lt;Customer&gt;</span></span>
}</code></pre>
<p>Since Kotlin supports top-level functions, you can declare your application as simple as:</p>
<pre><code class="hljs language-kotlin">@SpringBootApplication
<span class="hljs-keyword">open</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> </span>{

	@Bean
	<span class="hljs-keyword">open</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">init</span><span class="hljs-params">(repository: <span class="hljs-type">CustomerRepository</span>)</span> = CommandLineRunner {</span>
		repository.save(Customer(<span class="hljs-string">"Jack"</span>, <span class="hljs-string">"Bauer"</span>))
		repository.save(Customer(<span class="hljs-string">"Chloe"</span>, <span class="hljs-string">"O'Brian"</span>))
		repository.save(Customer(<span class="hljs-string">"Kim"</span>, <span class="hljs-string">"Bauer"</span>))
		repository.save(Customer(<span class="hljs-string">"David"</span>, <span class="hljs-string">"Palmer"</span>))
		repository.save(Customer(<span class="hljs-string">"Michelle"</span>, <span class="hljs-string">"Dessler"</span>))
	}
}

<span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">(args: <span class="hljs-type">Array&lt;String&gt;</span>)</span> {</span>
	SpringApplication.run(Application::<span class="hljs-class"><span class="hljs-keyword">class</span>.<span class="hljs-title">java</span>, <span class="hljs-type">*args)</span></span>
}</code></pre>
<p>You need to mark <code>@Configuration</code> classes, some others like most <code>@Component</code> ones and <code>@Bean</code> methods as <code>open</code> because they cannot be <code>final</code> in Spring due to proxy usage (classes and methods in Kotlin are <code>final</code> by default without the <code>open</code> modifier).</p>
<h2>Additional tips</h2>
<p>Even if Spring Boot and Kotlin work pretty well together, these additional tips are worth to know.</p>
<h3>Property injection</h3>
<p>We have seen previously how to do constructor injection, since that&rsquo;s the <a href="http://olivergierke.de/2013/11/why-field-injection-is-evil/">recommended approach</a> (especially with Kotlin). If you have to perform property injection, you will have to use <a href="https://kotlinlang.org/docs/reference/properties.html#late-initialized-properties">late-initialized properties</a> because normally, raw properties declared as having a non-null type must be initialized in the constructor.</p>
<pre><code class="hljs language-kotlin">@RestController
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomerController</span> </span>{

	@Autowired
	lateinit <span class="hljs-variable"><span class="hljs-keyword">var</span> repository</span>:CustomerRepository

	<span class="hljs-comment">// ...</span>
}</code></pre>
<h3>Property placeholders</h3>
<p><code>$</code> is used for <a href="https://kotlinlang.org/docs/reference/basic-types.html#string-templates">String interpolation</a> in Kotlin, so you should escape it when using property placeholders: <code>@Value(&quot;\${some.property}&quot;)</code>. As an alternative you can also use <code>@ConfigurationProperties</code> instead, see <a href="http://stackoverflow.com/a/33883230/1092077">this Stack Overflow</a> answer for more details.</p>
<h3>Array annotation attribute</h3>
<p>Unlike Java, Kotlin does not allow to specify array annotation attribute as a single value, so be aware that you will have to write <code>@RequestMapping(method = arrayOf(RequestMethod.GET))</code> or <code>@EnableAutoConfiguration(exclude = arrayOf(Foo::class))</code>.</p>
<p>It will be possible to use a shorter syntax with upcoming Spring Framework 4.3 composed annotations like <code>@GetMapping</code>, see <a href="https://jira.spring.io/browse/SPR-13992">SPR-13992</a> for more details.</p>
<h3>Jackson Kotlin Module</h3>
<p>If you are using Jackson you are likely to want to add <code>com.fasterxml.jackson.module:jackson-module-kotlin</code> dependency in order to allow it to deal with data classes with no default constructor or with Kotlin collections.</p>
<p>In addition to the dependency, you need to register it in Jackson <code>ObjectMapper</code>:</p>
<pre><code class="hljs language-kotlin">@SpringBootApplication
<span class="hljs-keyword">open</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> </span>{

	@Bean
	<span class="hljs-keyword">open</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">objectMapperBuilder</span><span class="hljs-params">()</span>: Jackson2ObjectMapperBuilder</span>
	    = Jackson2ObjectMapperBuilder().modulesToInstall(KotlinModule())

	<span class="hljs-comment">// ...</span>
}</code></pre>
<h3>Experiment with the Java to Kotlin converter</h3>
<p>Last tip, the Java to Kotlin converter available in IntelliJ IDEA (Menu Code -&gt; Convert Java file to Kotlin file) is quite useful when you can&rsquo;t figure out how to write something in Kotlin. So do not hesitate to write something in Java and use it to find the Kotlin counterpart. This <a href="https://kotlinlang.org/docs/reference/comparison-to-java.html">comparison to Java documentation</a> can also provide some help.</p>
<h2>Feedbacks</h2>
<p>We are interested by your feedbacks about developing Spring applications with Kotlin. This blog post is just an introduction, there is much more to say especially about using Spring Boot with more Kotlin idiomatic code like with <a href="https://github.com/JetBrains/Exposed">Exposed</a> SQL library, so stay tuned &hellip;</p>
]]></description><link>https://spring.io/blog/2016/02/15/developing-spring-boot-applications-with-kotlin</link><guid isPermaLink="true">https://spring.io/blog/2016/02/15/developing-spring-boot-applications-with-kotlin</guid><category><![CDATA[Kotlin]]></category><category><![CDATA[Spring]]></category><dc:creator><![CDATA[Sébastien Deleuze]]></dc:creator><pubDate>Mon, 15 Feb 2016 09:58:00 GMT</pubDate></item><item><title><![CDATA[[RU] Релиз Kotlin 1.0, языка программирования для JVM и Android.]]></title><description><![CDATA[<p>&#x41A;&#x43E;&#x43C;&#x43F;&#x430;&#x43D;&#x438;&#x44F; Jetbrains, &#x440;&#x430;&#x437;&#x432;&#x438;&#x432;&#x430;&#x44E;&#x449;&#x430;&#x44F; &#x438;&#x43D;&#x442;&#x435;&#x433;&#x440;&#x438;&#x440;&#x43E;&#x432;&#x430;&#x43D;&#x43D;&#x443;&#x44E; &#x441;&#x440;&#x435;&#x434;&#x443; &#x440;&#x430;&#x437;&#x440;&#x430;&#x431;&#x43E;&#x442;&#x43A;&#x438; IntelliJ IDEA, <a href="http://blog.jetbrains.com/kotlin/2016/02/kotlin-1-0-released-pragmatic-language-for-jvm-and-android/">&#x43F;&#x440;&#x435;&#x434;&#x441;&#x442;&#x430;&#x432;&#x438;&#x43B;&#x430;</a> &#x43F;&#x435;&#x440;&#x432;&#x44B;&#x439; &#x437;&#x43D;&#x430;&#x447;&#x438;&#x442;&#x435;&#x43B;&#x44C;&#x43D;&#x44B;&#x439; &#x440;&#x435;&#x43B;&#x438;&#x437; &#x43E;&#x431;&#x44A;&#x435;&#x43A;&#x442;&#x43D;&#x43E;-&#x43E;&#x440;&#x438;&#x435;&#x43D;&#x442;&#x438;&#x440;&#x43E;&#x432;&#x430;&#x43D;&#x43D;&#x43E;&#x433;&#x43E; &#x44F;&#x437;&#x44B;&#x43A;&#x430; &#x43F;&#x440;&#x43E;&#x433;&#x440;&#x430;&#x43C;&#x43C;&#x438;&#x440;&#x43E;&#x432;&#x430;&#x43D;&#x438;&#x44F; <a href="https://kotlinlang.org/">Kotlin 1.0</a>, &#x43F;&#x43E;&#x437;&#x432;&#x43E;&#x43B;&#x44F;&#x44E;&#x449;&#x435;&#x433;&#x43E; &#x441;&#x43E;&#x437;&#x434;&#x430;&#x432;&#x430;&#x442;&#x44C; &#x43F;&#x440;&#x438;&#x43B;&#x43E;&#x436;&#x435;&#x43D;&#x438;&#x44F;, &#x441;&#x43A;&#x43E;&#x43C;&#x43F;&#x438;&#x43B;&#x438;&#x440;&#x43E;&#x432;&#x430;&#x43D;&#x43D;&#x44B;&#x435; &#x434;&#x43B;&#x44F; &#x43F;&#x43E;&#x441;&#x43B;&#x435;&#x434;&#x443;&#x44E;&#x449;&#x435;&#x433;&#x43E; &#x432;&#x44B;&#x43F;&#x43E;&#x43B;&#x43D;&#x435;&#x43D;&#x438;&#x44F; &#x432;&#x43D;&#x443;&#x442;&#x440;&#x438; &#x441;&#x442;&#x430;&#x43D;&#x434;&#x430;&#x440;&#x442;&#x43D;&#x43E;&#x439; &#x432;&#x438;&#x440;&#x442;&#x443;&#x430;&#x43B;&#x44C;&#x43D;&#x43E;&#x439; &#x43C;&#x430;&#x448;&#x438;&#x43D;&#x44B; Java (JVM) &#x438;&#x43B;&#x438; Android. &#x414;&#x43E;&#x43F;&#x43E;&#x43B;&#x43D;&#x438;&#x442;&#x435;&#x43B;&#x44C;&#x43D;&#x43E; &#x43F;&#x43E;&#x434;&#x434;&#x435;&#x440;&#x436;&#x438;&#x432;&#x430;&#x435;&#x442;&#x441;&#x44F; &#x43F;&#x440;&#x435;&#x43E;&#x431;&#x440;&#x430;&#x437;&#x43E;&#x432;&#x430;&#x43D;&#x438;&#x435; &#x43F;&#x440;&#x43E;&#x433;&#x440;&#x430;&#x43C;&#x43C; &#x432; JavaScript-&#x43F;&#x440;&#x435;&#x434;&#x441;&#x442;&#x430;&#x432;&#x43B;&#x435;&#x43D;&#x438;&#x435; &#x434;&#x43B;&#x44F; &#x437;&#x430;&#x43F;&#x443;&#x441;&#x43A;&#x430; &#x432;&#x43D;&#x443;&#x442;&#x440;&#x438; &#x431;&#x440;&#x430;&#x443;&#x437;&#x435;&#x440;&#x430;, &#x43D;&#x43E; &#x434;&#x430;&#x43D;&#x43D;&#x430;&#x44F; &#x444;&#x443;&#x43D;&#x43A;&#x446;&#x438;&#x43E;&#x43D;&#x430;&#x43B;&#x44C;&#x43D;&#x43E;&#x441;&#x442;&#x44C; &#x43F;&#x43E;&#x43A;&#x430; &#x43E;&#x442;&#x43D;&#x435;&#x441;&#x435;&#x43D;&#x430; &#x43A; &#x44D;&#x43A;&#x441;&#x43F;&#x435;&#x440;&#x438;&#x43C;&#x435;&#x43D;&#x442;&#x430;&#x43B;&#x44C;&#x43D;&#x44B;&#x43C; &#x432;&#x43E;&#x437;&#x43C;&#x43E;&#x436;&#x43D;&#x43E;&#x441;&#x442;&#x44F;&#x43C;.</p>
<p>&#x412;&#x44B;&#x43F;&#x443;&#x441;&#x43A; 1.0 &#x43F;&#x43E;&#x437;&#x438;&#x446;&#x438;&#x43E;&#x43D;&#x438;&#x440;&#x443;&#x435;&#x442;&#x441;&#x44F; &#x43A;&#x430;&#x43A; &#x43F;&#x435;&#x440;&#x432;&#x44B;&#x439; &#x432;&#x44B;&#x43F;&#x443;&#x441;&#x43A;, &#x433;&#x43E;&#x442;&#x43E;&#x432;&#x44B;&#x439; &#x434;&#x43B;&#x44F; &#x43F;&#x440;&#x43E;&#x43C;&#x44B;&#x448;&#x43B;&#x435;&#x43D;&#x43D;&#x43E;&#x433;&#x43E; &#x43F;&#x440;&#x438;&#x43C;&#x435;&#x43D;&#x435;&#x43D;&#x438;&#x44F;. &#x412;&#x441;&#x435; &#x434;&#x430;&#x43B;&#x44C;&#x43D;&#x435;&#x439;&#x448;&#x438;&#x435; &#x43E;&#x431;&#x43D;&#x43E;&#x432;&#x43B;&#x435;&#x43D;&#x438;&#x44F; &#x431;&#x443;&#x434;&#x443;&#x442; &#x432;&#x44B;&#x43F;&#x443;&#x441;&#x43A;&#x430;&#x442;&#x44C;&#x441;&#x44F; &#x441; &#x443;&#x447;&#x451;&#x442;&#x43E;&#x43C; &#x441;&#x43E;&#x445;&#x440;&#x430;&#x43D;&#x435;&#x43D;&#x438;&#x44F; &#x43E;&#x431;&#x440;&#x430;&#x442;&#x43D;&#x43E;&#x439; &#x441;&#x43E;&#x432;&#x43C;&#x435;&#x441;&#x442;&#x438;&#x43C;&#x43E;&#x441;&#x442;&#x438;. &#x418;&#x441;&#x445;&#x43E;&#x434;&#x43D;&#x44B;&#x435; &#x442;&#x435;&#x43A;&#x441;&#x442;&#x44B; <a href="http://github.com/jetbrains/kotlin">&#x43E;&#x442;&#x43A;&#x440;&#x44B;&#x442;&#x44B;</a> &#x43F;&#x43E;&#x434; &#x43B;&#x438;&#x446;&#x435;&#x43D;&#x437;&#x438;&#x435;&#x439; Apache 2.0. &#x41F;&#x43B;&#x430;&#x433;&#x438;&#x43D;&#x44B; &#x441; &#x43F;&#x43E;&#x434;&#x434;&#x435;&#x440;&#x436;&#x43A;&#x43E;&#x439; Kotlin &#x43F;&#x43E;&#x434;&#x433;&#x43E;&#x442;&#x43E;&#x432;&#x43B;&#x435;&#x43D;&#x44B; &#x434;&#x43B;&#x44F; &#x438;&#x43D;&#x442;&#x435;&#x433;&#x440;&#x438;&#x440;&#x43E;&#x432;&#x430;&#x43D;&#x43D;&#x44B;&#x445; &#x441;&#x440;&#x435;&#x434; &#x440;&#x430;&#x437;&#x440;&#x430;&#x431;&#x43E;&#x442;&#x43A;&#x438; IntelliJ IDEA, Eclipse &#x438; Android Studio. &#x418;&#x437; &#x441;&#x438;&#x441;&#x442;&#x435;&#x43C; &#x441;&#x431;&#x43E;&#x440;&#x43A;&#x438; &#x43F;&#x43E;&#x434;&#x434;&#x435;&#x440;&#x436;&#x438;&#x432;&#x430;&#x44E;&#x442;&#x441;&#x44F; Maven, Gradle &#x438; Ant.</p>
<p>&#x42F;&#x437;&#x44B;&#x43A; &#x440;&#x430;&#x437;&#x432;&#x438;&#x432;&#x430;&#x435;&#x442;&#x441;&#x44F; &#x432; &#x441;&#x430;&#x43D;&#x43A;&#x442;-&#x43F;&#x435;&#x442;&#x435;&#x440;&#x431;&#x443;&#x440;&#x433;&#x441;&#x43A;&#x43E;&#x43C; &#x446;&#x435;&#x43D;&#x442;&#x440;&#x435; &#x440;&#x430;&#x437;&#x440;&#x430;&#x431;&#x43E;&#x442;&#x43A;&#x438; &#x43A;&#x43E;&#x43C;&#x43F;&#x430;&#x43D;&#x438;&#x438; JetBrains c &#x446;&#x435;&#x43B;&#x44C;&#x44E; &#x441;&#x43E;&#x437;&#x434;&#x430;&#x43D;&#x438;&#x44F; &#x43C;&#x430;&#x43A;&#x441;&#x438;&#x43C;&#x430;&#x43B;&#x44C;&#x43D;&#x43E; &#x441;&#x43E;&#x432;&#x43C;&#x435;&#x441;&#x442;&#x438;&#x43C;&#x43E;&#x433;&#x43E; &#x441; Java &#x44F;&#x437;&#x44B;&#x43A;&#x430; &#x43F;&#x440;&#x43E;&#x433;&#x440;&#x430;&#x43C;&#x43C;&#x438;&#x440;&#x43E;&#x432;&#x430;&#x43D;&#x438;&#x44F;, &#x43E;&#x434;&#x43D;&#x43E;&#x432;&#x440;&#x435;&#x43C;&#x435;&#x43D;&#x43D;&#x43E; &#x43B;&#x438;&#x448;&#x451;&#x43D;&#x43D;&#x43E;&#x433;&#x43E; &#x43E;&#x433;&#x440;&#x430;&#x43D;&#x438;&#x447;&#x435;&#x43D;&#x438;&#x439; &#x438; &#x43D;&#x435;&#x434;&#x43E;&#x441;&#x442;&#x430;&#x442;&#x43A;&#x43E;&#x432; Java, &#x43E;&#x442; &#x43A;&#x43E;&#x442;&#x43E;&#x440;&#x44B;&#x445; Java &#x43D;&#x435; &#x43C;&#x43E;&#x436;&#x435;&#x442; &#x438;&#x437;&#x431;&#x430;&#x432;&#x438;&#x442;&#x44C;&#x441;&#x44F; &#x438;&#x437;-&#x437;&#x430; &#x43D;&#x435;&#x43E;&#x431;&#x445;&#x43E;&#x434;&#x438;&#x43C;&#x43E;&#x441;&#x442;&#x438; &#x43E;&#x431;&#x435;&#x441;&#x43F;&#x435;&#x447;&#x435;&#x43D;&#x438;&#x44F; &#x43E;&#x431;&#x440;&#x430;&#x442;&#x43D;&#x43E;&#x439; &#x441;&#x43E;&#x432;&#x43C;&#x435;&#x441;&#x442;&#x438;&#x43C;&#x43E;&#x441;&#x442;&#x438;. &#x41F;&#x440;&#x438; &#x44D;&#x442;&#x43E;&#x43C; &#x43F;&#x440;&#x43E;&#x435;&#x43A;&#x442;&#x44B; &#x43D;&#x430; Kotlin &#x43F;&#x43E;&#x43B;&#x43D;&#x43E;&#x441;&#x442;&#x44C;&#x44E; &#x441;&#x43E;&#x432;&#x43C;&#x435;&#x441;&#x442;&#x438;&#x43C;&#x44B; &#x441; &#x43A;&#x43E;&#x43C;&#x43F;&#x43E;&#x43D;&#x435;&#x43D;&#x442;&#x430;&#x43C;&#x438; &#x43D;&#x430; &#x44F;&#x437;&#x44B;&#x43A;&#x435; Java - &#x438;&#x437; &#x43F;&#x440;&#x43E;&#x433;&#x440;&#x430;&#x43C;&#x43C; Kotlin &#x43C;&#x43E;&#x436;&#x43D;&#x43E; &#x432;&#x44B;&#x437;&#x44B;&#x432;&#x430;&#x442;&#x44C; Java-&#x43A;&#x43B;&#x430;&#x441;&#x441;&#x44B; &#x438; &#x43D;&#x430;&#x43E;&#x431;&#x43E;&#x440;&#x43E;&#x442;, &#x438;&#x437; Java &#x432;&#x44B;&#x437;&#x44B;&#x432;&#x430;&#x442;&#x44C; &#x43A;&#x43E;&#x43C;&#x43F;&#x43E;&#x43D;&#x435;&#x43D;&#x442;&#x44B;, &#x43D;&#x430;&#x43F;&#x438;&#x441;&#x430;&#x43D;&#x43D;&#x44B;&#x435; &#x43D;&#x430; Kotlin. &#x41A;&#x440;&#x43E;&#x43C;&#x435; &#x432;&#x43E;&#x437;&#x43C;&#x43E;&#x436;&#x43D;&#x43E;&#x441;&#x442;&#x438; &#x438;&#x441;&#x43F;&#x43E;&#x43B;&#x44C;&#x437;&#x43E;&#x432;&#x430;&#x43D;&#x438;&#x44F; &#x448;&#x442;&#x430;&#x442;&#x43D;&#x44B;&#x445; Java-&#x431;&#x438;&#x431;&#x438;&#x43B;&#x438;&#x43E;&#x442;&#x435;&#x43A; &#x434;&#x43B;&#x44F; Kotlin &#x43F;&#x43E;&#x434;&#x433;&#x43E;&#x442;&#x43E;&#x432;&#x43B;&#x435;&#x43D;&#x430; &#x431;&#x43E;&#x43B;&#x44C;&#x448;&#x430;&#x44F; &#x431;&#x438;&#x431;&#x43B;&#x438;&#x43E;&#x442;&#x435;&#x43A;&#x430; &#x43A;&#x43B;&#x430;&#x441;&#x441;&#x43E;&#x432;, &#x43E;&#x43F;&#x442;&#x438;&#x43C;&#x438;&#x437;&#x438;&#x440;&#x43E;&#x432;&#x430;&#x43D;&#x43D;&#x430;&#x44F; &#x434;&#x43B;&#x44F; &#x433;&#x435;&#x43D;&#x435;&#x440;&#x430;&#x446;&#x438;&#x438; &#x431;&#x430;&#x439;&#x442;&#x43A;&#x43E;&#x434;&#x430; &#x43C;&#x438;&#x43D;&#x438;&#x43C;&#x430;&#x43B;&#x44C;&#x43D;&#x43E;&#x433;&#x43E; &#x440;&#x430;&#x437;&#x43C;&#x435;&#x440;&#x430;.</p>
<p>&#x418;&#x437; &#x43E;&#x442;&#x43B;&#x438;&#x447;&#x438;&#x442;&#x435;&#x43B;&#x44C;&#x43D;&#x44B;&#x445; &#x447;&#x435;&#x440;&#x442; &#x44F;&#x437;&#x44B;&#x43A;&#x430; Kotlin &#x43C;&#x43E;&#x436;&#x43D;&#x43E; &#x432;&#x44B;&#x434;&#x435;&#x43B;&#x438;&#x442;&#x44C; &#x43E;&#x440;&#x438;&#x435;&#x43D;&#x442;&#x430;&#x446;&#x438;&#x44E; &#x43D;&#x430; &#x43E;&#x431;&#x435;&#x441;&#x43F;&#x435;&#x447;&#x435;&#x43D;&#x438;&#x435; &#x431;&#x43E;&#x43B;&#x435;&#x435; &#x432;&#x44B;&#x441;&#x43E;&#x43A;&#x43E;&#x439; &#x431;&#x435;&#x437;&#x43E;&#x43F;&#x430;&#x441;&#x43D;&#x43E;&#x441;&#x442;&#x438; &#x437;&#x430; &#x441;&#x447;&#x435;&#x442; &#x440;&#x435;&#x430;&#x43B;&#x438;&#x437;&#x430;&#x446;&#x438;&#x438; &#x441;&#x442;&#x430;&#x442;&#x438;&#x447;&#x435;&#x441;&#x43A;&#x438;&#x445; &#x43F;&#x440;&#x43E;&#x432;&#x435;&#x440;&#x43E;&#x43A; &#x434;&#x43B;&#x44F; &#x432;&#x44B;&#x44F;&#x432;&#x43B;&#x435;&#x43D;&#x438;&#x44F; &#x442;&#x430;&#x43A;&#x438;&#x445; &#x43F;&#x440;&#x43E;&#x431;&#x43B;&#x435;&#x43C; &#x43A;&#x430;&#x43A; &#x440;&#x430;&#x437;&#x44B;&#x43C;&#x435;&#x43D;&#x43E;&#x432;&#x430;&#x43D;&#x438;&#x435; NULL-&#x443;&#x43A;&#x430;&#x437;&#x430;&#x442;&#x435;&#x43B;&#x435;&#x439;. &#x421;&#x440;&#x435;&#x434;&#x438; &#x434;&#x440;&#x443;&#x433;&#x438;&#x445; &#x43E;&#x441;&#x43E;&#x431;&#x435;&#x43D;&#x43D;&#x43E;&#x441;&#x442;&#x435;&#x439;, &#x438;&#x43C;&#x435;&#x44E;&#x449;&#x438;&#x445; &#x43E;&#x442;&#x43D;&#x43E;&#x448;&#x435;&#x43D;&#x438;&#x435; &#x43A; &#x431;&#x435;&#x437;&#x43E;&#x43F;&#x430;&#x441;&#x43D;&#x43E;&#x441;&#x442;&#x438;, &#x43E;&#x442;&#x43C;&#x435;&#x447;&#x430;&#x435;&#x442;&#x441;&#x44F; &#x43E;&#x442;&#x441;&#x443;&#x442;&#x441;&#x442;&#x432;&#x438;&#x435; raw-&#x442;&#x438;&#x43F;&#x43E;&#x432;, &#x43F;&#x43E;&#x43B;&#x43D;&#x43E;&#x435; &#x441;&#x43E;&#x445;&#x440;&#x430;&#x43D;&#x435;&#x43D;&#x438;&#x435; &#x438;&#x43D;&#x444;&#x43E;&#x440;&#x43C;&#x430;&#x446;&#x438;&#x438; &#x43E; &#x442;&#x438;&#x43F;&#x430;&#x445; &#x432; &#x43F;&#x440;&#x43E;&#x446;&#x435;&#x441;&#x441;&#x435; &#x432;&#x44B;&#x43F;&#x43E;&#x43B;&#x43D;&#x435;&#x43D;&#x438;&#x44F; &#x438; &#x440;&#x435;&#x430;&#x43B;&#x438;&#x437;&#x430;&#x446;&#x438;&#x44F; &#x43C;&#x430;&#x441;&#x441;&#x438;&#x432;&#x43E;&#x432; &#x432; &#x432;&#x438;&#x434;&#x435; <a href="http://confluence.jetbrains.net/display/Kotlin/Basic+types#Basictypes-Arrays">&#x438;&#x43D;&#x432;&#x430;&#x440;&#x438;&#x430;&#x43D;&#x442;&#x430;</a>. &#x418;&#x437; &#x440;&#x430;&#x441;&#x448;&#x438;&#x440;&#x435;&#x43D;&#x43D;&#x44B;&#x445; &#x44F;&#x437;&#x44B;&#x43A;&#x43E;&#x432;&#x44B;&#x445; &#x432;&#x43E;&#x437;&#x43C;&#x43E;&#x436;&#x43D;&#x43E;&#x441;&#x442;&#x435;&#x439; &#x43E;&#x442;&#x43C;&#x435;&#x447;&#x430;&#x435;&#x442;&#x441;&#x44F; &#x43F;&#x43E;&#x434;&#x434;&#x435;&#x440;&#x436;&#x43A;&#x430; <a href="http://ru.wikipedia.org/wiki/%D0%A4%D1%83%D0%BD%D0%BA%D1%86%D0%B8%D1%8F_%D0%B2%D1%8B%D1%81%D1%88%D0%B5%D0%B3%D0%BE_%D0%BF%D0%BE%D1%80%D1%8F%D0%B4%D0%BA%D0%B0">&#x444;&#x443;&#x43D;&#x43A;&#x446;&#x438;&#x439; &#x432;&#x44B;&#x441;&#x448;&#x435;&#x433;&#x43E; &#x43F;&#x43E;&#x440;&#x44F;&#x434;&#x43A;&#x430;</a>, <a href="http://ru.wikipedia.org/wiki/%D0%92%D1%8B%D0%B2%D0%BE%D0%B4_%D1%82%D0%B8%D0%BF%D0%BE%D0%B2">&#x432;&#x44B;&#x432;&#x43E;&#x434;&#x430; &#x442;&#x438;&#x43F;&#x43E;&#x432;</a> &#x437;&#x43D;&#x430;&#x447;&#x435;&#x43D;&#x438;&#x439; &#x43D;&#x430; &#x43E;&#x441;&#x43D;&#x43E;&#x432;&#x430;&#x43D;&#x438;&#x438; &#x432;&#x44B;&#x440;&#x430;&#x436;&#x435;&#x43D;&#x438;&#x44F;, &#x438;&#x441;&#x43F;&#x43E;&#x43B;&#x44C;&#x437;&#x43E;&#x432;&#x430;&#x43D;&#x438;&#x435; &#x443;&#x442;&#x43E;&#x447;&#x43D;&#x44F;&#x44E;&#x449;&#x438;&#x445; &quot;<a href="http://ru.wikipedia.org/wiki/%D0%9F%D1%80%D0%B8%D0%BC%D0%B5%D1%81%D1%8C_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5)">&#x43F;&#x440;&#x438;&#x43C;&#x435;&#x441;&#x435;&#x439;</a>&quot; (mixin) &#x438; <a href="http://ru.wikipedia.org/wiki/%D0%94%D0%B5%D0%BB%D0%B5%D0%B3%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5_(%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5)">&#x434;&#x435;&#x43B;&#x435;&#x433;&#x438;&#x440;&#x43E;&#x432;&#x430;&#x43D;&#x438;&#x44F;</a>.</p>
]]></description><link>http://www.opennet.ru/opennews/art.shtml?num=43882</link><guid isPermaLink="true">http://www.opennet.ru/opennews/art.shtml?num=43882</guid><category><![CDATA[Kotlin]]></category><category><![CDATA[JVM]]></category><dc:creator><![CDATA[Open Source]]></dc:creator><pubDate>Tue, 16 Feb 2016 08:21:00 GMT</pubDate></item><item><title><![CDATA[Kotlin 1.0: The good, the bad and the evident.]]></title><description><![CDATA[<p>Kotlin 1.0 is a programming language made by JetBrains, the creator of the popular IntelliJ IDEA development environment. This programming language for the JVM and Android focuses on safety, interoperability, clarity and tooling support and combines OO and functional features.</p>
<p>After a long wait, Kotlin 1.0 is finally here! According to the <a href="http://blog.jetbrains.com/kotlin/2016/02/kotlin-1-0-released-pragmatic-language-for-jvm-and-android/">official announcement</a>, &rdquo; Kotlin works everywhere where Java works: server-side applications, mobile applications (Android), desktop applications. It works with all major tools and services such as IntelliJ IDEA, Android Studio and Eclipse, Maven, Gradle and Ant, Spring Boot, GitHub, Slack and even Minecraft.&rdquo;</p>
<p>Interoperability and seamless support for mixed Java+ Kotlin projects has been a focal point in the making of this project. Adoption is easier, which leads to less boilerplate code and more type-safety. Plus, the new programming language has a huge standard library which makes daily tasks not only easy, but also smooth while maintaining the byte code footprint low. Kotlin has been dubbed a &lsquo;pragmatic&rsquo; programming language because in its creation developers focused on use cases to transform it into a good tool. Utility was the idea behind Kotlin 1.0, as emphasized by Andrey Breslav, the lead language designer of Kotlin: &rdquo; the less our users have to re-learn, re-invent, re-do from scratch, the more they can re-use, the better.&rdquo;</p>
<p>Breslav explained that Kotlin 1.0 is mature enough and ready for production because the team has been using it in real-life projects on a broad scale over the past couple of years and pointed out that a handful of other companies have been using this new programming language in production &ldquo;for some time now.&rdquo;  The lead language designer of Kotlin revealed that the reason why it took so long for them to produce 1.0 was that they paid extra attention to validating their design decision in practice.</p>
<p>The team has kept Kotlin&rsquo;s development very open since 2012 and has continuously talked to the community, collecting and addressing lots of feedback. Breslav announced that they are planning to establish a centralized venue for design proposals and discussions in order to make the process even more organized and visible. The team&rsquo;s goals in the near future are to offer constant performance improvements for the Kotlin toolchain, JavaScript support and support generating Java 8 byte code.</p>
<h2>The good about Kotlin</h2>
<p>Mike Hearn, a former bitcoin core developer who recently made waves when he declared that the bitcoin project had &ldquo;failed&rdquo;, wrote in a post on <a href="https://medium.com/@octskyward/why-kotlin-is-my-next-programming-language-c25c001e26e3#.w9lbw7fso">Medium</a> last July that Kotlin is the programming language he will probably use for the next five to 10 years. He opined that Kotlin is &ldquo;of greatest interest to people who work with Java today, although it could appeal to all programmers who use a garbage collected runtime, including people who currently use Scala, Go, Python, Ruby and JavaScript.&rdquo;</p>
<p>According to Hearn, this programming language &ldquo;comes from industry, not academia and solves problems faced by working programmers today.&rdquo; It is open source, approachable and can be learned in a few hours by reading the language reference. &ldquo;The syntax is lean and intuitive. Kotlin looks a lot like Scala, but is simpler,&rdquo; he added. It allows developers to continue to use their productivity enhancing tools and adopting it is low risk because &ldquo;it can be trialled in a small part of your code base by one or two enthusiastic team members without disrupting the rest of your project.&rdquo;</p>
<h2>The bad: pre-1.0</h2>
<p>As Breslav remarked in the official announcement, the team took their time before they released Kotlin 1.0 because they paid extra attention to validating their design decision on practice. Therefore, all the problems pointed out by Hearn in his review of Kotlin should not exist anymore now that Kotlin 1.0 has been released. The former bitcoin core developer pointed out that Kotlin&rsquo;s biggest problems were its immaturity (because it was a pre 1.0 language) and that sometimes the requirements of Java interop resulted in unintuitive limitations.</p>
<p>Hearn also criticized the size of the community, which was smaller at that time. However, according to Breslav, over 11.000 people were using Kotlin last month and almost 5.000 earlier this month. Plus, there is a growing list of companies using Kotlin, including Expedia and Prezi.</p>
<p>Language docs and tutorials can be found on the <a href="https://kotlinlang.org/">official website</a>.</p>
]]></description><link>https://jaxenter.com/kotlin-1-0-the-good-the-bad-and-the-evidence-124041.html</link><guid isPermaLink="true">https://jaxenter.com/kotlin-1-0-the-good-the-bad-and-the-evidence-124041.html</guid><category><![CDATA[Kotlin]]></category><category><![CDATA[Review]]></category><dc:creator><![CDATA[Gabriela Motroc]]></dc:creator><pubDate>Tue, 16 Feb 2016 14:11:00 GMT</pubDate></item><item><title><![CDATA[[RU] Kotlin 1.0. Задай вопрос команде.]]></title><description><![CDATA[<h2>Kotlin 1.0. &#x417;&#x430;&#x434;&#x430;&#x439; &#x432;&#x43E;&#x43F;&#x440;&#x43E;&#x441; &#x43A;&#x43E;&#x43C;&#x430;&#x43D;&#x434;&#x435;</h2>
<p>&#x41D;&#x430; &#x44D;&#x442;&#x43E;&#x439; &#x43D;&#x435;&#x434;&#x435;&#x43B;&#x435; &#x441;&#x43B;&#x443;&#x447;&#x438;&#x43B;&#x43E;&#x441;&#x44C; &#x432;&#x430;&#x436;&#x43D;&#x43E;&#x435; &#x434;&#x43B;&#x44F; &#x43D;&#x430;&#x441; &#x441;&#x43E;&#x431;&#x44B;&#x442;&#x438;&#x435; &mdash; <a href="http://blog.jetbrains.com/kotlin/2016/02/kotlin-1-0-released-pragmatic-language-for-jvm-and-android/">&#x432;&#x44B;&#x448;&#x43B;&#x430; &#x43F;&#x435;&#x440;&#x432;&#x430;&#x44F; &#x432;&#x435;&#x440;&#x441;&#x438;&#x44F;</a> &#x44F;&#x437;&#x44B;&#x43A;&#x430; &#x43F;&#x440;&#x43E;&#x433;&#x440;&#x430;&#x43C;&#x43C;&#x438;&#x440;&#x43E;&#x432;&#x430;&#x43D;&#x438;&#x44F; <a href="http://kotlinlang.org/">Kotlin</a>! &#x422;&#x430;&#x43A; &#x43A;&#x430;&#x43A; &#x43F;&#x43E;&#x447;&#x442;&#x438; &#x432;&#x441;&#x44F; &#x440;&#x430;&#x437;&#x440;&#x430;&#x431;&#x43E;&#x442;&#x43A;&#x430; Kotlin &#x432;&#x435;&#x43B;&#x430;&#x441;&#x44C; &#x432; &#x41F;&#x438;&#x442;&#x435;&#x440;&#x441;&#x43A;&#x43E;&#x43C; &#x43E;&#x444;&#x438;&#x441;&#x435; &#x43A;&#x43E;&#x43C;&#x43F;&#x430;&#x43D;&#x438;&#x438; JetBrains, &#x43C;&#x43D;&#x43E;&#x433;&#x438;&#x435; &#x445;&#x430;&#x431;&#x440;&#x43E;&#x432;&#x447;&#x430;&#x43D;&#x435; &#x443;&#x436;&#x435; &#x437;&#x43D;&#x430;&#x44E;&#x442;, &#x447;&#x442;&#x43E; &#x442;&#x430;&#x43A;&#x43E;&#x435; Kotlin &#x438; &#x43F;&#x440;&#x43E;&#x431;&#x43E;&#x432;&#x430;&#x43B;&#x438; &#x435;&#x433;&#x43E; &#x43D;&#x430; &#x43F;&#x440;&#x430;&#x43A;&#x442;&#x438;&#x43A;&#x435;, &#x43F;&#x43E;&#x44D;&#x442;&#x43E;&#x43C;&#x443; &#x44D;&#x442;&#x43E;&#x442; &#x43F;&#x43E;&#x441;&#x442; &#x431;&#x43E;&#x43B;&#x44C;&#x448;&#x435; &#x434;&#x43B;&#x44F; &#x43A;&#x43E;&#x43C;&#x43C;&#x435;&#x43D;&#x442;&#x430;&#x440;&#x438;&#x435;&#x432;: &#x437;&#x430;&#x434;&#x430;&#x432;&#x430;&#x439;&#x442;&#x435; &#x43B;&#x44E;&#x431;&#x44B;&#x435; &#x432;&#x43E;&#x43F;&#x440;&#x43E;&#x441;&#x44B; &#x438; &#x43A;&#x43E;&#x43C;&#x430;&#x43D;&#x434;&#x430; Kotlin &#x43E;&#x442;&#x432;&#x435;&#x442;&#x438;&#x442;. &#x41C;&#x44B; &#x43E;&#x43D;&#x43B;&#x430;&#x439;&#x43D;!</p>
<p><img src="https://habrastorage.org/getpro/habr/post_images/2f8/f4e/685/2f8f4e6857445ecef579ae6e96e80c60.png" alt="Kotlin"></p>
<p>&#x414;&#x43B;&#x44F; &#x442;&#x435;&#x445;, &#x43A;&#x442;&#x43E; &#x441;&#x43B;&#x44B;&#x448;&#x438;&#x442; &#x43E; Kotlin &#x432;&#x43F;&#x435;&#x440;&#x432;&#x44B;&#x435;, &#x430; &#x442;&#x430;&#x43A; &#x436;&#x435; &#x434;&#x43B;&#x44F; &#x437;&#x430;&#x442;&#x440;&#x430;&#x432;&#x43A;&#x438; &#x440;&#x430;&#x437;&#x433;&#x43E;&#x432;&#x43E;&#x440;&#x430;, &#x43D;&#x435;&#x441;&#x43A;&#x43E;&#x43B;&#x44C;&#x43A;&#x43E; &#x444;&#x430;&#x43A;&#x442;&#x43E;&#x432; &#x43E; Kotlin:</p>
<ul>
<li>Kotlin &mdash; &#x44D;&#x442;&#x43E; &ldquo;&#x43F;&#x440;&#x430;&#x433;&#x43C;&#x430;&#x442;&#x438;&#x447;&#x43D;&#x44B;&#x439;&rdquo; &#x44F;&#x437;&#x44B;&#x43A; &#x434;&#x43B;&#x44F; JVM &#x438; Android, &#x43A;&#x43E;&#x442;&#x43E;&#x440;&#x44B;&#x439; &#x43C;&#x44B; &#x432; JetBrains &#x43D;&#x430;&#x43F;&#x438;&#x441;&#x430;&#x43B;&#x438;, &#x434;&#x43B;&#x44F; &#x442;&#x43E;&#x433;&#x43E; &#x447;&#x442;&#x43E;&#x431;&#x44B; &#x43D;&#x430;&#x43C; &#x431;&#x44B;&#x43B;&#x43E; &#x43D;&#x430; &#x447;&#x435;&#x43C; &#x43F;&#x440;&#x43E;&#x433;&#x440;&#x430;&#x43C;&#x43C;&#x438;&#x440;&#x43E;&#x432;&#x430;&#x442;&#x44C; ;)
<em>Kotlin &#x438;&#x43C;&#x435;&#x435;&#x442; &#x442;&#x443; &#x436;&#x435; &#x43E;&#x431;&#x43B;&#x430;c&#x442;&#x44C; &#x43F;&#x440;&#x438;&#x43C;&#x435;&#x43D;&#x438;&#x43C;&#x43E;&#x441;&#x442;&#x438;, &#x447;&#x442;&#x43E; &#x438; Jav&#x430;, &#x438; &#x441;&#x43E;&#x432;&#x43C;&#x435;&#x441;&#x442;&#x438;&#x43C; &#x441;&#x43E; &#x432;&#x441;&#x435;&#x43C;&#x438; &#x441;&#x43E;&#x432;&#x440;&#x435;&#x43C;&#x435;&#x43D;&#x43D;&#x44B;&#x43C;&#x438; &#x442;&#x435;&#x445;&#x43D;&#x43E;&#x43B;&#x43E;&#x433;&#x438;&#x44F;&#x43C;&#x438; &#x438; &#x438;&#x43D;&#x441;&#x442;&#x440;&#x443;&#x43C;&#x435;&#x43D;&#x442;&#x430;&#x43C;&#x438;:
</em> <a href="http://kotlinlang.org/docs/tutorials/getting-started.html">IntelliJ IDEA</a>, <a href="http://kotlinlang.org/docs/tutorials/kotlin-android.html">Android Studio</a>, <a href="http://kotlinlang.org/docs/tutorials/getting-started-eclipse.html">Eclipse</a>
<em> <a href="http://kotlinlang.org/docs/reference/using-maven.html">Maven</a>, <a href="http://kotlinlang.org/docs/reference/using-gradle.html">Gradle</a>, <a href="http://kotlinlang.org/docs/reference/using-ant.html">Ant</a>
</em> <a href="https://spring.io/blog/2016/02/15/developing-spring-boot-applications-with-kotlin">Spring Boot</a></li>
<li>Kotlin &#x43F;&#x43E;&#x43B;&#x43D;&#x43E;&#x441;&#x442;&#x44C;&#x44E; <a href="http://kotlinlang.org/docs/reference/java-interop.html">&#x441;&#x43E;&#x432;&#x43C;&#x435;&#x441;&#x442;&#x438;&#x43C; &#x441; Java</a>. &#x412; &#x441;&#x43C;&#x435;&#x448;&#x430;&#x43D;&#x43D;&#x44B;&#x445; &#x43F;&#x440;&#x43E;&#x435;&#x43A;&#x442;&#x430;&#x445; &#x43A;&#x43E;&#x434; &#x43D;&#x430; Kotlin &#x43C;&#x43E;&#x436;&#x435;&#x442; &#x43B;&#x435;&#x433;&#x43A;&#x43E; &#x432;&#x44B;&#x437;&#x44B;&#x432;&#x430;&#x442;&#x44C; &#x43A;&#x43E;&#x434; &#x43D;&#x430; Java &#x438; &#x43D;&#x430;&#x43E;&#x431;&#x43E;&#x440;&#x43E;&#x442;. &#x421;&#x43E;&#x43E;&#x442;&#x432;&#x435;&#x442;&#x441;&#x442;&#x432;&#x435;&#x43D;&#x43D;&#x43E;, &#x432;&#x441;&#x435; &#x441;&#x443;&#x449;&#x435;&#x441;&#x442;&#x432;&#x443;&#x44E;&#x449;&#x438;&#x435; Java-&#x431;&#x438;&#x431;&#x43B;&#x438;&#x43E;&#x442;&#x435;&#x43A;&#x438; &#x434;&#x43E;&#x441;&#x442;&#x443;&#x43F;&#x43D;&#x44B; &#x438;&#x437; Kotlin.</li>
<li>&#x412; Kotlin &#x43D;&#x435;&#x43B;&#x435;&#x433;&#x43A;&#x43E; &#x43F;&#x43E;&#x43B;&#x443;&#x447;&#x438;&#x442;&#x44C; Null Pointer Exception, &#x43F;&#x43E;&#x442;&#x43E;&#x43C;&#x443; &#x447;&#x442;&#x43E; &#x441;&#x438;&#x441;&#x442;&#x435;&#x43C;&#x430; &#x442;&#x438;&#x43F;&#x43E;&#x432; &#x438;&#x441;&#x43A;&#x43B;&#x44E;&#x447;&#x430;&#x435;&#x442; &#x44D;&#x442;&#x43E;.</li>
<li>Kotlin &#x43F;&#x43E;&#x437;&#x432;&#x43E;&#x43B;&#x44F;&#x435;&#x442; <a href="http://kotlinlang.org/docs/reference/extensions.html">&#x441;&#x43E;&#x437;&#x434;&#x430;&#x432;&#x430;&#x442;&#x44C; &#x444;&#x443;&#x43D;&#x43A;&#x446;&#x438;&#x438;-&#x440;&#x430;&#x441;&#x448;&#x438;&#x440;&#x435;&#x43D;&#x438;&#x44F;</a> &#x434;&#x43B;&#x44F; &#x441;&#x443;&#x449;&#x435;&#x441;&#x442;&#x432;&#x443;&#x44E;&#x449;&#x438;&#x445; &#x43A;&#x43B;&#x430;&#x441;&#x441;&#x43E;&#x432;. &#x41F;&#x43E;&#x44D;&#x442;&#x43E;&#x43C;&#x443; &#x441;&#x442;&#x430;&#x43D;&#x434;&#x430;&#x440;&#x442;&#x43D;&#x430;&#x44F; &#x431;&#x438;&#x431;&#x43B;&#x438;&#x43E;&#x442;&#x435;&#x43A;&#x430; &#x43D;&#x435; &#x43E;&#x43F;&#x440;&#x435;&#x434;&#x435;&#x43B;&#x44F;&#x435;&#x442; &#x441;&#x432;&#x43E;&#x438; &#x43A;&#x43B;&#x430;&#x441;&#x441;&#x44B; &#x43A;&#x43E;&#x43B;&#x43B;&#x435;&#x43A;&#x446;&#x438;&#x439;, &#x43D;&#x43E; &#x43F;&#x440;&#x435;&#x434;&#x43E;&#x441;&#x442;&#x430;&#x432;&#x43B;&#x44F;&#x435;&#x442; &#x43A;&#x443;&#x447;&#x443; &#x443;&#x434;&#x43E;&#x431;&#x43D;&#x44B;&#x445; &#x444;&#x443;&#x43D;&#x43A;&#x446;&#x438;&#x439; &#x434;&#x43B;&#x44F; &#x440;&#x430;&#x431;&#x43E;&#x442;&#x44B; &#x441; JDK &#x43A;&#x43E;&#x43B;&#x43B;&#x435;&#x43A;&#x446;&#x438;&#x44F;&#x43C;&#x438;</li>
<li>&#x41D;&#x430;&#x447;&#x438;&#x43D;&#x430;&#x44F; &#x441; &#x432;&#x435;&#x440;&#x441;&#x438;&#x438; 1.0 &#x43C;&#x44B; &#x433;&#x430;&#x440;&#x430;&#x43D;&#x442;&#x438;&#x440;&#x443;&#x435;&#x43C; &#x431;&#x438;&#x43D;&#x430;&#x440;&#x43D;&#x443;&#x44E; &#x441;&#x43E;&#x432;&#x43C;&#x435;&#x441;&#x442;&#x438;&#x43C;&#x43E;&#x441;&#x442;&#x44C;. &#x422;&#x430;&#x43A; &#x447;&#x442;&#x43E; &#x442;&#x435;&#x43F;&#x435;&#x440;&#x44C; &#x43C;&#x43E;&#x436;&#x43D;&#x43E; ;)</li>
<li>&#x41D;&#x430;&#x441; &#x43C;&#x43D;&#x43E;&#x433;&#x43E;! &#x417;&#x430; &#x44F;&#x43D;&#x432;&#x430;&#x440;&#x44C; Kotlin &#x438;&#x441;&#x43F;&#x43E;&#x43B;&#x44C;&#x437;&#x43E;&#x432;&#x430;&#x43B;&#x43E; &#x431;&#x43E;&#x43B;&#x44C;&#x448;&#x435; 11 &#x442;&#x44B;&#x441;&#x44F;&#x447; &#x447;&#x435;&#x43B;&#x43E;&#x432;&#x435;&#x43A;, &#x438;&#x437; &#x43D;&#x438;&#x445; 5 &#x442;&#x44B;&#x441;&#x44F;&#x447; &#x437;&#x430; &#x43F;&#x43E;&#x441;&#x43B;&#x435;&#x434;&#x43D;&#x44E;&#x44E; &#x43D;&#x435;&#x434;&#x435;&#x43B;&#x44E;. &#x41F;&#x43E;&#x447;&#x442;&#x438; 2 &#x442;&#x44B;&#x441;&#x44F;&#x447;&#x438; &#x447;&#x435;&#x43B;&#x43E;&#x432;&#x435;&#x43A; &#x43E;&#x431;&#x449;&#x430;&#x44E;&#x442;&#x441;&#x44F; &#x432; &#x43D;&#x430;&#x448;&#x435;&#x43C; Slack-&#x43A;&#x430;&#x43D;&#x430;&#x43B;&#x435; &#x438; &#x43F;&#x43E;&#x43C;&#x43E;&#x433;&#x430;&#x44E;&#x442; &#x434;&#x440;&#x443;&#x433; &#x434;&#x440;&#x443;&#x433;&#x443;. &#x421;&#x435;&#x439;&#x447;&#x430;&#x441; &#x432; &#x43A;&#x43E;&#x43C;&#x430;&#x43D;&#x434;&#x435; Kotlin &#x431;&#x43E;&#x43B;&#x44C;&#x448;&#x435; &#x434;&#x432;&#x430;&#x434;&#x446;&#x430;&#x442;&#x438; &#x447;&#x435;&#x43B;&#x43E;&#x432;&#x435;&#x43A;. &#x412; JetBrains &#x43D;&#x430;&#x43F;&#x438;&#x441;&#x430;&#x43D;&#x43E; &#x43E;&#x43A;&#x43E;&#x43B;&#x43E; 500&#x41A; &#x441;&#x442;&#x440;&#x43E;&#x447;&#x435;&#x43A; &#x43A;&#x43E;&#x434;&#x430; &#x43D;&#x430; Kotlin, &#x431;&#x43E;&#x43B;&#x435;&#x435; &#x447;&#x435;&#x43C; &#x432; &#x434;&#x435;&#x441;&#x44F;&#x442;&#x438; &#x43F;&#x440;&#x43E;&#x435;&#x43A;&#x442;&#x430;&#x445;, &#x430; &#x432; &#x43E;&#x442;&#x43A;&#x440;&#x44B;&#x442;&#x44B;&#x445; &#x440;&#x435;&#x43F;&#x43E;&#x437;&#x438;&#x442;&#x43E;&#x440;&#x438;&#x44F;&#x445; &#x43D;&#x430; GitHub (&#x438;&#x441;&#x43A;&#x43B;&#x44E;&#x447;&#x430;&#x44F; &#x43D;&#x430;&#x448;&#x438;) &#x447;&#x438;&#x441;&#x43B;&#x43E; &#x441;&#x442;&#x440;&#x43E;&#x447;&#x435;&#x43A; &#x440;&#x430;&#x441;&#x442;&#x435;&#x442; &#x44D;&#x43A;&#x441;&#x43F;&#x43E;&#x43D;&#x435;&#x43D;&#x446;&#x438;&#x430;&#x43B;&#x44C;&#x43D;&#x43E;, &#x438; &#x43D;&#x430; &#x43C;&#x43E;&#x43C;&#x435;&#x43D;&#x442; &#x440;&#x435;&#x43B;&#x438;&#x437;&#x430; &#x438;&#x445; &#x443;&#x436;&#x435; &#x431;&#x43E;&#x43B;&#x44C;&#x448;&#x435; &#x434;&#x432;&#x443;&#x445; &#x43C;&#x438;&#x43B;&#x43B;&#x438;&#x43E;&#x43D;&#x43E;&#x432;: <img src="https://habrastorage.org/getpro/habr/post_images/75e/087/333/75e087333d725b9f69ec3d009abf17fe.gif" alt="Kotlin GitHub"></li>
<li>&#x41C;&#x44B; &#x43F;&#x43B;&#x430;&#x43D;&#x438;&#x440;&#x443;&#x435;&#x43C; &#x432;&#x441;&#x43A;&#x43E;&#x440;&#x435; &#x437;&#x430;&#x440;&#x435;&#x43B;&#x438;&#x437;&#x438;&#x442;&#x44C; &#x43F;&#x43E;&#x434;&#x434;&#x435;&#x440;&#x436;&#x43A;&#x443; JavaScript &#x438; Java 8</li>
<li>&#x423; &#x43D;&#x430;&#x441; &#x435;&#x441;&#x442;&#x44C; &#x441;&#x432;&#x43E;&#x44F; &#x43E;&#x43D;&#x43B;&#x430;&#x439;&#x43D;-&#x43F;&#x435;&#x441;&#x43E;&#x447;&#x43D;&#x438;&#x446;&#x430;: <a href="http://try.kotl.in/">http://try.kotl.in</a> &#x412; &#x43D;&#x435;&#x439; &#x435;&#x441;&#x442;&#x44C; &#x441;&#x435;&#x440;&#x438;&#x44F; &#x437;&#x430;&#x434;&#x430;&#x447;&#x435;&#x43A; <a href="http://try.kotl.in/koans">Kotlin Koans</a>, &#x43A;&#x43E;&#x442;&#x43E;&#x440;&#x44B;&#x435; &#x43F;&#x43E;&#x43C;&#x43E;&#x433;&#x430;&#x44E;&#x442; &#x43E;&#x441;&#x432;&#x43E;&#x438;&#x442;&#x44C;&#x441;&#x44F; &#x441; &#x44F;&#x437;&#x44B;&#x43A;&#x43E;&#x43C; &#x431;&#x443;&#x43A;&#x432;&#x430;&#x43B;&#x44C;&#x43D;&#x43E; &#x437;&#x430; &#x43D;&#x435;&#x441;&#x43A;&#x43E;&#x43B;&#x44C;&#x43A;&#x43E; &#x447;&#x430;&#x441;&#x43E;&#x432;. &#x414;&#x435;&#x439;&#x441;&#x442;&#x432;&#x438;&#x442;&#x435;&#x43B;&#x44C;&#x43D;&#x43E; &#x437;&#x430; &#x43D;&#x435;&#x441;&#x43A;&#x43E;&#x43B;&#x44C;&#x43A;&#x43E; &#x447;&#x430;&#x441;&#x43E;&#x432;! &#x422;&#x430;&#x43A;&#x436;&#x435; &#x443; &#x43D;&#x430;&#x441; &#x43E;&#x442;&#x43B;&#x438;&#x447;&#x43D;&#x430;&#x44F; &#x434;&#x43E;&#x43A;&#x443;&#x43C;&#x435;&#x43D;&#x442;&#x430;&#x446;&#x438;&#x44F; &#x43D;&#x430; <a href="http://kotlinlang.org/docs/reference/">&#x43E;&#x444;&#x438;&#x446;&#x438;&#x430;&#x43B;&#x44C;&#x43D;&#x43E;&#x43C; &#x441;&#x430;&#x439;&#x442;&#x435;</a>.</li>
<li>&#x41C;&#x44B; &#x43E;&#x442;&#x43A;&#x440;&#x44B;&#x442;&#x44B;! Kotlin <a href="https://github.com/JetBrains/kotlin">&#x440;&#x430;&#x437;&#x440;&#x430;&#x431;&#x430;&#x442;&#x44B;&#x432;&#x430;&#x435;&#x442;&#x441;&#x44F; &#x43D;&#x430; GitHub</a>, &#x43F;&#x43E;&#x434; &#x43B;&#x438;&#x446;&#x435;&#x43D;&#x437;&#x438;&#x435;&#x439; Apache 2.0. &#x41D;&#x43E; &#x441;&#x430;&#x43C;&#x43E;&#x435; &#x433;&#x43B;&#x430;&#x432;&#x43D;&#x43E;&#x435;, &#x43C;&#x44B; &#x432;&#x441;&#x435;&#x433;&#x434;&#x430; &#x432;&#x43D;&#x438;&#x43C;&#x430;&#x442;&#x435;&#x43B;&#x44C;&#x43D;&#x43E; &#x43F;&#x440;&#x438;&#x441;&#x43B;&#x443;&#x448;&#x438;&#x432;&#x430;&#x435;&#x43C;&#x441;&#x44F; &#x43A;&#x43E; &#x432;&#x441;&#x435;&#x43C;&#x443; &#x432;&#x445;&#x43E;&#x434;&#x44F;&#x449;&#x435;&#x43C;&#x443; &#x444;&#x438;&#x434;&#x431;&#x435;&#x43A;&#x443;, &#x442;&#x430;&#x43A; &#x447;&#x442;&#x43E; &#x442;&#x435;&#x43F;&#x435;&#x440;&#x44C; &#x441;&#x43B;&#x43E;&#x432;&#x43E; &#x432;&#x430;&#x43C;:</li>
</ul>
]]></description><link>https://habrahabr.ru/company/JetBrains/blog/277573/</link><guid isPermaLink="true">https://habrahabr.ru/company/JetBrains/blog/277573/</guid><category><![CDATA[JetBrains]]></category><category><![CDATA[Kotlin]]></category><dc:creator><![CDATA[Роман Белов]]></dc:creator><pubDate>Fri, 19 Feb 2016 13:30:00 GMT</pubDate></item><item><title><![CDATA[The Kobalt diaries: testing]]></title><description><![CDATA[<p>Kobalt automatically detects how to run your tests based on the test dependencies that you declared:</p>
<pre><code class="hljs language-kotlin">dependenciesTest {
    compile(<span class="hljs-string">"org.testng:testng:6.9.9"</span>)
}</code></pre>
<p>By default, Kobalt supports TestNG, JUnit and Spek. You can also configure how your tests run with the test{} directive:</p>
<pre><code class="hljs language-Kotlin">test {
    args(<span class="hljs-string">"-excludegroups"</span>, <span class="hljs-string">"broken"</span>, <span class="hljs-string">"src/test/resources/testng.xml"</span>)
}</code></pre>
<p>The full list of configuration parameters can be found in the <a href="https://github.com/cbeust/kobalt/blob/master/modules/kobalt-plugin-api/src/main/kotlin/com/beust/kobalt/TestDirective.kt#L6">TestConfig</a> class.</p>
<p>Additionally, you can define multiple test configurations, each with a different name. Each configuration will create an additional task named &quot;test&quot; followed by the name of that configuration. For example:</p>
<pre><code class="hljs language-Kotlin">test {
    args(<span class="hljs-string">"-excludegroups"</span>, <span class="hljs-string">"broken"</span>, <span class="hljs-string">"src/test/resources/testng.xml"</span>)
}

test {
    name = <span class="hljs-string">"All"</span>
    args(<span class="hljs-string">"src/test/resources/testng.xml"</span>)
}</code></pre>
<p>The first configuration has no name, so it will be launched with the task &quot;test&quot;, while the second one can be run with the task &quot;testAll&quot;.</p>
<p>The full series of articles on Kobalt can be found <a href="http://beust.com/weblog/category/kobalt/">here</a>.</p>
]]></description><link>http://beust.com/weblog/2016/02/20/the-kobalt-diaries-testing/</link><guid isPermaLink="true">http://beust.com/weblog/2016/02/20/the-kobalt-diaries-testing/</guid><category><![CDATA[Kotlin]]></category><category><![CDATA[Kobalt]]></category><dc:creator><![CDATA[Cédric Beust]]></dc:creator><pubDate>Sat, 20 Feb 2016 07:35:00 GMT</pubDate></item><item><title><![CDATA[[RU] DevZen Podcast: Kotlin и Vulkan 1.0 — Episode 0080.]]></title><description><![CDATA[<p>&#x422;&#x435;&#x43C;&#x44B; &#x432;&#x44B;&#x43F;&#x443;&#x441;&#x43A;&#x430;: &#x421;&#x440;&#x430;&#x432;&#x43D;&#x435;&#x43D;&#x438;&#x435; &#x440;&#x430;&#x437;&#x43D;&#x44B;&#x445; &#x43A;&#x43E;&#x43D;&#x444;&#x438;&#x433;&#x443;&#x440;&#x430;&#x446;&#x438;&#x438; &#x441;&#x435;&#x442;&#x438; &#x432; Kubernetes, Kotlin &#x43D;&#x430;&#x43A;&#x43E;&#x43D;&#x435;&#x446; &#x432;&#x44B;&#x448;&#x435;&#x43B; &#x432; &#x432;&#x435;&#x440;&#x441;&#x438;&#x438; 1.0, Vulkan &#x442;&#x43E;&#x436;&#x435; &#x432;&#x44B;&#x448;&#x435;&#x43B; &#x432; 1.0, &#x43A;&#x440;&#x438;&#x442;&#x438;&#x447;&#x435;&#x441;&#x43A;&#x430;&#x44F; &#x443;&#x44F;&#x437;&#x432;&#x438;&#x43C;&#x43E;&#x441;&#x442;&#x44C; &#x432; glibc, ZFS &#x432; Ubuntu 16.04, &#x441;&#x43D;&#x43E;&#x432;&#x430; Rust, &#x438; &#x43F;&#x440;&#x43E; &#x41C;&#x43E;&#x43D;&#x430;&#x434;&#x44B;. &#x418;, &#x43A;&#x43E;&#x43D;&#x435;&#x447;&#x43D;&#x43E;, &#x43E;&#x442;&#x432;&#x435;&#x442;&#x44B; &#x43D;&#x430; &#x432;&#x43E;&#x43F;&#x440;&#x43E;&#x441;&#x44B; &#x441;&#x43B;&#x443;&#x448;&#x430;&#x442;&#x435;&#x43B;&#x435;&#x439;.</p>
<p>&#x428;&#x43E;&#x443; &#x43D;&#x43E;&#x442;&#x435;&#x441;:</p>
<ul>
<li>&#x412;&#x430;&#x43A;&#x430;&#x43D;&#x441;&#x438;&#x44F; C++ &amp; Scala Software Engineer</li>
<li>Comparison of Networking Solutions for Kubernetes &mdash; Comparison of Networking Solutions for Kubernetes 2 documentation</li>
<li><a href="http://blog.jetbrains.com/kotlin/2016/02/kotlin-1-0-released-pragmatic-language-for-jvm-and-android/">Kotlin 1.0 Released: Pragmatic Language for JVM and Android | Kotlin Blog</a></li>
<li>Go 1.6 is released &mdash; The Go Blog</li>
<li>Does FreeBSD support OpenGL 3.3?</li>
<li>Unable to build Assimp on FreeBSD 10.2 &middot; Issue #795 &middot; assimp/assimp &middot; GitHub</li>
<li>Vulkan &mdash; Industry Forged</li>
<li>Vulkan in 30 minutes</li>
<li>OpenNews: &#x41E;&#x43F;&#x443;&#x431;&#x43B;&#x438;&#x43A;&#x43E;&#x432;&#x430;&#x43D; &#x433;&#x440;&#x430;&#x444;&#x438;&#x447;&#x435;&#x441;&#x43A;&#x438;&#x439; &#x441;&#x442;&#x430;&#x43D;&#x434;&#x430;&#x440;&#x442; Vulkan 1.0</li>
<li>Khronos Products</li>
<li>Vulkan 1.0 Released: What You Need To Know About This Cross-Platform, High-Performance Graphics API &mdash; Phoronix</li>
<li>PVS-Studio &#x43F;&#x43E;&#x43A;&#x43E;&#x43F;&#x430;&#x43B;&#x441;&#x44F; &#x432; &#x44F;&#x434;&#x440;&#x435; FreeBSD</li>
<li>&#x41A;&#x440;&#x438;&#x442;&#x438;&#x447;&#x435;&#x441;&#x43A;&#x430;&#x44F; &#x443;&#x44F;&#x437;&#x432;&#x438;&#x43C;&#x43E;&#x441;&#x442;&#x44C; &#x431;&#x438;&#x431;&#x43B;&#x438;&#x43E;&#x442;&#x435;&#x43A;&#x438; glibc &#x43F;&#x43E;&#x437;&#x432;&#x43E;&#x43B;&#x44F;&#x435;&#x442; &#x43E;&#x441;&#x443;&#x449;&#x435;&#x441;&#x442;&#x432;&#x43B;&#x44F;&#x442;&#x44C; &#x443;&#x434;&#x430;&#x43B;&#x435;&#x43D;&#x43D;&#x43E;&#x435; &#x432;&#x44B;&#x43F;&#x43E;&#x43B;&#x43D;&#x435;&#x43D;&#x438;&#x435; &#x43A;&#x43E;&#x434;&#x430; / &#x411;&#x43B;&#x43E;&#x433; &#x43A;&#x43E;&#x43C;&#x43F;&#x430;&#x43D;&#x438;&#x438; Positive Technologies / &#x425;&#x430;&#x431;&#x440;&#x430;&#x445;&#x430;&#x431;&#x440;</li>
<li>FreeBSD and CVE-2015-7547</li>
<li>OpenNews: &#x412; Ubuntu 16.04 &#x431;&#x443;&#x434;&#x435;&#x442; &#x434;&#x43E;&#x431;&#x430;&#x432;&#x43B;&#x435;&#x43D;&#x430; &#x43F;&#x43E;&#x434;&#x434;&#x435;&#x440;&#x436;&#x43A;&#x430; ZFS &#x438; Vulkan</li>
<li>From the Canyon Edge: ZFS is <em>the</em> FS for Containers in Ubuntu 16.04!</li>
<li>There is No Now &mdash; ACM Queue</li>
<li>select * from depesz; &raquo; Blog Archive &raquo; Waiting for 9.6 &ndash; Remove GROUP BY columns that are functionally dependent on other columns.</li>
<li>Hint Bits &mdash; PostgreSQL wiki</li>
<li>Speeding up things with hint bits &mdash; Cybertec &mdash; The PostgreSQL Database Company</li>
<li>Introduction to Windows shellcode development &ndash; Part 3 &ndash; Security Caf&eacute;</li>
<li>The latest high-end Ubuntu phone will be available globally | ZDNet</li>
<li>CharybdeFS: a new fault-injecting filesystem for software testing</li>
<li>Red Book, 5th ed. Ch. 6: Weak Isolation and Distribution</li>
<li>PostgreSQL: Documentation: 9.5: Transaction Isolation</li>
<li>[Libevent-users] Comparison of libevent and libuv</li>
<li>Kazuho&rsquo;s Weblog: The reasons I stopped using libuv for H2O</li>
<li>Using non-blocking and asynchronous I/O (CK10 problem) in Linux and Windows (with epool, iocp, libevent/libev/libuv/boost.asio and librt/libaio) | Rui&rsquo;s Blog</li>
<li>&#x417;&#x430;&#x43F;&#x430;&#x445; &#x43C;&#x43E;&#x43D;&#x430;&#x434; &#x43F;&#x43E; &#x443;&#x442;&#x440;&#x430;&#x43C; &mdash; &#x41F;&#x440;&#x43E;&#x433;&#x443;&#x43B;&#x43A;&#x438; &#x43F;&#x43E; &#x432;&#x43E;&#x434;&#x435;</li>
<li>&#x422;&#x435;&#x43C;&#x44B; &#x438; &#x432;&#x43E;&#x43F;&#x440;&#x43E;&#x441;&#x44B; &#x441;&#x43B;&#x443;&#x448;&#x430;&#x442;&#x435;&#x43B;&#x435;&#x439; &#x434;&#x43B;&#x44F; 0080 &laquo; DevZen Podcast</li>
</ul>
]]></description><link>http://devzen.ru/episode-0080/</link><guid isPermaLink="true">http://devzen.ru/episode-0080/</guid><category><![CDATA[Podcast]]></category><category><![CDATA[Kotlin]]></category><dc:creator><![CDATA[DevZen Podcast]]></dc:creator><pubDate>Sat, 20 Feb 2016 08:34:00 GMT</pubDate><enclosure url="http://devzen.ru/download/2016/devzen-0080-2016-02-19-3280e712a2cc1485.mp3" length="55240704" type="audio/mpeg"/></item><item><title><![CDATA[[RU] Радио-Т 484]]></title><description><![CDATA[<ul>
<li><a href="http://thenextweb.com/dd/2016/02/15/kotlin-the-pragmatic-language-for-android-and-jvm-has-reached-its-1-0-release/">Kotlin &#x434;&#x43E;&#x440;&#x43E;&#x441; &#x434;&#x43E; &#x432;&#x435;&#x440;&#x441;&#x438;&#x438; 1.0</a> - 00:02:45.</li>
<li><a href="https://dzone.com/articles/kotlin-10-is-now-available">&#x412; &#x447;&#x435;&#x43C; &#x435;&#x433;&#x43E; &#x43F;&#x440;&#x430;&#x433;&#x43C;&#x430;&#x442;&#x438;&#x437;&#x43C;</a> - 00:12:57.</li>
<li>&#x412;&#x435;&#x440;&#x441;&#x438;&#x44F; 3 iTerm2 - 00:42:04.</li>
<li>&#x421;&#x442;&#x440;&#x430;&#x43D;&#x43D;&#x430;&#x44F; &#x438;&#x441;&#x442;&#x43E;&#x440;&#x438;&#x44F; &#x431;&#x43E;&#x440;&#x44C;&#x431;&#x44B; Apple - 00:52:37.</li>
<li>GitHub &#x434;&#x43E;&#x431;&#x430;&#x432;&#x438;&#x43B; &#x43F;&#x43E;&#x434;&#x434;&#x435;&#x440;&#x436;&#x43A;&#x443; &#x448;&#x430;&#x431;&#x43B;&#x43E;&#x43D;&#x43E;&#x432; - 01:10:35.</li>
<li>Go 1.6 - 01:15:12.</li>
<li>&#x421;&#x442;&#x440;&#x430;&#x448;&#x43D;&#x44B;&#x439; &#x431;&#x430;&#x433; &#x443;&#x433;&#x440;&#x43E;&#x436;&#x430;&#x435;&#x442; &#x43D;&#x430;&#x448;&#x438;&#x43C; &#x441;&#x435;&#x440;&#x432;&#x435;&#x440;&#x430;&#x43C; - 01:21:21.</li>
<li>&#x410;&#x440;&#x445;&#x438;&#x442;&#x435;&#x43A;&#x442;&#x443;&#x440;&#x430; Stack Overflow &#x43D;&#x430; 2016 - 01:26:33.</li>
<li>Custom Machine Types - &#x43A;&#x43E;&#x43D;&#x444;&#x438;&#x433;&#x443;&#x440;&#x430;&#x446;&#x438;&#x438; &#x43F;&#x43E; &#x432;&#x43A;&#x443;&#x441;&#x443; - 01:31:15.</li>
<li>&#x422;&#x435;&#x43C;&#x44B; &#x43D;&#x430;&#x448;&#x438;&#x445; &#x441;&#x43B;&#x443;&#x448;&#x430;&#x442;&#x435;&#x43B;&#x435;&#x439;</li>
</ul>
]]></description><link>https://radio-t.com/p/2016/02/20/podcast-484/</link><guid isPermaLink="true">https://radio-t.com/p/2016/02/20/podcast-484/</guid><category><![CDATA[Podcast]]></category><category><![CDATA[Kotlin]]></category><dc:creator><![CDATA[Umputun, Bobuk, Gray, Ksenks]]></dc:creator><pubDate>Sat, 20 Feb 2016 12:44:00 GMT</pubDate><enclosure url="http://cdn.radio-t.com/rt_podcast484.mp3" length="72259834" type="audio/mpeg"/></item><item><title><![CDATA[[RU] Немного о Kotlin.]]></title><description><![CDATA[<p><img src="https://habrastorage.org/getpro/habr/post_images/b30/fc2/317/b30fc231752f0d1d270b4c80538a28dc.jpg" alt="Kotlin"></p>
<p>&#x41D;&#x430; &#x434;&#x43D;&#x44F;&#x445; JetBrains &#x43F;&#x43E;&#x441;&#x43B;&#x435; &#x43F;&#x44F;&#x442;&#x438;&#x43B;&#x435;&#x442;&#x43D;&#x435;&#x439; &#x440;&#x430;&#x431;&#x43E;&#x442;&#x44B; &#x432;&#x44B;&#x43F;&#x443;&#x441;&#x442;&#x438;&#x43B;&#x430; &#x43F;&#x435;&#x440;&#x432;&#x44B;&#x439; &#x440;&#x435;&#x43B;&#x438;&#x437; &#x44F;&#x437;&#x44B;&#x43A;&#x430; Kotlin. &#x414;&#x430;&#x432;&#x430;&#x439;&#x442;&#x435; &#x43F;&#x43E;&#x441;&#x43C;&#x43E;&#x442;&#x440;&#x438;&#x43C;, &#x447;&#x442;&#x43E; &#x436;&#x435; &#x44D;&#x442;&#x43E; &#x437;&#x430; &#x44F;&#x437;&#x44B;&#x43A;, &#x43F;&#x43E;&#x43F;&#x440;&#x43E;&#x431;&#x443;&#x435;&#x43C; &#x440;&#x430;&#x437;&#x43E;&#x431;&#x440;&#x430;&#x442;&#x44C;&#x441;&#x44F; &#x437;&#x430;&#x447;&#x435;&#x43C; &#x438; &#x434;&#x43B;&#x44F; &#x43A;&#x43E;&#x433;&#x43E; &#x43E;&#x43D;, &#x43A;&#x430;&#x43A;&#x438;&#x435; &#x438;&#x43C;&#x435;&#x435;&#x442; &#x444;&#x443;&#x43D;&#x43A;&#x446;&#x438;&#x43E;&#x43D;&#x430;&#x43B;&#x44C;&#x43D;&#x44B;&#x435; &#x43E;&#x441;&#x43E;&#x431;&#x435;&#x43D;&#x43D;&#x43E;&#x441;&#x442;&#x438;. &#x421;&#x43A;&#x43E;&#x440;&#x435;&#x435; &#x432;&#x441;&#x435;&#x433;&#x43E; &#x432; &#x441;&#x442;&#x430;&#x442;&#x44C;&#x44E; &#x437;&#x430;&#x442;&#x435;&#x441;&#x430;&#x43B;&#x438;&#x441;&#x44C; &#x438; &#x43B;&#x438;&#x447;&#x43D;&#x44B;&#x435; &#x432;&#x43F;&#x435;&#x447;&#x430;&#x442;&#x43B;&#x435;&#x43D;&#x438;&#x44F; &#x43E;&#x442; &#x44F;&#x437;&#x44B;&#x43A;&#x430;, &#x43D;&#x43E; &#x44F; &#x441;&#x442;&#x430;&#x440;&#x430;&#x43B;&#x441;&#x44F;, &#x447;&#x442;&#x43E;&#x431;&#x44B; &#x43E;&#x43D;&#x438; &#x43D;&#x435; &#x432;&#x43B;&#x438;&#x44F;&#x43B;&#x438; &#x43D;&#x430; &#x438;&#x437;&#x43B;&#x43E;&#x436;&#x435;&#x43D;&#x438;&#x435; &#x43F;&#x43E;&#x43B;&#x435;&#x437;&#x43D;&#x43E;&#x439; &#x438;&#x43D;&#x444;&#x43E;&#x440;&#x43C;&#x430;&#x446;&#x438;&#x438;. &#x415;&#x441;&#x43B;&#x438; &#x432;&#x44B; &#x435;&#x449;&#x435; &#x43D;&#x438;&#x447;&#x435;&#x433;&#x43E; &#x438;&#x43B;&#x438; &#x43F;&#x43E;&#x447;&#x442;&#x438; &#x43D;&#x438;&#x447;&#x435;&#x433;&#x43E; &#x43D;&#x435; &#x437;&#x43D;&#x430;&#x435;&#x442;&#x435; &#x43E; Kotlin, &#x442;&#x43E; &#x44F; &#x437;&#x430;&#x432;&#x438;&#x434;&#x443;&#x44E; &#x432;&#x430;&#x43C;, &#x438;&#x431;&#x43E; &#x43F;&#x43E; &#x43C;&#x43E;&#x435;&#x43C;&#x443; &#x43E;&#x449;&#x443;&#x449;&#x435;&#x43D;&#x438;&#x44E; &#x43F;&#x43E;&#x447;&#x438;&#x442;&#x430;&#x442;&#x44C; &#x43F;&#x440;&#x43E; &#x438;&#x43D;&#x441;&#x442;&#x440;&#x443;&#x43C;&#x435;&#x43D;&#x442;, &#x43A;&#x43E;&#x442;&#x43E;&#x440;&#x44B;&#x439; &#x442;&#x44B; &#x434;&#x43E;&#x43B;&#x433;&#x43E; &#x436;&#x434;&#x430;&#x43B;, &#x441;&#x440;&#x43E;&#x434;&#x43D;&#x438; &#x440;&#x430;&#x441;&#x43F;&#x430;&#x43A;&#x43E;&#x432;&#x43A;&#x435; &#x43D;&#x43E;&#x432;&#x43E;&#x433;&#x43E;&#x434;&#x43D;&#x435;&#x433;&#x43E; &#x43F;&#x43E;&#x434;&#x430;&#x440;&#x43A;&#x430;. &#x412;&#x43F;&#x440;&#x43E;&#x447;&#x435;&#x43C; &#x441;&#x443;&#x434;&#x438;&#x442;&#x435; &#x441;&#x430;&#x43C;&#x438;.</p>
<h2>&#x427;&#x442;&#x43E; &#x442;&#x430;&#x43A;&#x43E;&#x435; &#x41A;&#x43E;&#x442;&#x43B;&#x438;&#x43D;</h2>
<p>&#x41A;&#x43E;&#x442;&#x43B;&#x438;&#x43D; &mdash; &#x44D;&#x442;&#x43E; &#x43D;&#x435;&#x431;&#x43E;&#x43B;&#x44C;&#x448;&#x43E;&#x439; &#x43E;&#x441;&#x442;&#x440;&#x43E;&#x432; &#x432; &#x424;&#x438;&#x43D;&#x441;&#x43A;&#x43E;&#x43C; &#x437;&#x430;&#x43B;&#x438;&#x432;&#x435; &#x43D;&#x435;&#x434;&#x430;&#x43B;&#x435;&#x43A;&#x43E; &#x43E;&#x442; &#x421;&#x430;&#x43D;&#x43A;&#x442;-&#x41F;&#x435;&#x442;&#x435;&#x440;&#x431;&#x443;&#x440;&#x433;&#x430;. &#x412;&#x438;&#x434;&#x438;&#x43C;&#x43E;, &#x442;&#x435;&#x43C; &#x441;&#x430;&#x43C;&#x44B;&#x43C; &#x441;&#x43E;&#x437;&#x434;&#x430;&#x442;&#x435;&#x43B;&#x438; &#x434;&#x430;&#x44E;&#x442; &#x43E;&#x442;&#x441;&#x44B;&#x43B;&#x43A;&#x443; &#x43A; &#x442;&#x43E;&#x43C;&#x443;, &#x447;&#x442;&#x43E; &#x43D;&#x43E;&#x432;&#x44B;&#x439; &#x44F;&#x437;&#x44B;&#x43A;, &#x43A;&#x430;&#x43A; &#x43E;&#x441;&#x442;&#x440;&#x43E;&#x432; &#x41A;&#x43E;&#x442;&#x43B;&#x438;&#x43D; &mdash; &#x43C;&#x43B;&#x430;&#x434;&#x448;&#x438;&#x439; &#x440;&#x443;&#x441;&#x441;&#x43A;&#x438;&#x439; &#x431;&#x440;&#x430;&#x442; &#x434;&#x430;&#x43B;&#x435;&#x43A;&#x43E;&#x433;&#x43E; &#x43E;&#x441;&#x442;&#x440;&#x43E;&#x432;&#x430; <a href="https://ru.wikipedia.org/wiki/%D0%AF%D0%B2%D0%B0">&#x42F;&#x432;&#x430;</a>.</p>
<h2>&#x414;&#x43B;&#x44F; &#x43A;&#x43E;&#x433;&#x43E; &#x44D;&#x442;&#x43E;&#x442; &#x44F;&#x437;&#x44B;&#x43A;</h2>
<p>&#x414;&#x435;&#x439;&#x441;&#x442;&#x432;&#x438;&#x442;&#x435;&#x43B;&#x44C;&#x43D;&#x43E;, &#x43D;&#x43E;&#x432;&#x44B;&#x439; &#x44F;&#x437;&#x44B;&#x43A; &#x43A;&#x43E;&#x43C;&#x43F;&#x438;&#x43B;&#x438;&#x440;&#x443;&#x435;&#x442;&#x441;&#x44F; &#x432; JVM &#x431;&#x430;&#x439;&#x442;-&#x43A;&#x43E;&#x434; (&#x435;&#x441;&#x442;&#x44C; &#x435;&#x449;&#x435; &#x438; &#x43A;&#x43E;&#x43C;&#x43F;&#x438;&#x43B;&#x44F;&#x446;&#x438;&#x44F; &#x432; JavaScript, &#x43D;&#x43E; &#x442;&#x430;&#x43A; &#x43A;&#x430;&#x43A; &#x440;&#x435;&#x43B;&#x438;&#x437; &#x43A;&#x43E;&#x43C;&#x43F;&#x438;&#x43B;&#x44F;&#x442;&#x43E;&#x440;&#x430; &#x438;&#x43C;&#x435;&#x43D;&#x43D;&#x43E; &#x432; JVM, &#x44D;&#x442;&#x443; &#x442;&#x435;&#x43C;&#x443; &#x43F;&#x440;&#x438;&#x434;&#x435;&#x442;&#x441;&#x44F; &#x43E;&#x43F;&#x44F;&#x442;&#x44C; &#x43E;&#x442;&#x43B;&#x43E;&#x436;&#x438;&#x442;&#x44C;). &#x410; &#x44D;&#x442;&#x43E; &#x437;&#x43D;&#x430;&#x447;&#x438;&#x442;, &#x447;&#x442;&#x43E; &#x43E;&#x43D; &#x43C;&#x43E;&#x436;&#x435;&#x442; &#x437;&#x430;&#x438;&#x43D;&#x442;&#x435;&#x440;&#x435;&#x441;&#x43E;&#x432;&#x430;&#x442;&#x44C; &#x432;&#x441;&#x435;&#x445;, &#x43A;&#x442;&#x43E; &#x438;&#x43C;&#x435;&#x435;&#x442; &#x434;&#x435;&#x43B;&#x43E; &#x441; Java-&#x43C;&#x430;&#x448;&#x438;&#x43D;&#x43E;&#x439; &#x438; &#x432; &#x446;&#x435;&#x43B;&#x43E;&#x43C; &#x441; &#x44F;&#x437;&#x44B;&#x43A;&#x430;&#x43C;&#x438; &#x441;&#x43E; &#x441;&#x431;&#x43E;&#x440;&#x449;&#x438;&#x43A;&#x43E;&#x43C; &#x43C;&#x443;&#x441;&#x43E;&#x440;&#x430; (&#x430; &#x441; &#x432;&#x44B;&#x445;&#x43E;&#x434;&#x43E;&#x43C; &#x440;&#x435;&#x43B;&#x438;&#x437;&#x430; &#x43A;&#x43E;&#x43C;&#x43F;&#x438;&#x43B;&#x44F;&#x446;&#x438;&#x438; &#x432; JavaScript &#x43F;&#x43E;&#x43A;&#x440;&#x44B;&#x442;&#x438;&#x435; &#x438; &#x432;&#x43E;&#x437;&#x43C;&#x43E;&#x436;&#x43D;&#x43E;&#x441;&#x442;&#x438; &#x431;&#x443;&#x434;&#x443;&#x442; &#x435;&#x449;&#x435; &#x448;&#x438;&#x440;&#x435;).</p>
<h2>&#x41F;&#x440;&#x43E;&#x441;&#x442;&#x43E;&#x439; &#x438; &#x441;&#x43E;&#x432;&#x43C;&#x435;&#x441;&#x442;&#x438;&#x43C;&#x44B;&#x439;</h2>
<p>&#x414;&#x432;&#x435; &#x433;&#x43B;&#x430;&#x432;&#x43D;&#x44B;&#x445; &#x43E;&#x441;&#x43E;&#x431;&#x435;&#x43D;&#x43D;&#x43E;&#x441;&#x442;&#x438; &#x43A;&#x43E;&#x442;&#x43B;&#x438;&#x43D;&#x430;, &#x43D;&#x430; &#x43C;&#x43E;&#x439; &#x432;&#x437;&#x433;&#x43B;&#x44F;&#x434;, &#x44D;&#x442;&#x43E; &#x435;&#x433;&#x43E; &#x43F;&#x440;&#x43E;&#x441;&#x442;&#x43E;&#x442;&#x430; &#x438; &#x43F;&#x43E;&#x43B;&#x43D;&#x430;&#x44F; &#x441;&#x43E;&#x432;&#x43C;&#x435;&#x441;&#x442;&#x438;&#x43C;&#x43E;&#x441;&#x442;&#x44C; &#x441; Java. &#x41A;&#x43E;&#x442;&#x43B;&#x438;&#x43D; &#x441;&#x43E;&#x437;&#x434;&#x430;&#x432;&#x430;&#x43B;&#x441;&#x44F; &#x43A;&#x43E;&#x43C;&#x43F;&#x430;&#x43D;&#x438;&#x435;&#x439;, &#x43A;&#x43E;&#x442;&#x43E;&#x440;&#x430;&#x44F; &#x434;&#x435;&#x43B;&#x430;&#x435;&#x442; &#x43E;&#x447;&#x435;&#x43D;&#x44C; &#x43C;&#x43D;&#x43E;&#x433;&#x43E; &#x43F;&#x440;&#x43E;&#x434;&#x443;&#x43A;&#x442;&#x43E;&#x432; &#x43D;&#x430; Java &#x438; &#x43A;&#x43E;&#x442;&#x43E;&#x440;&#x430;&#x44F; &#x445;&#x43E;&#x440;&#x43E;&#x448;&#x43E; &#x440;&#x430;&#x437;&#x431;&#x438;&#x440;&#x430;&#x435;&#x442;&#x441;&#x44F; &#x432; &#x441;&#x43E;&#x432;&#x440;&#x435;&#x43C;&#x435;&#x43D;&#x43D;&#x44B;&#x445; &#x438;&#x43D;&#x441;&#x442;&#x440;&#x443;&#x43C;&#x435;&#x43D;&#x442;&#x430;&#x445; &#x440;&#x430;&#x437;&#x440;&#x430;&#x431;&#x43E;&#x442;&#x43A;&#x438;. &#x417;&#x430;&#x43F;&#x440;&#x43E;&#x441; &#x43D;&#x430; &#x43D;&#x43E;&#x432;&#x44B;&#x439; &#x44F;&#x437;&#x44B;&#x43A; &#x432;&#x438;&#x442;&#x430;&#x435;&#x442; &#x432; &#x432;&#x43E;&#x437;&#x434;&#x443;&#x445;&#x435; &#x434;&#x430;&#x432;&#x43D;&#x43E;, &#x43D;&#x43E; &#x441;&#x434;&#x435;&#x43B;&#x430;&#x442;&#x44C; &#x442;&#x430;&#x43A;&#x43E;&#x439; &#x44F;&#x437;&#x44B;&#x43A;, &#x43A;&#x43E;&#x442;&#x43E;&#x440;&#x44B;&#x439; &#x431;&#x44B; &#x43F;&#x43E;&#x437;&#x432;&#x43E;&#x43B;&#x438;&#x43B; &#x432;&#x437;&#x44F;&#x442;&#x44C; (&#x43E;&#x433;&#x440;&#x43E;&#x43C;&#x43D;&#x443;&#x44E;) &#x433;&#x43E;&#x442;&#x43E;&#x432;&#x443;&#x44E; &#x43A;&#x43E;&#x434;&#x43E;&#x432;&#x443;&#x44E; &#x431;&#x430;&#x437;&#x443; Java, &#x43E;&#x431;&#x44B;&#x447;&#x43D;&#x44B;&#x445; Java-&#x440;&#x430;&#x437;&#x440;&#x430;&#x431;&#x43E;&#x442;&#x447;&#x438;&#x43A;&#x43E;&#x432;, &#x434;&#x430;&#x442;&#x44C; &#x438;&#x43C; &#x43D;&#x43E;&#x432;&#x44B;&#x439; &#x438;&#x43D;&#x441;&#x442;&#x440;&#x443;&#x43C;&#x435;&#x43D;&#x442; &#x438; &#x431;&#x435;&#x441;&#x448;&#x43E;&#x432;&#x43D;&#x43E; (&#x43D;&#x43E; &#x431;&#x43E;&#x43B;&#x435;&#x435; &#x44D;&#x444;&#x444;&#x435;&#x43A;&#x442;&#x438;&#x432;&#x43D;&#x43E;) &#x43F;&#x440;&#x43E;&#x434;&#x43E;&#x43B;&#x436;&#x430;&#x442;&#x44C; &#x440;&#x430;&#x437;&#x440;&#x430;&#x431;&#x43E;&#x442;&#x43A;&#x443; &mdash; &#x442;&#x430;&#x43A;&#x43E;&#x433;&#x43E; &#x438;&#x43D;&#x441;&#x442;&#x440;&#x443;&#x43C;&#x435;&#x43D;&#x442;&#x430; &#x434;&#x43E; &#x43F;&#x43E;&#x44F;&#x432;&#x43B;&#x435;&#x43D;&#x438;&#x44F; &#x43A;&#x43E;&#x442;&#x43B;&#x438;&#x43D;&#x430; &#x43D;&#x435; &#x441;&#x443;&#x449;&#x435;&#x441;&#x442;&#x432;&#x43E;&#x432;&#x430;&#x43B;&#x43E;. &#x421;&#x43E;&#x437;&#x434;&#x430;&#x442;&#x435;&#x43B;&#x438; &#x43D;&#x43E;&#x432;&#x43E;&#x433;&#x43E; &#x44F;&#x437;&#x44B;&#x43A;&#x430;, &#x43D;&#x430; &#x43C;&#x43E;&#x439; &#x432;&#x437;&#x433;&#x43B;&#x44F;&#x434;, &#x43E;&#x447;&#x435;&#x43D;&#x44C; &#x445;&#x43E;&#x440;&#x43E;&#x448;&#x43E; &#x43F;&#x43E;&#x447;&#x443;&#x432;&#x441;&#x442;&#x432;&#x43E;&#x432;&#x430;&#x43B;&#x438; &#x43F;&#x43E;&#x442;&#x440;&#x435;&#x431;&#x43D;&#x43E;&#x441;&#x442;&#x438; &#x431;&#x438;&#x437;&#x43D;&#x435;&#x441;&#x430; &#x438; &#x440;&#x430;&#x437;&#x440;&#x430;&#x431;&#x43E;&#x442;&#x447;&#x438;&#x43A;&#x43E;&#x432;: &#x431;&#x438;&#x437;&#x43D;&#x435;&#x441;&#x443; &#x434;&#x430;&#x43B;&#x438; &#x432;&#x43E;&#x437;&#x43C;&#x43E;&#x436;&#x43D;&#x43E;&#x441;&#x442;&#x44C; &#x443;&#x432;&#x435;&#x43B;&#x438;&#x447;&#x438;&#x442;&#x44C; &#x44D;&#x444;&#x444;&#x435;&#x43A;&#x442;&#x438;&#x432;&#x43D;&#x43E;&#x441;&#x442;&#x44C; &#x440;&#x430;&#x437;&#x440;&#x430;&#x431;&#x43E;&#x442;&#x447;&#x438;&#x43A;&#x43E;&#x432;, &#x430; &#x440;&#x430;&#x437;&#x440;&#x430;&#x431;&#x43E;&#x442;&#x447;&#x438;&#x43A;&#x430;&#x43C; &#x434;&#x430;&#x442;&#x44C; &#x441;&#x43E;&#x432;&#x440;&#x435;&#x43C;&#x435;&#x43D;&#x43D;&#x44B;&#x439; &#x438;&#x43D;&#x441;&#x442;&#x440;&#x443;&#x43C;&#x435;&#x43D;&#x442; &#x434;&#x43B;&#x44F; &#x440;&#x430;&#x437;&#x440;&#x430;&#x431;&#x43E;&#x442;&#x43A;&#x438;. &#x418; &#x43A;&#x43E;&#x433;&#x434;&#x430; &#x44F; &#x433;&#x43E;&#x432;&#x43E;&#x440;&#x44E; &#x43E; &laquo;&#x441;&#x43E;&#x432;&#x440;&#x435;&#x43C;&#x435;&#x43D;&#x43D;&#x43E;&#x43C; &#x438;&#x43D;&#x441;&#x442;&#x440;&#x443;&#x43C;&#x435;&#x43D;&#x442;&#x435;&raquo;, &#x44F;, &#x43A;&#x43E;&#x43D;&#x435;&#x447;&#x43D;&#x43E;, &#x438;&#x43C;&#x435;&#x44E; &#x432;&#x432;&#x438;&#x434;&#x443; &#x43D;&#x435; &#x442;&#x43E;&#x43B;&#x44C;&#x43A;&#x43E; &#x43A;&#x43E;&#x43C;&#x43F;&#x438;&#x43B;&#x44F;&#x442;&#x43E;&#x440;, &#x43D;&#x43E; &#x438; &#x43F;&#x43E;&#x434;&#x434;&#x435;&#x440;&#x436;&#x43A;&#x443; &#x432; IDE, &#x431;&#x435;&#x437; &#x43A;&#x43E;&#x442;&#x43E;&#x440;&#x43E;&#x439; &#x43B;&#x438;&#x447;&#x43D;&#x43E; &#x43C;&#x43E;&#x44F; &#x434;&#x435;&#x44F;&#x442;&#x435;&#x43B;&#x44C;&#x43D;&#x43E;&#x441;&#x442;&#x44C; &#x440;&#x430;&#x437;&#x440;&#x430;&#x431;&#x43E;&#x442;&#x447;&#x438;&#x43A;&#x430; &#x43C;&#x43D;&#x435; &#x432;&#x438;&#x434;&#x438;&#x442;&#x441;&#x44F; &#x441;&#x43E;&#x432;&#x441;&#x435;&#x43C; &#x43D;&#x435;&#x43C;&#x44B;&#x441;&#x43B;&#x438;&#x43C;&#x43E;&#x439;.
&#x412; &#x438;&#x442;&#x43E;&#x433;&#x435;: &#x43F;&#x440;&#x43E;&#x441;&#x442;&#x43E;&#x442;&#x430; &#x43F;&#x43E;&#x437;&#x432;&#x43E;&#x43B;&#x44F;&#x435;&#x442; &#x438;&#x441;&#x43F;&#x43E;&#x43B;&#x44C;&#x437;&#x43E;&#x432;&#x430;&#x442;&#x44C; &#x44F;&#x437;&#x44B;&#x43A; &#x43F;&#x43E;&#x447;&#x442;&#x438; &#x43B;&#x44E;&#x431;&#x43E;&#x43C;&#x443; Java-&#x440;&#x430;&#x437;&#x440;&#x430;&#x431;&#x43E;&#x442;&#x447;&#x438;&#x43A;&#x443;, &#x43A;&#x43E;&#x442;&#x43E;&#x440;&#x44B;&#x439; &#x433;&#x43E;&#x442;&#x43E;&#x432; &#x43F;&#x43E;&#x442;&#x440;&#x430;&#x442;&#x438;&#x442;&#x44C; &#x43F;&#x43E;&#x43B;&#x447;&#x430;&#x441;&#x430; &#x43D;&#x430; &#x442;&#x43E;, &#x447;&#x442;&#x43E;&#x431;&#x44B; &#x43F;&#x43E;&#x441;&#x43C;&#x43E;&#x442;&#x440;&#x435;&#x442;&#x44C; &#x442;&#x443;&#x442;&#x43E;&#x440;&#x438;&#x430;&#x43B; &#x438;&#x43B;&#x438; &#x441;&#x43F;&#x435;&#x446;&#x438;&#x444;&#x438;&#x43A;&#x430;&#x446;&#x438;&#x44E; &#x44F;&#x437;&#x44B;&#x43A;&#x430;, &#x43E;&#x431;&#x440;&#x430;&#x442;&#x43D;&#x430;&#x44F; &#x441;&#x43E;&#x432;&#x43C;&#x435;&#x441;&#x442;&#x438;&#x43C;&#x43E;&#x441;&#x442;&#x44C; &#x436;&#x435; &#x43F;&#x43E;&#x437;&#x432;&#x43E;&#x43B;&#x44F;&#x435;&#x442; &#x438;&#x441;&#x43F;&#x43E;&#x43B;&#x44C;&#x437;&#x43E;&#x432;&#x430;&#x442;&#x44C; &#x44F;&#x437;&#x44B;&#x43A; &#x432; &#x443;&#x436;&#x435; &#x441;&#x443;&#x449;&#x435;&#x441;&#x442;&#x432;&#x443;&#x44E;&#x449;&#x435;&#x43C; &#x43F;&#x440;&#x43E;&#x435;&#x43A;&#x442;&#x435;.</p>
<h2>Production-ready</h2>
<p>&#x41A;&#x43E;&#x43D;&#x435;&#x447;&#x43D;&#x43E;, &#x432; &#x43F;&#x435;&#x440;&#x432;&#x443;&#x44E; &#x43E;&#x447;&#x435;&#x440;&#x435;&#x434;&#x44C;, &#x437;&#x430;&#x43F;&#x440;&#x43E;&#x441; &#x43D;&#x430; &#x44D;&#x442;&#x43E;&#x442; &#x44F;&#x437;&#x44B;&#x43A; &#x431;&#x44B;&#x43B; &#x443; &#x441;&#x430;&#x43C;&#x43E;&#x439; JetBrains, &#x43E;&#x442;&#x441;&#x44E;&#x434;&#x430; &#x438; &#x43D;&#x435;&#x43A;&#x43E;&#x442;&#x43E;&#x440;&#x43E;&#x435; &#x43F;&#x43E;&#x43D;&#x438;&#x43C;&#x430;&#x43D;&#x438;&#x435;, &#x43A;&#x430;&#x43A;&#x438;&#x43C; &#x43E;&#x43D; &#x434;&#x43E;&#x43B;&#x436;&#x435;&#x43D; &#x431;&#x44B;&#x442;&#x44C;. &#x411;&#x43E;&#x43B;&#x435;&#x435; &#x442;&#x43E;&#x433;&#x43E;, JetBrains &#x436;&#x435; &#x432;&#x43D;&#x443;&#x442;&#x440;&#x438; &#x43A;&#x43E;&#x43C;&#x43F;&#x430;&#x43D;&#x438;&#x438; &#x435;&#x433;&#x43E; &#x438; &#x442;&#x435;&#x441;&#x442;&#x438;&#x440;&#x43E;&#x432;&#x430;&#x43B;&#x430;: &#x43A; &#x43C;&#x43E;&#x43C;&#x435;&#x43D;&#x442;&#x443; &#x432;&#x44B;&#x445;&#x43E;&#x434;&#x430; &#x44D;&#x442;&#x43E;&#x433;&#x43E; &#x440;&#x435;&#x43B;&#x438;&#x437;&#x430; &#x443; &#x43A;&#x43E;&#x43C;&#x43F;&#x430;&#x43D;&#x438;&#x438; &#x443;&#x436;&#x435; &#x435;&#x441;&#x442;&#x44C; &#x43A;&#x430;&#x43A; &#x43C;&#x438;&#x43D;&#x438;&#x43C;&#x443;&#x43C; &#x43E;&#x434;&#x438;&#x43D; <a href="https://blog.jetbrains.com/dotnet/2016/01/13/project-rider-a-csharp-ide/">&#x43A;&#x440;&#x443;&#x43F;&#x43D;&#x44B;&#x439; &#x43F;&#x440;&#x43E;&#x434;&#x443;&#x43A;&#x442; &#x441;&#x434;&#x435;&#x43B;&#x430;&#x43D;&#x43D;&#x44B;&#x439; &#x447;&#x438;&#x441;&#x442;&#x43E; &#x43D;&#x430; &#x43A;&#x43E;&#x442;&#x43B;&#x438;&#x43D;&#x435;</a> (&#x434;&#x430;, &#x44F; &#x43F;&#x43E;&#x43D;&#x438;&#x43C;&#x430;&#x44E;, &#x447;&#x442;&#x43E; &#x43F;&#x43B;&#x430;&#x442;&#x444;&#x43E;&#x440;&#x43C;&#x430; &#x43F;&#x43E; &#x43F;&#x440;&#x435;&#x436;&#x43D;&#x435;&#x43C;&#x443; &#x43D;&#x430;&#x43F;&#x438;&#x441;&#x430;&#x43D;&#x430; &#x43D;&#x430; Java). &#x41E;&#x442;&#x441;&#x44E;&#x434;&#x430; &#x43C;&#x43E;&#x436;&#x43D;&#x43E; &#x43F;&#x440;&#x435;&#x434;&#x43F;&#x43E;&#x43B;&#x43E;&#x436;&#x438;&#x442;&#x44C;, &#x447;&#x442;&#x43E; &#x437;&#x430;&#x44F;&#x432;&#x43B;&#x435;&#x43D;&#x438;&#x44F; &#x43E; &#x433;&#x43E;&#x442;&#x43E;&#x432;&#x43D;&#x43E;&#x441;&#x442;&#x438; &#x44F;&#x437;&#x44B;&#x43A;&#x430; &#x43A; &#x43F;&#x440;&#x43E;&#x434;&#x430;&#x43A;&#x448;&#x435;&#x43D;&#x443; &#x43D;&#x435; &#x433;&#x43E;&#x43B;&#x43E;&#x441;&#x43B;&#x43E;&#x432;&#x43D;&#x44B;. &#x410; &#x438;&#x437; &#x441;&#x432;&#x43E;&#x435;&#x433;&#x43E; &#x436;&#x435; &#x43E;&#x43F;&#x44B;&#x442;&#x430; &#x438;&#x441;&#x43F;&#x43E;&#x43B;&#x44C;&#x437;&#x43E;&#x432;&#x430;&#x43D;&#x438;&#x44F; &#x43A;&#x43E;&#x442;&#x43B;&#x438;&#x43D;&#x430; &#x441; 2012 &#x433;&#x43E;&#x434;&#x430; &#x43C;&#x43E;&#x433;&#x443; &#x441;&#x43A;&#x430;&#x437;&#x430;&#x442;&#x44C;, &#x447;&#x442;&#x43E; &#x438;&#x437; &#x442;&#x435;&#x445; &#x43F;&#x440;&#x43E;&#x431;&#x43B;&#x435;&#x43C;, &#x441; &#x43A;&#x43E;&#x442;&#x43E;&#x440;&#x44B;&#x43C;&#x438; &#x44F; &#x441;&#x442;&#x430;&#x43B;&#x43A;&#x438;&#x432;&#x430;&#x43B;&#x441;&#x44F; &#x432; &#x434;&#x43E;&#x440;&#x435;&#x43B;&#x438;&#x437;&#x43D;&#x44B;&#x435; &#x432;&#x440;&#x435;&#x43C;&#x435;&#x43D;&#x430;, &#x434;&#x43E; &#x440;&#x435;&#x43B;&#x438;&#x437;&#x430; &#x43D;&#x438; &#x43E;&#x434;&#x43D;&#x430; &#x43D;&#x435; &#x434;&#x43E;&#x436;&#x438;&#x43B;&#x430;. &#x415;&#x441;&#x442;&#x44C; &#x435;&#x449;&#x435; &#x43D;&#x435;&#x431;&#x43E;&#x43B;&#x44C;&#x448;&#x438;&#x435; &#x43F;&#x440;&#x43E;&#x431;&#x43B;&#x435;&#x43C;&#x44B; &#x441; &#x43F;&#x43B;&#x430;&#x433;&#x438;&#x43D;&#x43E;&#x43C; &#x434;&#x43B;&#x44F; IDEA, &#x43D;&#x43E; &#x441;&#x430;&#x43C; &#x43A;&#x43E;&#x43C;&#x43F;&#x438;&#x43B;&#x44F;&#x442;&#x43E;&#x440; &#x440;&#x430;&#x431;&#x43E;&#x442;&#x430;&#x435;&#x442; &#x43A;&#x430;&#x43A; &#x447;&#x430;&#x441;&#x44B;.</p>
<h2>&#x421;&#x43E;&#x432;&#x43C;&#x435;&#x441;&#x442;&#x438;&#x43C; &#x441; Java 1.6</h2>
<p>&#x42D;&#x442;&#x43E; &#x43E;&#x447;&#x435;&#x43D;&#x44C; &#x432;&#x430;&#x436;&#x43D;&#x44B;&#x439; &#x43C;&#x43E;&#x43C;&#x435;&#x43D;&#x442;, &#x432;&#x435;&#x434;&#x44C; &#x438;&#x43C;&#x435;&#x43D;&#x43D;&#x43E; &#x44D;&#x442;&#x430; &#x432;&#x435;&#x440;&#x441;&#x438;&#x44F; Java &#x438;&#x441;&#x43F;&#x43E;&#x43B;&#x44C;&#x437;&#x443;&#x435;&#x442;&#x441;&#x44F; &#x432;&#x43E; &#x432;&#x441;&#x435;&#x445; &#x441;&#x43E;&#x432;&#x440;&#x435;&#x43C;&#x435;&#x43D;&#x43D;&#x44B;&#x445; &#x432;&#x435;&#x440;&#x441;&#x438;&#x44F;&#x445; Android, &#x438;, &#x43D;&#x435; &#x441;&#x43C;&#x43E;&#x442;&#x440;&#x44F; &#x43D;&#x430; <a href="http://venturebeat.com/2015/12/29/google-confirms-next-android-version-wont-use-oracles-proprietary-java-apis/">&#x437;&#x430;&#x43F;&#x43B;&#x430;&#x43D;&#x438;&#x440;&#x43E;&#x432;&#x430;&#x43D;&#x43D;&#x44B;&#x439; &#x43F;&#x435;&#x440;&#x435;&#x445;&#x43E;&#x434; &#x43D;&#x430; OpenJDK</a>, &#x432;&#x43E;&#x441;&#x44C;&#x43C;&#x430;&#x44F; &#x432;&#x435;&#x440;&#x441;&#x438;&#x44F; &#x43F;&#x43E;&#x43F;&#x430;&#x434;&#x435;&#x442; &#x432; &#x440;&#x443;&#x43A;&#x438; &#x440;&#x430;&#x437;&#x440;&#x430;&#x431;&#x43E;&#x442;&#x447;&#x438;&#x43A;&#x430;&#x43C; &#x43F;&#x43E;&#x434; &#x43C;&#x43E;&#x431;&#x438;&#x43B;&#x44C;&#x43D;&#x44B;&#x435; &#x443;&#x441;&#x442;&#x440;&#x43E;&#x439;&#x441;&#x442;&#x432;&#x430; &#x43D;&#x435; &#x442;&#x430;&#x43A; &#x441;&#x43A;&#x43E;&#x440;&#x43E; &#x43A;&#x430;&#x43A; &#x445;&#x43E;&#x442;&#x435;&#x43B;&#x43E;&#x441;&#x44C; &#x431;&#x44B;. &#x41A;&#x43E;&#x43D;&#x435;&#x447;&#x43D;&#x43E;, &#x435;&#x441;&#x442;&#x44C; &#x432;&#x441;&#x44F;&#x43A;&#x438;&#x435; &#x440;&#x435;&#x442;&#x440;&#x43E;&#x43B;&#x44F;&#x43C;&#x431;&#x434;&#x44B; &#x438; &#x434;&#x440;&#x443;&#x433;&#x438;&#x435; &#x443;&#x445;&#x438;&#x449;&#x440;&#x435;&#x43D;&#x438;&#x44F;, &#x43D;&#x43E; &#x43A;&#x43E;&#x442;&#x43B;&#x438;&#x43D; &mdash; &#x44D;&#x442;&#x43E; &#x43D;&#x435; &#x442;&#x43E;&#x43B;&#x44C;&#x43A;&#x43E; &#x43B;&#x44F;&#x43C;&#x431;&#x434;&#x44B; &#x434;&#x43B;&#x44F; &#x430;&#x43D;&#x434;&#x440;&#x43E;&#x438;&#x434;, &#x43D;&#x43E; &#x438; &#x441;&#x43E;&#x432;&#x440;&#x435;&#x43C;&#x435;&#x43D;&#x43D;&#x44B;&#x439; &#x44F;&#x437;&#x44B;&#x43A;, &#x43F;&#x43E;&#x437;&#x432;&#x43E;&#x43B;&#x44F;&#x44E;&#x449;&#x438;&#x439; &#x441;&#x434;&#x435;&#x43B;&#x430;&#x442;&#x44C; &#x440;&#x430;&#x437;&#x440;&#x430;&#x431;&#x43E;&#x442;&#x43A;&#x443; &#x43F;&#x43E;&#x434; &#x430;&#x43D;&#x434;&#x440;&#x43E;&#x438;&#x434; <a href="https://kotlinlang.org/docs/tutorials/android-plugin.html">&#x43F;&#x440;&#x43E;&#x449;&#x435;</a> &#x438; &#x43F;&#x440;&#x438;&#x44F;&#x442;&#x43D;&#x435;&#x439; &#x431;&#x435;&#x437; &#x43E;&#x441;&#x43E;&#x431;&#x44B;&#x445; &#x437;&#x430;&#x442;&#x440;&#x430;&#x442;. &#x410; &#x443;&#x432;&#x435;&#x43B;&#x438;&#x447;&#x435;&#x43D;&#x438;&#x435; &#x440;&#x430;&#x437;&#x43C;&#x435;&#x440;&#x430; apk &#x441;&#x43E;&#x432;&#x441;&#x435;&#x43C; &#x43D;&#x435; &#x437;&#x43D;&#x430;&#x447;&#x438;&#x442;&#x435;&#x43B;&#x44C;&#x43D;&#x43E; &#x43F;&#x43E; &#x43D;&#x44B;&#x43D;&#x435;&#x448;&#x43D;&#x438;&#x43C; &#x432;&#x440;&#x435;&#x43C;&#x435;&#x43D;&#x430;&#x43C;: 823KB (&#x434;&#x43B;&#x44F; &#x432;&#x435;&#x440;&#x441;&#x438;&#x438; 1.0.0)</p>
<h2>&#x41E;&#x441;&#x43E;&#x431;&#x435;&#x43D;&#x43D;&#x43E;&#x441;&#x442;&#x438;</h2>
<p>&#x41F;&#x43E;&#x43B;&#x43D;&#x44B;&#x439; &#x441;&#x43F;&#x438;&#x441;&#x43E;&#x43A; &#x432;&#x43E;&#x437;&#x43C;&#x43E;&#x436;&#x43D;&#x43E;&#x441;&#x442;&#x435;&#x439;, &#x43A;&#x43E;&#x43D;&#x435;&#x447;&#x43D;&#x43E;, &#x43B;&#x443;&#x447;&#x448;&#x435; &#x438;&#x441;&#x43A;&#x430;&#x442;&#x44C; &#x432; <a href="https://kotlinlang.org/docs/reference/">&#x434;&#x43E;&#x43A;&#x443;&#x43C;&#x435;&#x43D;&#x442;&#x430;&#x446;&#x438;&#x438;</a>, &#x44F; &#x436;&#x435; &#x43F;&#x43E;&#x441;&#x442;&#x430;&#x440;&#x430;&#x44E;&#x441;&#x44C; &#x43E;&#x442;&#x440;&#x430;&#x437;&#x438;&#x442;&#x44C; &#x43D;&#x430;&#x438;&#x431;&#x43E;&#x43B;&#x435;&#x435; &#x432;&#x430;&#x436;&#x43D;&#x44B;&#x435; &#x43D;&#x430; &#x43C;&#x43E;&#x439; &#x432;&#x437;&#x433;&#x43B;&#x44F;&#x434; &#x43C;&#x43E;&#x43C;&#x435;&#x43D;&#x442;&#x44B; &#x432; &#x43E;&#x431;&#x449;&#x438;&#x445; &#x441;&#x43B;&#x43E;&#x432;&#x430;&#x445;:</p>
<h2>Null safety</h2>
<p>&#x41F;&#x43E;&#x447;&#x435;&#x43C;&#x443;-&#x442;&#x43E; &#x438;&#x441;&#x442;&#x43E;&#x440;&#x438;&#x447;&#x435;&#x441;&#x43A;&#x438; &#x442;&#x430;&#x43A; &#x441;&#x43B;&#x43E;&#x436;&#x438;&#x43B;&#x43E;&#x441;&#x44C;, &#x447;&#x442;&#x43E; <a href="https://kotlinlang.org/docs/reference/null-safety.html">&#x44D;&#x442;&#x430;</a> &#x43E;&#x441;&#x43E;&#x431;&#x435;&#x43D;&#x43D;&#x43E;&#x441;&#x442;&#x44C; &#x43A;&#x43E;&#x442;&#x43B;&#x438;&#x43D;&#x430; &#x432;&#x441;&#x43F;&#x43E;&#x43C;&#x438;&#x43D;&#x430;&#x435;&#x442;&#x441;&#x44F; &#x43F;&#x435;&#x440;&#x432;&#x43E;&#x439;. &#x418; &#x445;&#x43E;&#x442;&#x44F; &#x43E;&#x43D;&#x430; &#x431;&#x435;&#x437;&#x443;&#x441;&#x43B;&#x43E;&#x432;&#x43D;&#x43E; &#x432;&#x430;&#x436;&#x43D;&#x430;, &#x43D;&#x430; &#x43C;&#x43E;&#x439; &#x432;&#x437;&#x433;&#x43B;&#x44F;&#x434; &#x43D;&#x435; &#x44F;&#x432;&#x43B;&#x44F;&#x435;&#x442;&#x441;&#x44F; &#x432;&#x430;&#x436;&#x43D;&#x435;&#x439;&#x448;&#x435;&#x439;. &#x417;&#x434;&#x435;&#x441;&#x44C; &#x44F;&#x437;&#x44B;&#x43A; &#x43F;&#x43E;&#x437;&#x432;&#x43E;&#x43B;&#x44F;&#x435;&#x442;, &#x43E;&#x43F;&#x440;&#x435;&#x434;&#x435;&#x43B;&#x44F;&#x44F; &#x43F;&#x435;&#x440;&#x435;&#x43C;&#x435;&#x43D;&#x43D;&#x44B;&#x435;, &#x43F;&#x43E;&#x43B;&#x44F;, &#x43A;&#x43E;&#x43D;&#x441;&#x442;&#x430;&#x43D;&#x442;&#x44B; &#x438; &#x442;&#x434;, &#x443;&#x43A;&#x430;&#x437;&#x430;&#x442;&#x44C;, &#x43C;&#x43E;&#x436;&#x435;&#x442; &#x43B;&#x438; &#x432; &#x43D;&#x438;&#x445; &#x445;&#x440;&#x430;&#x43D;&#x438;&#x442;&#x44C;&#x441;&#x44F; &#x441;&#x441;&#x44B;&#x43B;&#x43A;&#x430; &#x43D;&#x430; null. &#x41F;&#x43E;&#x434;&#x43D;&#x438;&#x43C;&#x430;&#x435;&#x442; &#x43D;&#x430; &#x43D;&#x43E;&#x432;&#x44B;&#x439; &#x443;&#x440;&#x43E;&#x432;&#x435;&#x43D;&#x44C; &#x438;&#x434;&#x435;&#x44E; &#x430;&#x43D;&#x43D;&#x43E;&#x442;&#x430;&#x446;&#x438;&#x439; &#x432;&#x440;&#x43E;&#x434;&#x435; @Nullable &#x438; NotNull, &#x43F;&#x43E;&#x437;&#x432;&#x43E;&#x43B;&#x44F;&#x435;&#x442; &#x443;&#x43C;&#x43D;&#x43E; &#x43F;&#x440;&#x438;&#x432;&#x43E;&#x434;&#x438;&#x442;&#x44C; &#x43A; &#x43D;&#x435;-nullable &#x442;&#x438;&#x43F;&#x443; &#x43F;&#x43E;&#x441;&#x43B;&#x435; &#x43F;&#x440;&#x43E;&#x432;&#x435;&#x440;&#x43A;&#x438; &#x435;&#x451; &#x43D;&#x430; null. &#x41D;&#x430;&#x434;&#x43E; &#x43E;&#x442;&#x43C;&#x435;&#x442;&#x438;&#x442;&#x44C;, &#x447;&#x442;&#x43E; &#x431;&#x44B;&#x432;&#x430;&#x44E;&#x442; &#x441;&#x43B;&#x443;&#x447;&#x430;&#x438;, &#x43A;&#x43E;&#x433;&#x434;&#x430; &#x44D;&#x442;&#x430; &#x43E;&#x441;&#x43E;&#x431;&#x435;&#x43D;&#x43D;&#x43E;&#x441;&#x442;&#x44C; &#x440;&#x430;&#x441;&#x445;&#x43E;&#x434;&#x438;&#x442;&#x441;&#x44F; &#x441; &#x43C;&#x43E;&#x438;&#x43C; &#x437;&#x430;&#x43A;&#x43E;&#x441;&#x442;&#x435;&#x43D;&#x435;&#x43B;&#x44B;&#x43C; &#x440;&#x430;&#x437;&#x440;&#x430;&#x431;&#x43E;&#x442;&#x43A;&#x43E;&#x439; &#x43D;&#x430; Java &#x43F;&#x440;&#x435;&#x434;&#x441;&#x442;&#x430;&#x432;&#x43B;&#x435;&#x43D;&#x438;&#x435;&#x43C; &#x43E; &#x442;&#x43E;&#x43C; &#x43A;&#x430;&#x43A; &#x434;&#x43E;&#x43B;&#x436;&#x43D;&#x44B; &#x431;&#x44B;&#x442;&#x44C; &#x441;&#x434;&#x435;&#x43B;&#x430;&#x43D;&#x44B; &#x43D;&#x435;&#x43A;&#x43E;&#x442;&#x43E;&#x440;&#x44B;&#x435; &#x432;&#x435;&#x449;&#x438;, &#x43D;&#x43E; &#x43F;&#x43E;&#x441;&#x43B;&#x435; &#x43D;&#x435;&#x43A;&#x43E;&#x442;&#x43E;&#x440;&#x43E;&#x433;&#x43E; &#x440;&#x430;&#x437;&#x434;&#x443;&#x43C;&#x44C;&#x44F; &#x445;&#x43E;&#x440;&#x43E;&#x448;&#x435;&#x435; &#x440;&#x435;&#x448;&#x435;&#x43D;&#x438;&#x435; &#x432;&#x441;&#x435;&#x433;&#x434;&#x430; &#x43D;&#x430;&#x445;&#x43E;&#x434;&#x438;&#x442;&#x441;&#x44F;.</p>
<pre><code class="hljs language-kotlin"><span class="hljs-comment">/* вопросом помечаем, что может прийти null */</span>
<span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">someFunction</span><span class="hljs-params">(someNullableParam:<span class="hljs-type">SomeType?</span>)</span> {</span>
    <span class="hljs-keyword">if</span>(someNullableParam != <span class="hljs-literal">null</span>) {
         <span class="hljs-comment">// smart cast. Компилятор видит, что передаваемое</span>
         <span class="hljs-comment">// значение не null и разрешает его передать в функцию</span>
        anotherFunction(someNullableParam)
    }
}

<span class="hljs-comment">/* здесь же уже null не пройдет, в попытке передать
 * null или nullable значение компилятор выдаст ошибку */</span>
<span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">anotherFunction</span><span class="hljs-params">(someParam:<span class="hljs-type">SomeType</span>)</span> {</span>
    <span class="hljs-comment">// делаем что-то без опаски, что переданное значение null</span>
}</code></pre>
<h2>&#x412;&#x44B;&#x432;&#x435;&#x434;&#x435;&#x43D;&#x438;&#x435; &#x442;&#x438;&#x43F;&#x43E;&#x432;</h2>
<p>&#x414;&#x430;, &#x43A;&#x43E;&#x442;&#x43B;&#x438;&#x43D; &#x43F;&#x43E;&#x447;&#x442;&#x438; &#x432;&#x435;&#x437;&#x434;&#x435; &#x433;&#x434;&#x435; &#x432;&#x43E;&#x437;&#x43C;&#x43E;&#x436;&#x43D;&#x43E;, &#x443;&#x43C;&#x435;&#x435;&#x442; &#x432;&#x44B;&#x432;&#x435;&#x441;&#x442;&#x438; &#x442;&#x438;&#x43F;, &#x43E;&#x434;&#x43D;&#x430;&#x43A;&#x43E; &#x442;&#x438;&#x43F; &#x432;&#x441;&#x451; &#x436;&#x435; &#x43F;&#x440;&#x438;&#x434;&#x435;&#x442;&#x441;&#x44F; &#x43E;&#x43F;&#x440;&#x435;&#x434;&#x435;&#x43B;&#x438;&#x442;&#x44C; &#x434;&#x43B;&#x44F; &#x43F;&#x443;&#x431;&#x43B;&#x438;&#x447;&#x43D;&#x44B;&#x445; &#x43C;&#x435;&#x442;&#x43E;&#x434;&#x43E;&#x432; &#x438; &#x441;&#x432;&#x43E;&#x439;&#x441;&#x442;&#x432;, &#x447;&#x442;&#x43E; &#x43E;&#x447;&#x435;&#x43D;&#x44C; &#x440;&#x430;&#x437;&#x443;&#x43C;&#x43D;&#x43E; (&#x43C;&#x43D;&#x435; &#x43F;&#x43E;&#x434;&#x441;&#x43A;&#x430;&#x437;&#x44B;&#x432;&#x430;&#x44E;&#x442;, &#x447;&#x442;&#x43E; &#x44D;&#x442;&#x43E; &#x43D;&#x435;&#x43F;&#x440;&#x430;&#x432;&#x434;&#x430; &mdash; &#x441; &#x43A;&#x430;&#x43A;&#x43E;&#x439;-&#x442;&#x43E; &#x432;&#x435;&#x440;&#x441;&#x438;&#x438; &#x44D;&#x442;&#x43E; &#x443;&#x431;&#x440;&#x430;&#x43B;&#x438;):</p>
<pre><code class="hljs language-kotlin"><span class="hljs-comment">// Kotlin в курсе, что здесь List&lt;Char&gt;</span>
<span class="hljs-variable"><span class="hljs-keyword">val</span> result</span> = sequenceOf(<span class="hljs-number">10</span>).map { it.toString() }.flatMap { it.toCharArray().asSequence() }.toList()</code></pre>
<h2>Extension methods</h2>
<p><a href="https://kotlinlang.org/docs/reference/extensions.html">&#x412;&#x43E;&#x437;&#x43C;&#x43E;&#x436;&#x43D;&#x43E;&#x441;&#x442;&#x44C;</a>, &#x43A;&#x43E;&#x442;&#x43E;&#x440;&#x43E;&#x439; &#x43C;&#x43D;&#x435; &#x43E;&#x441;&#x442;&#x440;&#x43E; &#x43D;&#x435; &#x445;&#x432;&#x430;&#x442;&#x430;&#x435;&#x442; &#x432; Java &#x434;&#x43B;&#x44F; &#x443;&#x432;&#x435;&#x43B;&#x438;&#x447;&#x435;&#x43D;&#x438;&#x44F; &#x433;&#x438;&#x431;&#x43A;&#x43E;&#x441;&#x442;&#x438; &#x44F;&#x437;&#x44B;&#x43A;&#x430; &#x438; &#x440;&#x435;&#x448;&#x435;&#x43D;&#x438;&#x439;. &#x417;&#x430;&#x43A;&#x43B;&#x44E;&#x447;&#x430;&#x435;&#x442;&#x441;&#x44F; &#x432; &#x432;&#x43E;&#x437;&#x43C;&#x43E;&#x436;&#x43D;&#x43E;&#x441;&#x442;&#x438; &#x43E;&#x43F;&#x440;&#x435;&#x434;&#x435;&#x43B;&#x438;&#x442;&#x44C; &#x43C;&#x435;&#x442;&#x43E;&#x434; &#x434;&#x43B;&#x44F; &#x442;&#x438;&#x43F;&#x430; &#x43E;&#x442;&#x434;&#x435;&#x43B;&#x44C;&#x43D;&#x43E; &#x43E;&#x442; &#x435;&#x433;&#x43E; (&#x442;&#x438;&#x43F;&#x430;) &#x43E;&#x431;&#x44A;&#x44F;&#x432;&#x43B;&#x435;&#x43D;&#x438;&#x44F;. &#x422;&#x430;&#x43A;&#x430;&#x44F; &#x444;&#x443;&#x43D;&#x43A;&#x446;&#x438;&#x44F;, &#x43A;&#x43E;&#x43D;&#x435;&#x447;&#x43D;&#x43E;, &#x43D;&#x435; &#x431;&#x443;&#x434;&#x435;&#x442; &#x432;&#x438;&#x440;&#x442;&#x443;&#x430;&#x43B;&#x44C;&#x43D;&#x43E;&#x439; &#x438; &#x43D;&#x438;&#x43A;&#x430;&#x43A; &#x43D;&#x435; &#x43C;&#x435;&#x43D;&#x44F;&#x435;&#x442; &#x43A;&#x43B;&#x430;&#x441;&#x441;&#x430;, &#x43A;&#x43E;&#x442;&#x43E;&#x440;&#x43E;&#x43C;&#x443; &#x43C;&#x44B; &#x434;&#x43E;&#x431;&#x430;&#x432;&#x43B;&#x44F;&#x435;&#x43C; &#x43C;&#x435;&#x442;&#x43E;&#x434;, &#x43E;&#x434;&#x43D;&#x430;&#x43A;&#x43E; &#x43F;&#x43E;&#x437;&#x432;&#x43E;&#x43B;&#x44F;&#x435;&#x442; &#x434;&#x43E;&#x431;&#x430;&#x432;&#x438;&#x442;&#x44C; &#x43A;&#x430;&#x43A; &#x443;&#x442;&#x438;&#x43B;&#x438;&#x442;&#x430;&#x440;&#x43D;&#x443;&#x44E; &#x444;&#x443;&#x43D;&#x43A;&#x446;&#x438;&#x43E;&#x43D;&#x430;&#x43B;&#x44C;&#x43D;&#x43E;&#x441;&#x442;&#x44C; &#x434;&#x43B;&#x44F; &#x443;&#x436;&#x435; &#x441;&#x443;&#x449;&#x435;&#x441;&#x442;&#x432;&#x443;&#x44E;&#x449;&#x435;&#x433;&#x43E; &#x43A;&#x43E;&#x434;&#x430;, &#x442;&#x430;&#x43A; &#x438; &#x440;&#x430;&#x437;&#x433;&#x440;&#x443;&#x437;&#x438;&#x442;&#x44C; &#x438;&#x43D;&#x442;&#x435;&#x440;&#x444;&#x435;&#x439;&#x441; &#x43E;&#x442; &#x44D;&#x442;&#x438;&#x445; &#x436;&#x435; &#x443;&#x442;&#x438;&#x43B;&#x438;&#x442;&#x430;&#x440;&#x43D;&#x44B;&#x445; &#x43C;&#x435;&#x442;&#x43E;&#x434;&#x43E;&#x432;.</p>
<pre><code class="hljs language-kotlin">interface Vector2 {
    <span class="hljs-variable"><span class="hljs-keyword">val</span> x</span>:<span class="hljs-keyword">Float</span> <span class="hljs-comment">// это не поле, а ридонли свойство (property)</span>
    <span class="hljs-variable"><span class="hljs-keyword">val</span> y</span>:<span class="hljs-keyword">Float</span> <span class="hljs-comment">// в Java были бы методы getX() и getY()</span>
}

<span class="hljs-comment">/* Extension property. Без поля в классе, просто getLength() */</span>
<span class="hljs-variable"><span class="hljs-keyword">val</span> Vector2.length</span>:<span class="hljs-keyword">Float</span>
    <span class="hljs-keyword">get</span>() = (x * x + y  * y).sqrt() <span class="hljs-comment">// притворимся, что такая extension-функция для Float уже существует</span>

<span class="hljs-comment">/* переопределяем оператор + */</span>
operator <span class="hljs-function"><span class="hljs-keyword">fun</span> Vector2.<span class="hljs-title">plus</span><span class="hljs-params">(other:<span class="hljs-type">Vector2</span>)</span>:Vector2 = <span class="hljs-title">createVector</span><span class="hljs-params">(x+this.x, y+this.y)</span> <span class="hljs-comment">// какой-то способ создать новый вектор</span></span>

<span class="hljs-comment">/* без тела, после знака = пишем одно выражение */</span>
<span class="hljs-function"><span class="hljs-keyword">fun</span> Vector2.<span class="hljs-title">dot</span><span class="hljs-params">(x: <span class="hljs-type">Float, y: Float</span>)</span>: <span class="hljs-keyword">Float</span> = x * this.x + y * this.y</span>

<span class="hljs-comment">/* Помечая функцию с одним параметром как infix,
 * мы позволяем вызывать её через пробел: v1 dot v2 */</span>
infix <span class="hljs-function"><span class="hljs-keyword">fun</span> Vector2.<span class="hljs-title">dot</span><span class="hljs-params">(vec2: <span class="hljs-type">Vector2</span>)</span>: <span class="hljs-keyword">Float</span> = <span class="hljs-title">dot</span><span class="hljs-params">(vec2.x, vec2.y)</span></span>

<span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">usage</span><span class="hljs-params">(vec1:<span class="hljs-type">Vector2, vec2:Vector2</span>)</span> {</span>
    <span class="hljs-variable"><span class="hljs-keyword">val</span> dotProduct</span> = vec1 dot vec2
    <span class="hljs-variable"><span class="hljs-keyword">val</span> sum</span> = vec1 + vec2 <span class="hljs-comment">// на выходе новый вектор</span>
    <span class="hljs-variable"><span class="hljs-keyword">val</span> length</span> = sum.length <span class="hljs-comment">// обращаемся просто как к свойству</span>

}</code></pre>
<h2>&#x41B;&#x44F;&#x43C;&#x431;&#x434;&#x44B;</h2>
<p>&#x41A;&#x43E;&#x43D;&#x435;&#x447;&#x43D;&#x43E;, &#x43A;&#x430;&#x43A; &#x43B;&#x44E;&#x431;&#x43E;&#x439; &#x441;&#x43E;&#x432;&#x440;&#x435;&#x43C;&#x435;&#x43D;&#x43D;&#x44B;&#x439; &#x44F;&#x437;&#x44B;&#x43A; &#x441; &#x43F;&#x440;&#x435;&#x442;&#x435;&#x43D;&#x437;&#x438;&#x435;&#x439; &#x43D;&#x430; &#x432;&#x43E;&#x437;&#x43C;&#x43E;&#x436;&#x43D;&#x43E;&#x441;&#x442;&#x438; &#x444;&#x443;&#x43D;&#x43A;&#x446;&#x438;&#x43D;&#x430;&#x43B;&#x44C;&#x43D;&#x43E;&#x433;&#x43E; &#x43F;&#x440;&#x43E;&#x433;&#x440;&#x430;&#x43C;&#x43C;&#x438;&#x440;&#x43E;&#x432;&#x430;&#x43D;&#x438;&#x44F;, &#x443; &#x43A;&#x43E;&#x442;&#x43B;&#x438;&#x43D;&#x430; &#x444;&#x443;&#x43D;&#x43A;&#x446;&#x438;&#x44F; &mdash; &#x44D;&#x442;&#x43E; &#x441;&#x443;&#x449;&#x43D;&#x43E;&#x441;&#x442;&#x44C; &#x43F;&#x435;&#x440;&#x432;&#x43E;&#x433;&#x43E; &#x43A;&#x43B;&#x430;&#x441;&#x441;&#x430;, &#x435;&#x441;&#x43B;&#x438; &#x43F;&#x435;&#x440;&#x435;&#x432;&#x43E;&#x434;&#x438;&#x442;&#x44C; &#x434;&#x43E;&#x441;&#x43B;&#x43E;&#x432;&#x43D;&#x43E;. &#x422;.&#x435;. &#x444;&#x443;&#x43D;&#x43A;&#x446;&#x438;&#x438; &#x43C;&#x43E;&#x436;&#x43D;&#x43E; &#x43D;&#x435; &#x442;&#x43E;&#x43B;&#x44C;&#x43A;&#x43E; &#x43E;&#x431;&#x44A;&#x44F;&#x432;&#x43B;&#x44F;&#x442;&#x44C; &#x43F;&#x440;&#x44F;&#x43C;&#x43E; &#x432; &#x43F;&#x430;&#x43A;&#x435;&#x442;&#x435; (&#x438;&#x437; &#x434;&#x436;&#x430;&#x432;&#x44B; &#x43E;&#x43D;&#x438; &#x432;&#x438;&#x434;&#x43D;&#x44B; &#x432;&#x441;&#x451; &#x440;&#x430;&#x432;&#x43D;&#x43E; &#x432; &#x43A;&#x43B;&#x430;&#x441;&#x441;&#x430;&#x445; &mdash; &#x43F;&#x43E; &#x438;&#x43C;&#x435;&#x43D;&#x438; &#x444;&#x430;&#x439;&#x43B;&#x430;), &#x43D;&#x43E; &#x438; &#x43F;&#x435;&#x440;&#x435;&#x434;&#x430;&#x432;&#x430;&#x442;&#x44C; &#x432; &#x43A;&#x430;&#x447;&#x435;&#x441;&#x442;&#x432;&#x435; &#x43F;&#x430;&#x440;&#x430;&#x43C;&#x435;&#x442;&#x440;&#x43E;&#x432;, &#x432;&#x43E;&#x437;&#x432;&#x440;&#x430;&#x449;&#x430;&#x442;&#x44C; &#x438;&#x437; &#x434;&#x440;&#x443;&#x433;&#x438;&#x445; &#x444;&#x443;&#x43D;&#x43A;&#x446;&#x438;&#x439; &#x438; &#x442;&#x434;. &#x418; &#x441;&#x435;&#x439;&#x447;&#x430;&#x441;, &#x43A;&#x43E;&#x43D;&#x435;&#x447;&#x43D;&#x43E;, &#x43D;&#x438;&#x43A;&#x43E;&#x433;&#x43E; &#x44D;&#x442;&#x438;&#x43C; &#x43D;&#x435; &#x443;&#x434;&#x438;&#x432;&#x438;&#x448;&#x44C;, &#x43D;&#x43E; &#x43D;&#x430;&#x43F;&#x440;&#x438;&#x43C;&#x435;&#x440; &#x432; &#x441;&#x440;&#x430;&#x432;&#x43D;&#x435;&#x43D;&#x438;&#x438; &#x441; Java, &#x433;&#x434;&#x435; &#x441;&#x438;&#x43D;&#x442;&#x430;&#x43A;&#x441;&#x438;&#x447;&#x435;&#x441;&#x43A;&#x438; &#x444;&#x443;&#x43D;&#x43A;&#x446;&#x438;&#x439; &#x43A;&#x430;&#x43A; &#x442;&#x430;&#x43A;&#x43E;&#x432;&#x44B;&#x445; &#x43D;&#x435;&#x442; (&#x430; &#x442;&#x43E;&#x43B;&#x44C;&#x43A;&#x43E; &#x444;&#x443;&#x43D;&#x43A;&#x446;&#x438;&#x43E;&#x43D;&#x430;&#x43B;&#x44C;&#x43D;&#x44B;&#x435; &#x438;&#x43D;&#x442;&#x435;&#x440;&#x444;&#x435;&#x439;&#x441;&#x44B;), &#x432; &#x43A;&#x43E;&#x442;&#x43B;&#x438;&#x43D;&#x435; &#x43F;&#x43E;&#x43B;&#x43D;&#x43E;&#x446;&#x435;&#x43D;&#x43D;&#x44B;&#x439; &#x441;&#x438;&#x43D;&#x442;&#x430;&#x43A;&#x441;&#x438;&#x441; &#x434;&#x43B;&#x44F; &#x43E;&#x431;&#x44A;&#x44F;&#x432;&#x43B;&#x435;&#x43D;&#x438;&#x44F; &#x444;&#x443;&#x43D;&#x43A;&#x446;&#x438;&#x438;:</p>
<pre><code class="hljs language-kotlin"><span class="hljs-comment">/* передаем в одну функцию другую -- принимает в параметр Int
 * и Int же возвращает. Возвращаем её же, только с фиксированным
 * значением в качестве параметра */</span>
<span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">passTen</span><span class="hljs-params">(func: <span class="hljs-type">(Int</span>)</span>-&gt;<span class="hljs-keyword">Int</span> ): <span class="hljs-params">()</span>-&gt;<span class="hljs-keyword">Int</span> {</span>
    <span class="hljs-keyword">return</span> { func(<span class="hljs-number">10</span>) }
}</code></pre>
<h2>Extension-&#x43B;&#x44F;&#x43C;&#x431;&#x434;&#x44B;</h2>
<p>&#x41D;&#x430;&#x440;&#x44F;&#x434;&#x443; &#x441; extension-&#x43C;&#x435;&#x442;&#x43E;&#x434;&#x430;&#x43C;&#x438;, &#x44D;&#x442;&#x43E; &#x435;&#x449;&#x435; &#x43E;&#x434;&#x43D;&#x430; &#x43C;&#x43E;&#x44F; &#x43B;&#x44E;&#x431;&#x438;&#x43C;&#x430;&#x44F; &#x444;&#x438;&#x447;&#x430;. &#x41F;&#x43E;&#x437;&#x432;&#x43E;&#x43B;&#x44F;&#x435;&#x442; &#x43E;&#x43F;&#x440;&#x435;&#x434;&#x435;&#x43B;&#x438;&#x442;&#x44C; &#x43B;&#x44F;&#x43C;&#x431;&#x434;&#x443;, &#x43A;&#x43E;&#x442;&#x43E;&#x440;&#x430;&#x44F; &#x431;&#x443;&#x434;&#x435;&#x442; &#x435;&#x449;&#x435; &#x438; extension-&#x43C;&#x435;&#x442;&#x43E;&#x434;&#x43E;&#x43C;. &#x417;&#x432;&#x443;&#x447;&#x438;&#x442; &#x43D;&#x435; &#x43E;&#x447;&#x435;&#x43D;&#x44C;, &#x434;&#x430;. &#x41F;&#x43E;&#x441;&#x43C;&#x43E;&#x442;&#x440;&#x438;&#x43C; &#x43D;&#x430; &#x43F;&#x440;&#x438;&#x43C;&#x435;&#x440;&#x435;:</p>
<pre><code class="hljs language-kotlin"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">World</span></span>(<span class="hljs-variable"><span class="hljs-keyword">val</span> name</span>:String = <span class="hljs-string">"world"</span>)

<span class="hljs-variable"><span class="hljs-keyword">val</span> printName</span>:World.()-&gt;<span class="hljs-keyword">Unit</span> = {
     <span class="hljs-comment">// интерполяцией в синтаксисе языка сейчас уже</span>
     <span class="hljs-comment">// никого не привлечь на темную сторону</span>
    println(<span class="hljs-string">"Hello $name"</span>)
}

<span class="hljs-variable"><span class="hljs-keyword">val</span> world</span> = World()

 <span class="hljs-comment">// вызываем нашу функцию как будто это метод нашего класса!</span>
world.printName()</code></pre>
<p>&#x42D;&#x442;&#x430; &#x432;&#x43E;&#x437;&#x43C;&#x43E;&#x436;&#x43D;&#x43E;&#x441;&#x442;&#x44C; &#x43E;&#x441;&#x43E;&#x431;&#x435;&#x43D;&#x43D;&#x43E; &#x438;&#x43D;&#x442;&#x435;&#x440;&#x435;&#x441;&#x43D;&#x43E; &#x441;&#x43C;&#x43E;&#x442;&#x440;&#x438;&#x442;&#x441;&#x44F; &#x432; <a href="https://kotlinlang.org/docs/reference/type-safe-builders.html">&#x431;&#x438;&#x43B;&#x434;&#x435;&#x440;&#x430;&#x445;</a>, &#x43F;&#x43E;&#x441;&#x43C;&#x43E;&#x442;&#x440;&#x435;&#x442;&#x44C; &#x43D;&#x430; &#x43A;&#x43E;&#x442;&#x43E;&#x440;&#x44B;&#x435; &#x44F; &#x43F;&#x440;&#x435;&#x434;&#x43B;&#x430;&#x433;&#x430;&#x44E; &#x432;&#x430;&#x43C; &#x441;&#x430;&#x43C;&#x43E;&#x441;&#x442;&#x43E;&#x44F;&#x442;&#x435;&#x43B;&#x44C;&#x43D;&#x43E; &mdash; &#x43D;&#x430; &#x441;&#x43B;&#x443;&#x447;&#x430;&#x439;, &#x435;&#x441;&#x43B;&#x438; &#x432;&#x430;&#x43C; &#x438;&#x43D;&#x442;&#x435;&#x440;&#x435;&#x441;&#x43D;&#x43E;, &#x43A;&#x430;&#x43A; &#x43F;&#x43E;&#x43B;&#x443;&#x447;&#x430;&#x44E;&#x442;&#x441;&#x44F; &#x432;&#x43E;&#x442; &#x442;&#x430;&#x43A;&#x438;&#x435; &#x43A;&#x43E;&#x43D;&#x441;&#x442;&#x440;&#x443;&#x43A;&#x446;&#x438;&#x438;:</p>
<pre><code class="hljs language-kotlin">html {
    head {
      title {+<span class="hljs-string">"XML encoding with Kotlin"</span>}
    }
    body {
      h1 {+<span class="hljs-string">"XML encoding with Kotlin"</span>}
      a(href = <span class="hljs-string">"http://kotlinlang.org"</span>) {+<span class="hljs-string">"Kotlin"</span>}
    }
}</code></pre>
<h2>Inline-&#x444;&#x443;&#x43A;&#x43D;&#x446;&#x438;&#x438;</h2>
<p>&#x41F;&#x43E;&#x43C;&#x435;&#x447;&#x430;&#x44F; &#x444;&#x443;&#x43D;&#x43A;&#x446;&#x438;&#x44E; &#x43A;&#x430;&#x43A; inline &#x43C;&#x44B; &#x43F;&#x440;&#x43E;&#x441;&#x438;&#x43C; &#x43A;&#x43E;&#x43C;&#x43F;&#x438;&#x43B;&#x44F;&#x442;&#x43E;&#x440; &#x43F;&#x43E;&#x43C;&#x435;&#x441;&#x442;&#x438;&#x442;&#x44C; &#x435;&#x451; &#x43F;&#x43E; &#x43C;&#x435;&#x441;&#x442;&#x443; &#x438;&#x441;&#x43F;&#x43E;&#x43B;&#x44C;&#x437;&#x43E;&#x432;&#x430;&#x43D;&#x438;&#x44F;. &#x427;&#x430;&#x449;&#x435; &#x432;&#x441;&#x435;&#x433;&#x43E; &#x442;&#x430;&#x43A;&#x438;&#x43C;&#x438; &#x432;&#x435;&#x449;&#x430;&#x43C;&#x438; &#x437;&#x430;&#x43D;&#x438;&#x43C;&#x430;&#x435;&#x442;&#x441;&#x44F; &#x440;&#x430;&#x43D;&#x442;&#x430;&#x439;&#x43C;, &#x43D;&#x43E; &#x435;&#x441;&#x442;&#x44C; &#x43A;&#x435;&#x439;&#x437;&#x44B;, &#x43A;&#x43E;&#x433;&#x434;&#x430; &#x43C;&#x44B; &#x442;&#x43E;&#x447;&#x43D;&#x43E; &#x437;&#x43D;&#x430;&#x435;&#x43C;, &#x447;&#x442;&#x43E; &#x444;&#x443;&#x43A;&#x43D;&#x446;&#x438;&#x44F; &#x44D;&#x442;&#x43E; &#x43F;&#x440;&#x43E;&#x441;&#x442;&#x43E; &#x448;&#x43E;&#x440;&#x442;&#x43A;&#x430;&#x442; &#x434;&#x43B;&#x44F; &#x43A;&#x430;&#x43A;&#x43E;&#x433;&#x43E;-&#x442;&#x43E; &#x434;&#x435;&#x439;&#x441;&#x442;&#x432;&#x438;&#x44F; &mdash; &#x43E;&#x441;&#x43E;&#x431;&#x435;&#x43D;&#x43D;&#x43E; &#x44D;&#x444;&#x444;&#x435;&#x43A;&#x442;&#x438;&#x432;&#x43D;&#x43E; &#x44D;&#x442;&#x43E; &#x440;&#x430;&#x431;&#x43E;&#x442;&#x430;&#x435;&#x442; &#x441; &#x43F;&#x435;&#x440;&#x435;&#x434;&#x430;&#x432;&#x430;&#x435;&#x43C;&#x44B;&#x43C;&#x438; &#x43B;&#x44F;&#x43C;&#x431;&#x434;&#x430;&#x43C;&#x438;:</p>
<pre><code class="hljs language-kotlin"><span class="hljs-comment">/* передаваемой лямбдой block сейчас уже никого не удивишь.
 * Главно, что лишних затрат на вызов этой функции не будет вообще,
 * иногда мне кажется, что это что-то вроде макросов */</span>
<span class="hljs-keyword">inline</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">lock</span><span class="hljs-params">(lock:<span class="hljs-type">Lock, block:(</span>)</span>-&gt;<span class="hljs-keyword">Unit</span>) {</span>
    lock.lock()
    <span class="hljs-keyword">try</span> {
        block()
    } <span class="hljs-keyword">finally</span> {
        lock.unlock()
    }
}

<span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">usage</span><span class="hljs-params">()</span> {</span>
    lock(Lock()) {
        <span class="hljs-comment">// делаем что-то внутри блокировки</span>
    }
}</code></pre>
<p>&#x41A;&#x43E;&#x43D;&#x435;&#x447;&#x43D;&#x43E;, &#x43D;&#x430; &#x442;&#x430;&#x43A;&#x438;&#x435; &#x444;&#x443;&#x43D;&#x43A;&#x446;&#x438;&#x438; &#x43D;&#x430;&#x43A;&#x43B;&#x430;&#x434;&#x44B;&#x432;&#x430;&#x435;&#x442;&#x441;&#x44F; &#x441;&#x435;&#x440;&#x438;&#x44F; &#x43E;&#x433;&#x440;&#x430;&#x43D;&#x438;&#x447;&#x435;&#x43D;&#x438;&#x439;, &#x43F;&#x43E;&#x434;&#x440;&#x43E;&#x431;&#x43D;&#x435;&#x435; &#x441;&#x43C;. <a href="https://kotlinlang.org/docs/reference/inline-functions.html">&#x434;&#x43E;&#x43A;&#x443;&#x43C;&#x435;&#x43D;&#x442;&#x430;&#x446;&#x438;&#x44E;</a>.</p>
<h2>&#x414;&#x435;&#x43B;&#x435;&#x433;&#x438;&#x440;&#x43E;&#x432;&#x430;&#x43D;&#x438;&#x435;</h2>
<p>&#x412; &#x43A;&#x43E;&#x442;&#x43B;&#x438;&#x43D;&#x435; &#x435;&#x441;&#x442;&#x44C; &#x434;&#x432;&#x430; &#x442;&#x438;&#x43F;&#x430; &#x434;&#x435;&#x43B;&#x435;&#x433;&#x438;&#x440;&#x43E;&#x432;&#x430;&#x43D;&#x438;&#x44F;. <a href="https://kotlinlang.org/docs/reference/delegation.html">&#x41F;&#x435;&#x440;&#x432;&#x44B;&#x439;</a>, &#x43A;&#x43E;&#x442;&#x43E;&#x440;&#x44B;&#x439; &#x43F;&#x43E;&#x437;&#x432;&#x43E;&#x43B;&#x44F;&#x435;&#x442; &#x434;&#x435;&#x43B;&#x435;&#x433;&#x438;&#x440;&#x43E;&#x432;&#x430;&#x442;&#x44C; &#x432;&#x441;&#x435; &#x43C;&#x435;&#x442;&#x43E;&#x434;&#x44B; &#x440;&#x435;&#x430;&#x43B;&#x438;&#x437;&#x443;&#x435;&#x43C;&#x43E;&#x433;&#x43E; &#x438;&#x43D;&#x442;&#x435;&#x440;&#x444;&#x435;&#x439;&#x441;&#x430; &#x43A; &#x43A;&#x430;&#x43A;&#x43E;&#x43C;&#x443;-&#x442;&#x43E; &#x438;&#x43D;&#x441;&#x442;&#x430;&#x43D;&#x441;&#x443; &#x44D;&#x442;&#x43E;&#x433;&#x43E; &#x442;&#x438;&#x43F;&#x430;:</p>
<pre><code class="hljs language-kotlin">interface Connection {
    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">connect</span><span class="hljs-params">()</span></span>
}

<span class="hljs-comment">/* здесь мы видим стандартный для котлина синтаксис определения
 * класса вместе с параметрами конструктора и свойствами --
 * в данном случае connection будет и в конструкторе и в поле.
 * Есть возможность определить и множественный конструктор
 * см https://kotlinlang.org/docs/reference/classes.html#constructors
 * И, наконец, мы видим что класс реализует интерфейс Connection, все методы
 * которого делегируются к переданному в конструктор экземпляру Connection-а.
 * При желании их конечно можно переопределить в теле класса */</span>
<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConnectionWrapper</span></span>(<span class="hljs-variable"><span class="hljs-keyword">val</span> connection</span>:Connection) : Connection by connection</code></pre>
<p>&#x423; &#x44D;&#x442;&#x43E;&#x433;&#x43E; &#x441;&#x438;&#x43D;&#x442;&#x430;&#x43A;&#x441;&#x438;&#x441;&#x430; &#x435;&#x441;&#x442;&#x44C; &#x440;&#x44F;&#x434; &#x43E;&#x433;&#x440;&#x430;&#x43D;&#x438;&#x447;&#x435;&#x43D;&#x438;&#x439;. &#x41D;&#x430;&#x43F;&#x440;&#x438;&#x43C;&#x435;&#x440;, &#x438;&#x43D;&#x441;&#x442;&#x430;&#x43D;&#x441; &#x434;&#x43B;&#x44F; &#x434;&#x435;&#x43B;&#x435;&#x433;&#x438;&#x440;&#x43E;&#x432;&#x430;&#x43D;&#x438;&#x44F; &#x434;&#x43E;&#x43B;&#x436;&#x435;&#x43D; &#x431;&#x44B;&#x442;&#x44C; &#x438;&#x437;&#x432;&#x435;&#x441;&#x442;&#x435;&#x43D; &#x434;&#x43E; &#x432;&#x44B;&#x437;&#x43E;&#x432;&#x430; &#x43A;&#x43E;&#x43D;&#x441;&#x442;&#x440;&#x443;&#x43A;&#x442;&#x43E;&#x440;&#x430;.</p>
<p>&#x412;&#x442;&#x43E;&#x440;&#x43E;&#x439; &#x442;&#x438;&#x43F; &#x434;&#x435;&#x43B;&#x435;&#x433;&#x438;&#x440;&#x43E;&#x432;&#x430;&#x43D;&#x438;&#x44F; &mdash; &#x44D;&#x442;&#x43E; <a href="https://kotlinlang.org/docs/reference/delegated-properties.html">delegated properties</a>. &#x41F;&#x43E;&#x437;&#x432;&#x43E;&#x43B;&#x44F;&#x435;&#x442; &#x43E;&#x43F;&#x440;&#x435;&#x434;&#x435;&#x43B;&#x438;&#x442;&#x44C; &#x43E;&#x431;&#x44A;&#x435;&#x43A;&#x442; &#x441; &#x43C;&#x435;&#x442;&#x43E;&#x434;&#x430;&#x43C;&#x438; get (&#x438; set &#x434;&#x43B;&#x44F; var), &#x43A; &#x43A;&#x43E;&#x442;&#x43E;&#x440;&#x44B;&#x43C; &#x431;&#x443;&#x434;&#x435;&#x442; &#x43E;&#x441;&#x443;&#x449;&#x435;&#x441;&#x442;&#x432;&#x43B;&#x44F;&#x442;&#x44C;&#x441;&#x44F; &#x434;&#x435;&#x43B;&#x435;&#x433;&#x438;&#x440;&#x43E;&#x432;&#x430;&#x43D;&#x438;&#x435; &#x434;&#x43E;&#x441;&#x442;&#x443;&#x43F;&#x430; &#x43F;&#x440;&#x438; &#x43E;&#x431;&#x440;&#x430;&#x449;&#x435;&#x43D;&#x438;&#x438; &#x43A; &#x441;&#x432;&#x43E;&#x439;&#x441;&#x442;&#x432;&#x443; &#x43E;&#x431;&#x44A;&#x435;&#x43A;&#x442;&#x430;.</p>
<pre><code class="hljs language-kotlin"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span> </span>{
    <span class="hljs-comment">/* это делегат из стандартной библиотеки,
       позволяет отложить инициализацию поля
       до первого обращения к нему */</span>
    <span class="hljs-keyword">private</span> <span class="hljs-variable"><span class="hljs-keyword">val</span> someProeprty by lazy { HavyType() }
}</span></code></pre>
<h2>Generics</h2>
<p>&#x421;&#x43E;&#x437;&#x434;&#x430;&#x442;&#x435;&#x43B;&#x438; &#x43A;&#x43E;&#x442;&#x43B;&#x438;&#x43D;&#x430; &#x43D;&#x435;&#x441;&#x43A;&#x43E;&#x43B;&#x44C;&#x43A;&#x43E; <a href="https://kotlinlang.org/docs/reference/generics.html">&#x443;&#x43B;&#x443;&#x447;&#x448;&#x438;&#x43B;&#x438;</a> Java-&#x434;&#x436;&#x435;&#x43D;&#x435;&#x440;&#x438;&#x43A;&#x438;. &#x418;&#x437;-&#x437;&#x430; &#x441;&#x43E;&#x432;&#x43C;&#x435;&#x441;&#x442;&#x438;&#x43C;&#x43E;&#x441;&#x442;&#x438; &#x441; &#x434;&#x436;&#x430;&#x432;&#x43E;&#x439; &#x43D;&#x435; &#x432;&#x441;&#x451; &#x43F;&#x43E;&#x43B;&#x443;&#x447;&#x438;&#x43B;&#x43E;&#x441;&#x44C; &#x43A;&#x430;&#x43A; &#x445;&#x43E;&#x442;&#x435;&#x43B;&#x43E;&#x441;&#x44C; &#x431;&#x44B;, &#x43D;&#x43E; &#x438;&#x43C; &#x443;&#x434;&#x430;&#x43B;&#x43E;&#x441;&#x44C; &#x438;&#x441;&#x43F;&#x440;&#x430;&#x432;&#x438;&#x442;&#x44C; &#x43C;&#x43D;&#x43E;&#x433;&#x43E; &#x43D;&#x435;&#x43F;&#x440;&#x438;&#x44F;&#x442;&#x43D;&#x44B;&#x445; &#x43C;&#x43E;&#x43C;&#x435;&#x43D;&#x442;&#x43E;&#x432;, &#x43A;&#x43E;&#x442;&#x43E;&#x440;&#x44B;&#x435; &#x43D;&#x435; &#x443;&#x447;&#x43B;&#x438; &#x438;&#x445; &#x43F;&#x440;&#x435;&#x434;&#x448;&#x435;&#x441;&#x442;&#x432;&#x435;&#x43D;&#x43D;&#x438;&#x43A;&#x438; &#x43F;&#x440;&#x438; &#x440;&#x430;&#x431;&#x43E;&#x442;&#x435; &#x43D;&#x430;&#x434; Java 5.</p>
<h2>&#x414;&#x435;&#x441;&#x442;&#x440;&#x443;&#x43A;&#x442;&#x443;&#x440;&#x438;&#x437;&#x430;&#x446;&#x438;&#x44F;</h2>
<pre><code class="hljs language-kotlin"><span class="hljs-variable"><span class="hljs-keyword">val</span> (first, second)</span> = someFunc()</code></pre>
<p>&#x427;&#x442;&#x43E;&#x431;&#x44B; &#x442;&#x430;&#x43A;&#x43E;&#x439; &#x43A;&#x43E;&#x434; &#x437;&#x430;&#x440;&#x430;&#x431;&#x43E;&#x442;&#x430;&#x43B;, &#x432;&#x43E;&#x437;&#x432;&#x440;&#x430;&#x449;&#x430;&#x435;&#x43C;&#x43E;&#x435; &#x437;&#x43D;&#x430;&#x447;&#x435;&#x43D;&#x438;&#x435; &#x438;&#x437; someFunc() &#x434;&#x43E;&#x43B;&#x436;&#x43D;&#x43E; &#x431;&#x44B;&#x442;&#x44C; &#x442;&#x438;&#x43F;&#x430;, &#x443; &#x43A;&#x43E;&#x442;&#x43E;&#x440;&#x43E;&#x433;&#x43E; &#x435;&#x441;&#x442;&#x44C; (&#x43C;&#x43E;&#x436;&#x43D;&#x43E; extension) &#x43C;&#x435;&#x442;&#x43E;&#x434;&#x44B; component1(), component2():</p>
<pre><code class="hljs language-kotlin"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span> </span>{
    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">component1</span><span class="hljs-params">()</span>:String = "test"</span>
    <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">component2</span><span class="hljs-params">()</span>:<span class="hljs-keyword">Int</span> = 10</span>
}
<span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">someFunc</span><span class="hljs-params">()</span>:Foo = <span class="hljs-title">Foo</span><span class="hljs-params">()</span></span>

<span class="hljs-comment">// или так, to -- в это такой infix extension-метод определенный</span>
<span class="hljs-comment">// для Any, который создает экземпляр класса Pair, метод hashMapOf</span>
<span class="hljs-comment">// в свою очередь принимает vararg параметр таких пар</span>
<span class="hljs-variable"><span class="hljs-keyword">val</span> map</span> = hashMapOf(<span class="hljs-number">1</span> to <span class="hljs-string">"test"</span>)
<span class="hljs-keyword">for</span> ((id, name) <span class="hljs-keyword">in</span> map) {
    <span class="hljs-comment">//  такой синтаксис возможен, потому что для Map-а определен метод iterator()</span>
    <span class="hljs-comment">// возвращающий набор Map.Entry, а для него в свою очередь определены два</span>
    <span class="hljs-comment">// extension-метода component1() и component2()</span>
}</code></pre>
<h2>Data-&#x43A;&#x43B;&#x430;&#x441;&#x441;&#x44B;</h2>
<p>&#x421;&#x430;&#x445;&#x430;&#x440; &#x43A;&#x43E;&#x43C;&#x43F;&#x438;&#x43B;&#x44F;&#x442;&#x43E;&#x440;&#x430; &#x434;&#x43B;&#x44F; &#x441;&#x43E;&#x437;&#x434;&#x430;&#x43D;&#x438;&#x44F; &#x431;&#x438;&#x43D;&#x43E;&#x432;:</p>
<pre><code class="hljs language-kotlin">data <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bean</span></span>(<span class="hljs-variable"><span class="hljs-keyword">val</span> a</span>:String, <span class="hljs-variable"><span class="hljs-keyword">val</span> b</span>:<span class="hljs-keyword">Int</span>)</code></pre>
<p>&#x421;&#x43E;&#x437;&#x434;&#x430;&#x435;&#x442; &#x431;&#x438;&#x43D; &#x441; &#x43F;&#x43E;&#x43B;&#x44F;&#x43C;&#x438; + &#x430;&#x432;&#x442;&#x43E;&#x433;&#x435;&#x43D;&#x435;&#x440;&#x438;&#x440;&#x443;&#x435;&#x442; equals+hashCode+toString()+componentN &#x438;&#x437; &#x440;&#x430;&#x437;&#x434;&#x435;&#x43B;&#x430; &#x432;&#x44B;&#x448;&#x435;, &#x447;&#x442;&#x43E; &#x43F;&#x43E;&#x437;&#x432;&#x43E;&#x43B;&#x44F;&#x435;&#x442; &#x43F;&#x438;&#x441;&#x430;&#x442;&#x44C; &#x442;&#x430;&#x43A;&#x43E;&#x439; &#x43A;&#x43E;&#x434;:</p>
<pre><code class="hljs language-kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">someFunc</span><span class="hljs-params">()</span>:Bean = <span class="hljs-title">Bean</span><span class="hljs-params">("test", 10)</span></span>
<span class="hljs-variable"><span class="hljs-keyword">val</span> (a, b)</span> = someFunc()</code></pre>
<p>&#x41F;&#x43E;&#x43B;&#x435;&#x437;&#x43D;&#x430;&#x44F; &#x432;&#x435;&#x449;&#x44C;, &#x43D;&#x43E; &#x43E; &#x43D;&#x44E;&#x430;&#x43D;&#x441;&#x430;&#x445; &#x441;&#x43C;. &#x43F;&#x443;&#x43D;&#x43A;&#x442; &laquo;&#x41E; &#x433;&#x440;&#x443;&#x441;&#x442;&#x43D;&#x43E;&#x43C;&raquo;.</p>
<h2>&#x421;&#x442;&#x430;&#x43D;&#x434;&#x430;&#x440;&#x442;&#x43D;&#x430;&#x44F; &#x431;&#x438;&#x431;&#x43B;&#x438;&#x43E;&#x442;&#x435;&#x43A;&#x430;</h2>
<p>&#x41A;&#x43E;&#x43D;&#x435;&#x447;&#x43D;&#x43E;, &#x43D;&#x435;&#x43B;&#x44C;&#x437;&#x44F; &#x43D;&#x435; &#x443;&#x43F;&#x43E;&#x43C;&#x44F;&#x43D;&#x443;&#x442;&#x44C; &#x438; <a href="https://kotlinlang.org/api/latest/jvm/stdlib/index.html">&#x441;&#x442;&#x430;&#x43D;&#x434;&#x430;&#x440;&#x442;&#x43D;&#x443;&#x44E; &#x431;&#x438;&#x431;&#x43B;&#x438;&#x43E;&#x442;&#x435;&#x43A;&#x443;</a>. &#x422;&#x430;&#x43A; &#x43A;&#x430;&#x43A; &#x43A;&#x43E;&#x442;&#x43B;&#x438;&#x43D; &#x43D;&#x430;&#x446;&#x435;&#x43B;&#x435;&#x43D; &#x432; &#x43F;&#x435;&#x440;&#x432;&#x443;&#x44E; &#x43E;&#x447;&#x435;&#x440;&#x435;&#x434;&#x44C; &#x43D;&#x430; &#x440;&#x430;&#x431;&#x43E;&#x442;&#x443; &#x432;&#x43C;&#x435;&#x441;&#x442;&#x435; &#x441; Java, &#x442;&#x43E; &#x438; &#x446;&#x435;&#x43B;&#x438;&#x43A;&#x43E;&#x43C; &#x441;&#x432;&#x43E;&#x435;&#x439; &#x441;&#x442;&#x430;&#x43D;&#x434;&#x430;&#x440;&#x442;&#x43D;&#x43E;&#x439; &#x431;&#x438;&#x431;&#x43B;&#x438;&#x43E;&#x442;&#x435;&#x43A;&#x438; &#x443; &#x43D;&#x435;&#x433;&#x43E; &#x43D;&#x435;&#x442;. &#x411;&#x43E;&#x43B;&#x44C;&#x448;&#x430;&#x44F; &#x447;&#x430;&#x441;&#x442;&#x44C; &#x441;&#x442;&#x430;&#x43D;&#x434;&#x430;&#x440;&#x442;&#x43D;&#x43E;&#x439; &#x431;&#x438;&#x431;&#x43B;&#x438;&#x43E;&#x442;&#x435;&#x43A;&#x438; Kotlin &#x43D;&#x430;&#x446;&#x435;&#x43B;&#x435;&#x43D;&#x430; &#x43D;&#x430; &#x443;&#x43B;&#x443;&#x447;&#x448;&#x435;&#x43D;&#x438;&#x435; &#x438; &#x438;&#x441;&#x43F;&#x440;&#x430;&#x432;&#x43B;&#x435;&#x43D;&#x438;&#x435; &#x431;&#x438;&#x431;&#x43B;&#x438;&#x43E;&#x442;&#x435;&#x43A;&#x438; &#x441;&#x442;&#x430;&#x440;&#x448;&#x435;&#x433;&#x43E; &#x431;&#x440;&#x430;&#x442;&#x430; &mdash; Java. &#x41E;&#x434;&#x43D;&#x430;&#x43A;&#x43E;, &#x44D;&#x442;&#x43E; &#x442;&#x435;&#x43C;&#x430; &#x434;&#x43B;&#x44F; &#x434;&#x440;&#x443;&#x433;&#x43E;&#x439; &#x431;&#x43E;&#x43B;&#x44C;&#x448;&#x43E;&#x439; &#x441;&#x442;&#x430;&#x442;&#x44C;&#x438;.</p>
<h2>&#x41E; &#x433;&#x440;&#x443;&#x441;&#x442;&#x43D;&#x43E;&#x43C;</h2>
<p>&#x412;&#x44B; &#x43C;&#x43E;&#x433;&#x43B;&#x438; &#x43F;&#x43E;&#x434;&#x443;&#x43C;&#x430;&#x442;&#x44C;, &#x447;&#x442;&#x43E; &#x44D;&#x442;&#x43E; &#x438;&#x434;&#x435;&#x430;&#x43B;&#x44C;&#x43D;&#x44B;&#x439; &#x43F;&#x440;&#x43E;&#x434;&#x443;&#x43A;&#x442;, &#x43D;&#x43E; &#x43D;&#x435;&#x442;, &#x435;&#x441;&#x442;&#x44C; &#x438; &#x43D;&#x435;&#x43F;&#x440;&#x438;&#x44F;&#x442;&#x43D;&#x44B;&#x435; &#x43C;&#x43E;&#x43C;&#x435;&#x43D;&#x442;&#x44B;:</p>
<h2>IDE</h2>
<p>&#x41D;&#x430;&#x434; &#x43F;&#x43B;&#x430;&#x433;&#x438;&#x43D;&#x43E;&#x43C; &#x435;&#x449;&#x435; &#x440;&#x430;&#x431;&#x43E;&#x442;&#x430;&#x442;&#x44C; &#x438; &#x440;&#x430;&#x431;&#x43E;&#x442;&#x430;&#x442;&#x44C;, &#x43F;&#x435;&#x440;&#x438;&#x43E;&#x434;&#x438;&#x447;&#x435;&#x441;&#x43A;&#x438; &#x432;&#x44B;&#x434;&#x430;&#x435;&#x442; &#x44D;&#x43A;&#x441;&#x435;&#x43F;&#x448;&#x435;&#x43D;&#x44B;, &#x43F;&#x43B;&#x43E;&#x445;&#x43E; &#x443;&#x43C;&#x435;&#x435;&#x442; &#x432; toString() &#x432; &#x434;&#x435;&#x431;&#x430;&#x433;&#x435;, &#x430; &#x442;&#x430;&#x43A; &#x436;&#x435; &#x43B;&#x44E;&#x431;&#x438;&#x442; &#x43F;&#x440;&#x43E;&#x43C;&#x430;&#x445;&#x438;&#x432;&#x430;&#x442;&#x44C;&#x441;&#x44F; &#x43F;&#x43E; &#x441;&#x441;&#x44B;&#x43B;&#x43A;&#x435; &#x43D;&#x430; &#x438;&#x441;&#x445;&#x43E;&#x434;&#x43D;&#x438;&#x43A;, &#x438;&#x43D;&#x43E;&#x433;&#x434;&#x430; (&#x432;&#x438;&#x434;&#x438;&#x43C;&#x43E; &#x438;&#x437; &#x437;&#x430; &#x43E;&#x441;&#x43E;&#x431;&#x435;&#x43D;&#x43D;&#x43E;&#x441;&#x442;&#x435;&#x439; &#x438;&#x43D;&#x43B;&#x430;&#x439;&#x43D;&#x430;) &#x43F;&#x443;&#x442;&#x430;&#x435;&#x442; &#x433;&#x434;&#x435; &#x43F;&#x43E;&#x441;&#x442;&#x430;&#x432;&#x43B;&#x435;&#x43D; &#x431;&#x440;&#x44D;&#x43A;&#x43F;&#x43E;&#x438;&#x43D;&#x442; &#x438; &#x442;&#x43E;&#x43C;&#x443; &#x43F;&#x43E;&#x434;&#x43E;&#x431;&#x43D;&#x44B;&#x435; &#x43F;&#x440;&#x43E;&#x431;&#x43B;&#x435;&#x43C;&#x44B;. &#x42D;&#x442;&#x43E; &#x432;&#x441;&#x451; &#x43A;&#x43E;&#x43D;&#x435;&#x447;&#x43D;&#x43E; &#x441;&#x43E; &#x432;&#x440;&#x435;&#x43C;&#x435;&#x43D;&#x435;&#x43C; &#x43D;&#x430;&#x432;&#x435;&#x440;&#x43D;&#x44F;&#x43A;&#x430; &#x43F;&#x43E;&#x43F;&#x440;&#x430;&#x432;&#x44F;&#x442;, &#x43D;&#x43E; &#x441;&#x435;&#x439;&#x447;&#x430;&#x441; &#x43C;&#x44B; &#x438;&#x43C;&#x435;&#x435;&#x43C; &#x438;&#x43C;&#x435;&#x43D;&#x43D;&#x43E; &#x44D;&#x442;&#x43E;.</p>
<h2>Data-&#x43A;&#x43B;&#x430;&#x441;&#x441;&#x44B;</h2>
<p>&#x41D;&#x430;&#x434;&#x43E; &#x43F;&#x440;&#x438;&#x437;&#x43D;&#x430;&#x442;&#x44C;, &#x447;&#x442;&#x43E; &#x438;&#x434;&#x435;&#x44F; &#x431;&#x44B;&#x43B;&#x430; &#x445;&#x43E;&#x440;&#x43E;&#x448;&#x430;&#x44F;, &#x43D;&#x43E; &#x432; &#x434;&#x430;&#x43D;&#x43D;&#x44B;&#x439; &#x43C;&#x43E;&#x43C;&#x435;&#x43D;&#x442; &#x435;&#x441;&#x442;&#x44C; &#x43C;&#x430;&#x441;&#x441;&#x430; <a href="https://kotlinlang.org/docs/reference/data-classes.html">&#x43E;&#x433;&#x440;&#x430;&#x43D;&#x438;&#x447;&#x435;&#x43D;&#x438;&#x439;</a>, &#x43D;&#x430;&#x43B;&#x43E;&#x436;&#x435;&#x43D;&#x43D;&#x44B;&#x445; &#x43D;&#x430; &#x44D;&#x442;&#x43E;&#x442; &#x442;&#x438;&#x43F; &#x43A;&#x43B;&#x430;&#x441;&#x441;&#x43E;&#x432;, &#x447;&#x442;&#x43E; &#x43F;&#x43E;&#x437;&#x432;&#x43E;&#x43B;&#x44F;&#x435;&#x442; &#x438;&#x445; &#x438;&#x441;&#x43F;&#x43E;&#x43B;&#x44C;&#x437;&#x43E;&#x432;&#x430;&#x442;&#x44C; &#x432; &#x441;&#x438;&#x43B;&#x44C;&#x43D;&#x43E; &#x431;&#x43E;&#x43B;&#x435;&#x435; &#x43E;&#x433;&#x440;&#x430;&#x43D;&#x438;&#x447;&#x435;&#x43D;&#x43D;&#x43E;&#x43C; &#x447;&#x438;&#x441;&#x43B;&#x435; &#x43A;&#x435;&#x439;&#x437;&#x43E;&#x432;, &#x43D;&#x435;&#x436;&#x435;&#x43B;&#x438; &#x445;&#x43E;&#x442;&#x435;&#x43B;&#x43E;&#x441;&#x44C; &#x431;&#x44B;. &#x421;&#x43E;&#x437;&#x434;&#x430;&#x442;&#x435;&#x43B;&#x438; &#x44F;&#x437;&#x44B;&#x43A;&#x430; &#x43E;&#x431;&#x435;&#x449;&#x430;&#x44E;&#x442; &#x43F;&#x43E;&#x440;&#x430;&#x431;&#x43E;&#x442;&#x430;&#x442;&#x44C; &#x43D;&#x430;&#x434; &#x440;&#x435;&#x448;&#x435;&#x43D;&#x438;&#x435;&#x43C; &#x44D;&#x442;&#x43E;&#x439; &#x43F;&#x440;&#x43E;&#x431;&#x43B;&#x435;&#x43C;&#x44B;, &#x43D;&#x43E; &#x43F;&#x43E;&#x43A;&#x430; &#x442;&#x430;&#x43A;.</p>
<h2>&#x41D;&#x435;&#x43A;&#x43E;&#x442;&#x43E;&#x440;&#x430;&#x44F; &#x43D;&#x435;&#x440;&#x44F;&#x448;&#x43B;&#x438;&#x432;&#x43E;&#x441;&#x442;&#x44C;</h2>
<p>&#x41A;&#x43E;&#x43D;&#x435;&#x447;&#x43D;&#x43E;, &#x43D;&#x435;&#x440;&#x44F;&#x448;&#x43B;&#x438;&#x432;&#x43E;&#x441;&#x442;&#x44C; &#x432; &#x43F;&#x435;&#x440;&#x432;&#x443;&#x44E; &#x43E;&#x447;&#x435;&#x440;&#x435;&#x434;&#x44C; &#x432; &#x433;&#x43E;&#x43B;&#x43E;&#x432;&#x430;&#x445;, &#x43D;&#x43E; &#x43A;&#x440;&#x430;&#x442;&#x43A;&#x43E;&#x441;&#x442;&#x44C; &#x441;&#x438;&#x43D;&#x442;&#x430;&#x43A;&#x441;&#x438;&#x441;&#x430; &#x438;&#x43D;&#x43E;&#x433;&#x434;&#x430; &#x438;&#x433;&#x440;&#x430;&#x435;&#x442; &#x437;&#x43B;&#x443;&#x44E; &#x448;&#x443;&#x442;&#x43A;&#x443;, &#x438; &#x43C;&#x435;&#x441;&#x442;&#x430;&#x43C;&#x438; &#x43A;&#x43E;&#x434; &#x432;&#x44B;&#x433;&#x43B;&#x44F;&#x434;&#x438;&#x442; &#x43D;&#x435;&#x432;&#x430;&#x436;&#x43D;&#x43E;. &#x412;&#x43E;&#x437;&#x43C;&#x43E;&#x436;&#x43D;&#x43E;, &#x43D;&#x430;&#x43B;&#x438;&#x447;&#x438;&#x435; &#x441;&#x442;&#x430;&#x439;&#x43B;-&#x433;&#x430;&#x439;&#x434;&#x430; &#x43D;&#x435;&#x441;&#x43A;&#x43E;&#x43B;&#x44C;&#x43A;&#x43E; &#x44D;&#x442;&#x443; &#x43F;&#x440;&#x43E;&#x431;&#x43B;&#x435;&#x43C;&#x443; &#x438;&#x441;&#x43F;&#x440;&#x430;&#x432;&#x438;&#x43B;&#x43E; &#x431;&#x44B;, &#x43D;&#x43E; &#x43F;&#x43E;&#x43A;&#x430; &#x438;&#x43D;&#x43E;&#x433;&#x434;&#x430; &#x43F;&#x440;&#x438;&#x445;&#x43E;&#x434;&#x438;&#x442;&#x441;&#x44F; &#x43F;&#x43E;&#x441;&#x442;&#x430;&#x440;&#x430;&#x442;&#x44C;&#x441;&#x44F;, &#x447;&#x442;&#x43E;&#x431;&#x44B; &#x43D;&#x435; &#x442;&#x43E;&#x43B;&#x44C;&#x43A;&#x43E; &#x445;&#x43E;&#x440;&#x43E;&#x448;&#x43E; &#x440;&#x430;&#x431;&#x43E;&#x442;&#x430;&#x43B;&#x43E;, &#x43D;&#x43E; &#x438; &#x43A;&#x440;&#x430;&#x441;&#x438;&#x432;&#x43E; &#x432;&#x44B;&#x433;&#x43B;&#x44F;&#x434;&#x435;&#x43B;&#x43E;. &#x41E;&#x441;&#x43E;&#x431;&#x435;&#x43D;&#x43D;&#x43E; &#x43D;&#x430; &#x43C;&#x43E;&#x439; &#x441;&#x443;&#x431;&#x44A;&#x435;&#x43A;&#x442;&#x438;&#x432;&#x43D;&#x44B;&#x439; &#x432;&#x437;&#x433;&#x43B;&#x44F;&#x434; &#x441;&#x442;&#x440;&#x430;&#x448;&#x43D;&#x43E; &#x432;&#x44B;&#x433;&#x43B;&#x44F;&#x434;&#x44F;&#x442; get, set &#x434;&#x43B;&#x44F; &#x441;&#x432;&#x43E;&#x439;&#x441;&#x442;&#x432;.</p>
<h2>&#x412; &#x437;&#x430;&#x43A;&#x43B;&#x44E;&#x447;&#x435;&#x43D;&#x438;&#x435;</h2>
<p>&#x41E;&#x434;&#x43D;&#x43E;&#x439; &#x441;&#x442;&#x430;&#x442;&#x44C;&#x451;&#x439; &#x43D;&#x435;&#x432;&#x43E;&#x437;&#x43C;&#x43E;&#x436;&#x43D;&#x43E; &#x43E;&#x445;&#x432;&#x430;&#x442;&#x438;&#x442;&#x44C; &#x432;&#x441;&#x435; &#x43E;&#x441;&#x43E;&#x431;&#x435;&#x43D;&#x43D;&#x43E;&#x441;&#x442;&#x438; &#x438; &#x430;&#x441;&#x43F;&#x435;&#x43A;&#x442;&#x44B; &#x44F;&#x437;&#x44B;&#x43A;&#x430;, &#x43D;&#x43E; &#x44F; &#x438; &#x43D;&#x435; &#x43F;&#x44B;&#x442;&#x430;&#x43B;&#x441;&#x44F;. &#x41C;&#x43E;&#x435;&#x439; &#x437;&#x430;&#x434;&#x430;&#x447;&#x435;&#x439; &#x431;&#x44B;&#x43B;&#x43E; &#x43F;&#x43E;&#x437;&#x43D;&#x430;&#x43A;&#x43E;&#x43C;&#x438;&#x442;&#x44C; &#x441; &#x44F;&#x437;&#x44B;&#x43A;&#x43E;&#x43C;, &#x43C;&#x43E;&#x436;&#x435;&#x442; &#x431;&#x44B;&#x442;&#x44C; &#x43E;&#x431;&#x440;&#x430;&#x442;&#x438;&#x442;&#x44C; &#x43D;&#x430; &#x43D;&#x435;&#x433;&#x43E; &#x432;&#x43D;&#x438;&#x43C;&#x430;&#x43D;&#x438;&#x435;. &#x422;&#x43E;&#x442;, &#x43A;&#x442;&#x43E; &#x437;&#x430;&#x438;&#x43D;&#x442;&#x435;&#x440;&#x435;&#x441;&#x43E;&#x432;&#x430;&#x43B;&#x441;&#x44F;, &#x441;&#x43C;&#x43E;&#x436;&#x435;&#x442; &#x43D;&#x430;&#x439;&#x442;&#x438; &#x431;&#x43E;&#x43B;&#x44C;&#x448;&#x435; &#x432; <a href="https://kotlinlang.org/docs/reference/">&#x434;&#x43E;&#x43A;&#x443;&#x43C;&#x435;&#x43D;&#x442;&#x430;&#x446;&#x438;&#x438;</a>, &#x43F;&#x43E;&#x441;&#x43C;&#x43E;&#x442;&#x440;&#x435;&#x442;&#x44C; <a href="https://github.com/JetBrains/kotlin">&#x438;&#x441;&#x445;&#x43E;&#x434;&#x43D;&#x438;&#x43A;&#x438;</a>, <a href="http://try.kotlinlang.org/">&#x43F;&#x43E;&#x43F;&#x440;&#x43E;&#x431;&#x43E;&#x432;&#x430;&#x442;&#x44C;</a>, <a href="https://habrahabr.ru/company/JetBrains/blog/277573/">&#x437;&#x430;&#x434;&#x430;&#x442;&#x44C; &#x432;&#x43E;&#x43F;&#x440;&#x43E;&#x441;</a>. &#x421;&#x43B;&#x43E;&#x436;&#x43D;&#x43E; &#x43F;&#x440;&#x435;&#x434;&#x441;&#x43A;&#x430;&#x437;&#x430;&#x442;&#x44C; &#x43F;&#x43E;&#x43F;&#x443;&#x43B;&#x44F;&#x440;&#x43D;&#x43E;&#x441;&#x442;&#x44C; &#x44D;&#x442;&#x43E;&#x433;&#x43E; &#x44F;&#x437;&#x44B;&#x43A;&#x430;, &#x43D;&#x43E; &#x443;&#x436;&#x435; &#x441;&#x435;&#x439;&#x447;&#x430;&#x441; &#x432;&#x438;&#x434;&#x43D;&#x43E;, &#x447;&#x442;&#x43E; &#x442;&#x430;&#x43A;&#x43E;&#x433;&#x43E; &#x43F;&#x440;&#x43E;&#x434;&#x443;&#x43A;&#x442;&#x430; &#x43C;&#x43D;&#x43E;&#x433;&#x438;&#x435; &#x436;&#x434;&#x430;&#x43B;&#x438;, &#x43F;&#x440;&#x43E;&#x435;&#x43A;&#x442;&#x44B; &#x43D;&#x430; &#x43A;&#x43E;&#x442;&#x43B;&#x438;&#x43D;&#x435; &#x43F;&#x43E;&#x44F;&#x432;&#x43B;&#x44F;&#x44E;&#x442;&#x441;&#x44F; &#x43A;&#x430;&#x43A; &#x433;&#x440;&#x438;&#x431;&#x44B;, &#x430; &#x43F;&#x43E;&#x441;&#x43B;&#x435; &#x440;&#x435;&#x43B;&#x438;&#x437;&#x430; &#x447;&#x430;&#x441;&#x442;&#x43E;&#x442;&#x430; &#x438;&#x445; &#x43F;&#x43E;&#x44F;&#x432;&#x43B;&#x435;&#x43D;&#x438;&#x44F; &#x443;&#x432;&#x435;&#x43B;&#x438;&#x447;&#x438;&#x442;&#x441;&#x44F; &#x435;&#x449;&#x435;. &#x41F;&#x43E; &#x43C;&#x43E;&#x435;&#x43C;&#x443; &#x432;&#x43F;&#x435;&#x447;&#x430;&#x442;&#x43B;&#x435;&#x43D;&#x438;&#x44E;, &#x44F;&#x437;&#x44B;&#x43A;&#x430; &#x445;&#x43E;&#x440;&#x43E;&#x448;&#x43E; &#x441;&#x431;&#x430;&#x43B;&#x430;&#x43D;&#x441;&#x438;&#x440;&#x43E;&#x432;&#x430;&#x43D; &#x438; &#x43F;&#x440;&#x43E;&#x434;&#x443;&#x43C;&#x430;&#x43D; &mdash; &#x432;&#x43E; &#x432;&#x440;&#x435;&#x43C;&#x44F; &#x43D;&#x430;&#x43F;&#x438;&#x441;&#x430;&#x43D;&#x438;&#x44F; &#x43A;&#x43E;&#x434;&#x430;, &#x441;&#x43A;&#x43B;&#x430;&#x434;&#x44B;&#x432;&#x430;&#x435;&#x442;&#x441;&#x44F; &#x43E;&#x449;&#x443;&#x449;&#x435;&#x43D;&#x438;&#x435;, &#x447;&#x442;&#x43E; &#x432;&#x441;&#x451; &#x43D;&#x430; &#x441;&#x432;&#x43E;&#x435;&#x43C; &#x43C;&#x435;&#x441;&#x442;&#x435;. &#x415;&#x441;&#x43B;&#x438; &#x432;&#x44B; &#x438;&#x441;&#x43F;&#x43E;&#x43B;&#x44C;&#x437;&#x443;&#x435;&#x442;&#x435; jvm &#x438;&#x43B;&#x438; &#x43B;&#x44E;&#x431;&#x43E;&#x439; &#x434;&#x440;&#x443;&#x433;&#x43E;&#x439; &#x44F;&#x437;&#x44B;&#x43A; &#x441;&#x43E; &#x441;&#x431;&#x43E;&#x440;&#x43A;&#x43E;&#x439; &#x43C;&#x443;&#x441;&#x43E;&#x440;&#x430;, &#x435;&#x441;&#x442;&#x44C; &#x441;&#x43C;&#x44B;&#x441;&#x43B; &#x43E;&#x431;&#x440;&#x430;&#x442;&#x438;&#x442;&#x44C; &#x432;&#x43D;&#x438;&#x43C;&#x430;&#x43D;&#x438;&#x435; &#x43D;&#x430; &#x43A;&#x43E;&#x442;&#x43B;&#x438;&#x43D;. &#x41B;&#x438;&#x447;&#x43D;&#x43E; &#x434;&#x43B;&#x44F; &#x43C;&#x435;&#x43D;&#x44F;, &#x43A;&#x43E;&#x442;&#x43B;&#x438;&#x43D; &mdash; &#x44D;&#x442;&#x43E; &#x442;&#x43E;&#x442; &#x438;&#x43D;&#x441;&#x442;&#x440;&#x443;&#x43C;&#x435;&#x43D;&#x442;, &#x43A;&#x43E;&#x442;&#x43E;&#x440;&#x43E;&#x433;&#x43E; &#x44F; &#x434;&#x43E;&#x43B;&#x433;&#x43E; &#x436;&#x434;&#x430;&#x43B; &#x438; &#x442;&#x435;&#x43F;&#x435;&#x440;&#x44C; &#x43D;&#x435; &#x43F;&#x440;&#x435;&#x434;&#x441;&#x442;&#x430;&#x432;&#x43B;&#x44F;&#x44E;, &#x43A;&#x430;&#x43A; &#x43C;&#x43E;&#x433; &#x431;&#x44B; &#x43E;&#x431;&#x445;&#x43E;&#x434;&#x438;&#x442;&#x44C;&#x441;&#x44F; &#x431;&#x435;&#x437; &#x43D;&#x435;&#x433;&#x43E;.</p>
]]></description><link>https://habrahabr.ru/post/277479/</link><guid isPermaLink="true">https://habrahabr.ru/post/277479/</guid><category><![CDATA[Kotlin]]></category><category><![CDATA[Review]]></category><dc:creator><![CDATA[@fogone]]></dc:creator><pubDate>Sat, 20 Feb 2016 05:25:00 GMT</pubDate></item><item><title><![CDATA[Kotlin — Love at first line]]></title><description><![CDATA[<h2>Kotlin&#x200A;&mdash;&#x200A;Love at first line</h2>
<p>Kotlin 1.0 has been <a href="https://blog.jetbrains.com/kotlin/2016/02/kotlin-1-0-released-pragmatic-language-for-jvm-and-android/">released</a>
a few days ago and it&rsquo;s time to check out its awesome features.</p>
<p>For those of you who might have been living under a rock and don&rsquo;t know what Kotlin is&#x200A;&mdash;&#x200A;Kotlin is a new JVM programming language that tries to &ldquo;fill in the gaps&rdquo; that Java has. It&rsquo;s 100% interoperable with Java&#x200A;&mdash;&#x200A;meaning that you can have a mixed project that contains Kotlin &amp; Java classes. The classes are compiled to Java bytecode, and that bytecode is &ldquo;runnable&rdquo; on Java6+, which makes it runnable on Android.</p>
<p>The language is awesome, and combined with the <a href="https://github.com/Kotlin/anko">Anko</a> library it&rsquo;s even <a href="http://www.urbandictionary.com/define.php?term=Awesome-er">awesome-er*</a>. I won&rsquo;t be explaining the syntax of the language (for that you have the official <a href="https://kotlinlang.org/">page</a>). I&rsquo;m just going to try and expose a few of it&rsquo;s awesome features.</p>
<h3><a href="https://kotlinlang.org/docs/reference/functions.html#single-expression-functions">Single-Expression functions</a></h3>
<p>If we have a function that boils down to a single expression, we can use the single-expression function syntax:</p>
<pre><code>override fun equals(other: Any?) = other is Task &amp;&amp; other.id == id
</code></pre>
<h3><a href="https://kotlinlang.org/docs/reference/extensions.html">Extensions</a></h3>
<p>Extensions allow us to extend any existing class by adding functions and properties without the need to inherit from that class.</p>
<pre><code class="hljs language-kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> ViewGroup.<span class="hljs-title">inflate</span><span class="hljs-params">(
    @LayoutRes layoutRes: <span class="hljs-type">Int,
    attachToRoot: Boolean</span> = false)</span> =</span>

    LayoutInflater
        .from(context)
        .inflate(layoutRes, this, attachToRoot)</code></pre>
<p>The extension function above adds the <strong>.inflate(...)</strong> method to the ViewGroup class, so instead of doing this every time:</p>
<pre><code class="hljs language-kotlin"><span class="hljs-variable"><span class="hljs-keyword">val</span> view</span> = LayoutInflater
    .from(parent)
    .inflate(R.layout.todo_list_item, parent, <span class="hljs-literal">false</span>)</code></pre>
<p>now we can just do this:</p>
<pre><code class="hljs language-kotlin"><span class="hljs-variable"><span class="hljs-keyword">val</span> view</span> = parent.inflate(R.layout.todo_list_item)</code></pre>
<p>or:</p>
<pre><code class="hljs language-kotlin"><span class="hljs-variable"><span class="hljs-keyword">val</span> view</span> = parent.inflate(R.layout.todo_list_item,
    attachToRoot = <span class="hljs-literal">true</span>)</code></pre>
<p>I guess you already noticed that Kotlin also supports <a href="https://kotlinlang.org/docs/reference/functions.html#default-arguments">default arguments</a>.</p>
<h3><a href="https://kotlinlang.org/docs/reference/lambdas.html#lambda-expressions-and-anonymous-functions">Lambda</a></h3>
<p>Intentionally left blank.</p>
<h3><a href="https://kotlinlang.org/docs/reference/null-safety.html">Optionals / Null safety</a></h3>
<p>Forget about NullPointerExceptions. Kotlin has 2 types of variables, nullable and non-nullable. If we declare our variable as non-nullable&#x200A;&mdash;&#x200A;the compiler won&rsquo;t let us assign a null value to it. Only nullable variables can be null.</p>
<pre><code class="hljs language-kotlin"><span class="hljs-variable"><span class="hljs-keyword">var</span> nonNullable</span>: String = <span class="hljs-string">"This is a title"</span> <span class="hljs-comment">// Non-nullable variable</span>
<span class="hljs-variable"><span class="hljs-keyword">var</span> nullable</span>: String? = <span class="hljs-literal">null</span> <span class="hljs-comment">// Nullable variable</span></code></pre>
<p>In case of the <em>nonNullable</em> variable, we can safely call methods on it, without any null checks, because it <em>cannot have a null value</em>.</p>
<p>In case of the <em>nullable</em> variable, we can safely call methods with the help of the <em>safe-trasversal operator (?.)</em>, and forget about null checks:</p>
<pre><code class="hljs language-kotlin"><span class="hljs-variable"><span class="hljs-keyword">val</span> length</span> = nullable?.length</code></pre>
<p>The code above won&rsquo;t fail, even if the <em>nullable</em> variable has a null value. In that case, the value of the <em>length</em> variable will be <em>null</em>.</p>
<h3><a href="https://kotlinlang.org/docs/reference/null-safety.html#elvis-operator">Elvis operator</a></h3>
<p>The result of a <strong>safe call (?.)</strong> is always a nullable variable. So in cases where we are calling a method on a null variable&#x200A;&mdash;&#x200A;the result will be null.</p>
<p>That can be inconvenient sometimes. For example, in the code sample above, we want our <strong>length</strong> variable to be a non-null variable because it&rsquo;s logical for it to have a value of 0 in case of a null string.</p>
<p>In cases like that, we can use the <strong>elvis operator ( ?: )</strong>.</p>
<pre><code class="hljs language-kotlin"><span class="hljs-variable"><span class="hljs-keyword">val</span> length</span> = nullable?.length ?: <span class="hljs-number">0</span></code></pre>
<p>The elvis operator will use the left side value if it&rsquo;s not null. In case the left side value is null, it will use the right non-nullable value.</p>
<p>You can even use it to make your sanity checks more readable.</p>
<pre><code class="hljs language-kotlin">    ...
}</code></pre>
<p>With help of the elvis operator, the same method in Kotlin will look like this:</p>
<pre><code class="hljs language-kotlin"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">myMethod</span><span class="hljs-params">(str: <span class="hljs-type">String?</span>)</span> {</span>
    <span class="hljs-comment">// Sanity check</span>
    str ?: <span class="hljs-keyword">return</span>

    ...
}</code></pre>
<p>The great part of using this is that the compiler will <strong>smart cast</strong> our <strong>str</strong> variable to a non-nullable variable after the &ldquo;<em>str ?: return</em>&rdquo; line.</p>
<h3><a href="https://kotlinlang.org/docs/reference/properties.html#properties-and-fields">Optional getters/setters</a></h3>
<p>Unlike in Java, where we are used to define all of our class properties <strong><em>private</em></strong> and write getters and setters, in Kotlin we write getters and setters only if we want to have some custom behaviour.</p>
<p>The simplest definition looks like this:</p>
<pre><code class="hljs language-kotlin"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Task</span> </span>{
   <span class="hljs-variable"><span class="hljs-keyword">var</span> completed</span> = <span class="hljs-literal">false</span>
}</code></pre>
<p>And we can access the property:</p>
<pre><code class="hljs language-kotlin"><span class="hljs-variable"><span class="hljs-keyword">val</span> task</span> = Task()
<span class="hljs-keyword">if</span> (task.completed) ...</code></pre>
<p>If we wan&rsquo;t to expose just the getter and allow setting the value only from within the class:</p>
<pre><code class="hljs language-kotlin"><span class="hljs-variable"><span class="hljs-keyword">var</span> completed</span> = <span class="hljs-literal">false</span>
    <span class="hljs-keyword">private</span> <span class="hljs-keyword">set</span></code></pre>
<p>And if we want to have completely custom behaviour:</p>
<pre><code class="hljs language-kotlin"><span class="hljs-variable"><span class="hljs-keyword">var</span> completedInt</span> = <span class="hljs-number">0</span>
<span class="hljs-variable"><span class="hljs-keyword">var</span> completed</span>: <span class="hljs-keyword">Boolean</span>
    <span class="hljs-keyword">get</span>() = completedInt == <span class="hljs-number">1</span>
    <span class="hljs-keyword">set</span>(value) { completedInt = <span class="hljs-keyword">if</span> (value) <span class="hljs-number">1</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span> }</code></pre>
<h3><a href="https://kotlinlang.org/docs/reference/delegated-properties.html#lazy">Lazy properties</a></h3>
<p>Kotlin allows us to declare lazy properties&#x200A;&mdash;&#x200A;properties that are initialized when we first access them.</p>
<pre><code class="hljs language-kotlin"><span class="hljs-keyword">private</span> <span class="hljs-variable"><span class="hljs-keyword">val</span> recyclerView by lazy {
    find&lt;RecyclerView&gt;(R.id.task_list_new)
}</span></code></pre>
<p>When we first access the <strong>recyclerView</strong> property, the lambda expression is evaluated and the returned value from the lamdba is saved and returned in that and every subsequent call.</p>
<h3><a href="https://kotlinlang.org/docs/reference/delegated-properties.html#observable">Observable properties</a></h3>
<p>In Kotlin we can observe properties. The syntax for declaring such properties is the following:</p>
<pre><code class="hljs language-kotlin"><span class="hljs-variable"><span class="hljs-keyword">var</span> tasks by Delegates.observable(mutableListOf&lt;Task&gt;()) {
    prop, old, new -&gt;
        notifyDataSetChanged()
        dataChangedListener?.invoke()
}</span></code></pre>
<p>This means that we are going to be notified every time the value of our property changes (the provided lambda will be called).</p>
<h2><a href="https://github.com/Kotlin/anko">Anko extensions</a></h2>
<p>Anko is a great library and has a lot of great extensions. I will list a couple.</p>
<h3>find<T>(id: Int)</h3>
<p>It replaces the findViewById(int id) method. This extension function returns the view already cast to the given type T, so there is no need to cast it.</p>
<pre><code class="hljs language-kotlin"><span class="hljs-variable"><span class="hljs-keyword">val</span> recyclerView</span> = find<span class="hljs-type">&lt;RecyclerView&gt;</span>(R.id.task_list_new)</code></pre>
<h3><a href="https://github.com/Kotlin/anko/blob/master/doc/SQLITE.md#anko-heart-sqlite">SQLite</a></h3>
<p>Anko has great support for SQLite databases. For a complete overview, check their <a href="https://github.com/Kotlin/anko/blob/master/doc/SQLITE.md#anko-heart-sqlite">guide</a>. I will just show you one example:</p>
<pre><code class="hljs language-kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">allTasks</span><span class="hljs-params">()</span> = use {</span>
    select(table)
        .orderBy(completed)
        .orderBy(priority, SqlOrderDirection.DESC)
        .exec {
            parseList(parser)
        }
}</code></pre>
<p>The <strong>use {&hellip;}</strong> function opens the database for us, and closes it after the given lambda executes. So we don&rsquo;t have to worry about closing it anymore and can forget about all those <strong>try {&hellip;} catch(&hellip;) {&hellip;} finally {&hellip;}</strong> blocks. Inside the lambda that we pass to the <strong>use</strong> function, <strong>this</strong> references our database. That is the power of Kotlin&rsquo;s <strong>type-safe builders</strong>. Read more about them <a href="http://blog.jetbrains.com/kotlin/2011/10/dsls-in-kotlin-part-1-whats-in-the-toolbox-builders/">here</a> and <a href="https://kotlinlang.org/docs/reference/type-safe-builders.html">here</a>.</p>
<p>The <strong>select(&hellip;)&hellip;exec {}</strong> call chain, selects data from the database. And the <strong>parseList(parser)</strong> call parses the rows of data and returns a list of objects, that our <strong>parser</strong> returns. The definition of our <strong>parser</strong> is:</p>
<pre><code class="hljs language-kotlin"><span class="hljs-variable"><span class="hljs-keyword">val</span> parser</span> = rowParser {
    id: <span class="hljs-keyword">Int</span>, name: String, priority: <span class="hljs-keyword">Int</span>, completed: <span class="hljs-keyword">Int</span> -&gt;
    Task(id, name, priority, completed)
}</code></pre>
]]></description><link>https://medium.com/@dime.kotevski/kotlin-love-at-first-line-7127befe240f#.p5hp6dxlh</link><guid isPermaLink="true">https://medium.com/@dime.kotevski/kotlin-love-at-first-line-7127befe240f#.p5hp6dxlh</guid><category><![CDATA[Anko]]></category><category><![CDATA[Android]]></category><category><![CDATA[Kotlin]]></category><dc:creator><![CDATA[Dimitar Kotevski]]></dc:creator><pubDate>Sun, 21 Feb 2016 09:13:00 GMT</pubDate></item><item><title><![CDATA[Kotlin: Easily storing a list in SharedPreferences with Custom Accessors]]></title><description><![CDATA[<p>SharedPreferences is at its core a simple tool with a deceptively verbose interface that weighs heavily on developer productivity. Kotlin on its own will not necessarily make Java-interfacing code pretty and concise, but you can apply a few particular concepts to create an elegant, downright easy-to-use solution to a common use-case:</p>
<p><strong>Storing a list of strings that will persist across app sessions.</strong></p>
<p>You can write code as if you have a regular old stored List<String> property, with the additional benefit that it is always in sync with SharedPreferences (*):</p>
<pre><code class="hljs language-kotlin"><span class="hljs-comment">// Adding to a list</span>
<span class="hljs-keyword">if</span> (syncingSongIds.indexOf(song.id) == <span class="hljs-number">-1</span>) {
    syncingSongIds += song.id
}

<span class="hljs-comment">// Iterate through a list and do something with each element</span>
syncingSongIds.forEach { id -&gt;
    stopSyncing(id)
}

<span class="hljs-comment">// Best of all: subtracting from a list</span>
<span class="hljs-variable"><span class="hljs-keyword">val</span> intent</span> = Intent(DONE_SYNCING)
intent.putExtra(<span class="hljs-string">"song"</span>, song)
sendBroadcast(intent) <span class="hljs-comment">// send a broadcast that we're done syncing</span>

syncingSongIds -= song.id <span class="hljs-comment">// and remove the song id from the persisted list of syncing songs</span></code></pre>
<p>If you&rsquo;re interested, read on.</p>
<p>I&rsquo;m assuming you&rsquo;re doing this all inside an object or class with access to a <code>context</code> property.</p>
<p>First of all, let&rsquo;s set up easy access to the SharedPreferences file we&rsquo;ll be reading/writing:</p>
<pre><code class="hljs language-kotlin"><span class="hljs-variable"><span class="hljs-keyword">val</span> sharedPreferences</span>: SharedPreferences by lazy {
    <span class="hljs-comment">// Replace with your code for accessing shared preferences</span>
    <span class="hljs-comment">// e.g. context.getSharedPreferences(SHARED_PREFERENCES_FILENAME, Context.MODE_PRIVATE)</span>
}</code></pre>
<p>For the uninitiated, the beauty of lazy properties (<code>by lazy</code>) is that they are initialized when you first access the property (i.e. when you first type <code>sharedPreferences</code>, it will call <code>context.getSharedPreferences(...)</code>) and stored from then on, so in this case, you will only ever call <code>context.getSharedPreferences(...)</code> once in the lifetime of your object.</p>
<p><em>Skip this paragraph if you already know what a property without a backing field is</em>. In Java, instance variables are conventionally stored properties. In Kotlin, we get the option to provide completely custom accessors for a property without having any storage for the property. That means we can have a property called <code>count: Float</code> on a class <code>Counter</code> where the property is never actually <strong>stored</strong> on the Counter class. It&rsquo;s very useful in instances where you want to have a property that wraps data stored somewhere else (database, server) without having to copy that data into the class containing the property. So the count property on Counter might actually be stored in (i.e., &ldquo;backed by&rdquo;) a file on disk: every time you increment the counter, it writes directly to the file on disk, and every time you retrieve the counter&rsquo;s value, it reads directly from the file on disk. <em>While this particular example out of context is not a great idea as it incurs tons of I/O overhead, I feel it effectively illustrates the concept of a non-stored property</em>.</p>
<p>We are going to create a property that reads directly from, and writes directly to, SharedPreferences, using Kotlin&rsquo;s syntax for custom accessors:</p>
<pre><code class="hljs language-kotlin">var syncingSongIds: List
    get() {
        val raw = sharedPreferences.getString("syncing_song_ids", null) ?: return emptyList()
        return raw.split(",")
    }
    set(value) {
        sharedPreferences.edit().putString("syncing_song_idslue.joinToString(",")).apply()
    }</code></pre>
<p>That&rsquo;s actually all you need to do for really simple strings that are guaranteed not to have commas in them.</p>
<p><strong>NB: This will only work for very simple strings. If you want to extend this functionality to be more powerful and accept any string or object type</strong>, try using Google GSON or another JSON serialization library (JSONObject from the Android SDK is perfectly workable, if quirky) and replacing <code>raw.split(&quot;,&quot;)</code> and <code>value.joinToString(&quot;,&quot;)</code> with a JSON -&gt; Object, and Object -&gt; JSON conversion respectively.</p>
<p><strong>NB: Because we call <code>apply()</code> in the setter rather than <code>commit</code>, this code is relatively safe to call on the main thread but it does NOT have immediate consistency</strong>. That is, if you call <code>syncingSongIds += &quot;asdf&quot;; print(syncingSongIds)</code> it may not include &ldquo;asdf&rdquo; in the printout. <strong>To fix this, change <code>apply()</code> to <code>commit()</code>, but beware of incurring additional overhead</strong> as the setter now has to write to disk synchronously every time it is called. It is your decision as to whether or not to call the setter on the main thread; I think it is relatively safe when done sparingly, but I would certainly keep an eye on that particular setter and make sure it doesn&rsquo;t adversely impact performance in your app noticeably.</p>
<p>* I&rsquo;m not making any synchronicity guarantees&ndash;maybe as a part two, but ultimately if your code is not thread-safe, you should still modify and test these code snippets to fit your synchronicity needs.</p>
]]></description><link>http://blog.dennislysenko.com/2016/01/22/kotlin-easily-storing-a-list-in-sharedpreferences-with-custom-accessors/</link><guid isPermaLink="true">http://blog.dennislysenko.com/2016/01/22/kotlin-easily-storing-a-list-in-sharedpreferences-with-custom-accessors/</guid><category><![CDATA[Android]]></category><category><![CDATA[Kotlin]]></category><dc:creator><![CDATA[Dennis Lysenko]]></dc:creator><pubDate>Mon, 22 Feb 2016 09:36:00 GMT</pubDate></item><item><title><![CDATA[A Very Peculiar, but Possibly Cunning Kotlin Language Feature.]]></title><description><![CDATA[<p>This has caught me by surprise. After studying the <a href="https://kotlinlang.org/">Kotlin language</a> to learn about how to best leverage this interesting new language for <a href="http://www.jooq.org/">jOOQ</a>, I stumbled upon this puzzler. What do you think the following program will print?</p>
<pre><code class="hljs language-kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">(args: <span class="hljs-type">Array</span>)</span> {</span>
    (<span class="hljs-number">1.</span><span class="hljs-number">.5</span>).forEach {
        <span class="hljs-keyword">if</span> (it == <span class="hljs-number">3</span>)
            <span class="hljs-keyword">return</span>
        print(it)
    }

    print(<span class="hljs-string">"done"</span>)
}</code></pre>
<p>Well... You might have guessed wrong. The above will print:</p>
<pre><code>12
</code></pre>
<p>It will NOT print what most people might expect:</p>
<pre><code>1245done
</code></pre>
<p><strong>Note to those of you who are not surprised</strong>:</p>
<p>The above is peculiar for someone used to working with Java 8, where the following code will indeed print 1245done:</p>
<pre><code class="hljs language-java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
    IntStream.rangeClosed(<span class="hljs-number">1</span>, <span class="hljs-number">5</span>).forEach(it -&gt; {
        <span class="hljs-keyword">if</span> (it == <span class="hljs-number">3</span>)
            <span class="hljs-keyword">return</span>;

        System.out.print(it);
    });

    System.out.print(<span class="hljs-string">"done"</span>);
}</code></pre>
<p>The syntactical reason is explained in this section of the Kotlin manual:
<a href="https://kotlinlang.org/docs/reference/returns.html">https://kotlinlang.org/docs/reference/returns.html</a></p>
<p>In lambdas / closures, the return statement will not (necessarily) return from the lambda / closure, but from the immediate enclosing scope of the lambda / closure. The rationale has been kindly given to me by Dmitry Jemerov from JetBrains in two tweets:</p>
<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr"><a href="https://twitter.com/lukaseder">@lukaseder</a> <a href="https://twitter.com/kotlin">@kotlin</a> reason is very simple: we want to have lambdas that work exactly like built-in language features (e.g. synchronised)</p>&mdash; Dmitry Jemerov (@intelliyole) <a href="https://twitter.com/intelliyole/status/701729566453321728">February 22, 2016</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
<blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr"><a href="https://twitter.com/lukaseder">@lukaseder</a> therefore ‘return’ in a lambda passed to ‘synchronised’ function must do the same as a ‘return’ in a Java ‘synchronised’ block</p>&mdash; Dmitry Jemerov (@intelliyole) <a href="https://twitter.com/intelliyole/status/701729699198799874">February 22, 2016</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script>
<p>Cunningly, the Kotlin language has removed language-based support for Java constructs like try-with-resources, or the synchronized statement. That&rsquo;s very reasonable, because these language constructs don&rsquo;t necessarily belong in the language (<a href="http://blog.jooq.org/2016/01/12/if-java-were-designed-today-the-synchronizable-interface/">as we&rsquo;ve previously claimed in another blog post</a>), but could be moved to libraries instead. For example:</p>
<pre><code class="hljs language-kotlin"><span class="hljs-comment">// try-with-resources is emulated using an</span>
<span class="hljs-comment">// extension function "use"</span>
OutputStreamWriter(r.getOutputStream()).use {
    it.write('a')
}</code></pre>
<p>(criticism here)</p>
<p>Or:</p>
<pre><code class="hljs language-kotlin"><span class="hljs-comment">// Synchronized is a function!</span>
<span class="hljs-variable"><span class="hljs-keyword">val</span> x</span> = synchronized (lock, { computation() })</code></pre>
<p>See also:
<a href="https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/synchronized.html">https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/synchronized.html</a></p>
<p>After all, even in Java, the language feature only works because the language depends on library types, like Iterable (foreach), AutoCloseable (try-with-resources), or JVM features (monitor on each reference for synchronized)</p>
<h2>So, what&rsquo;s the deal with return?</h2>
<p>Along the lines of the above rationale, when language designers want to avoid language constructs for things that can be implemented with libraries, but still want you to feel like these were language constructs, then the only reasonable meaning of return inside of such a &ldquo;construct-ish&rdquo; lambda / closure is to return from the outer scope. So, when you write something like:</p>
<pre><code class="hljs language-kotlin"><span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-title">main</span><span class="hljs-params">(args : <span class="hljs-type">Array</span>)</span> {</span>
    <span class="hljs-variable"><span class="hljs-keyword">val</span> lock</span> = Object()
    <span class="hljs-variable"><span class="hljs-keyword">val</span> x</span> = synchronized(lock, {
        <span class="hljs-keyword">if</span> (<span class="hljs-number">1</span> == <span class="hljs-number">1</span>)
            <span class="hljs-keyword">return</span>

        <span class="hljs-string">"1"</span>
    })

    print(x)
}</code></pre>
<p>The real intention is for this to be the equivalent of the following Java code:</p>
<pre><code class="hljs language-java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>{
    Object lock = <span class="hljs-keyword">new</span> Object();
    String x;

    <span class="hljs-keyword">synchronized</span> (lock) {
        <span class="hljs-keyword">if</span> (<span class="hljs-number">1</span> == <span class="hljs-number">1</span>)
            <span class="hljs-keyword">return</span>;

        x = <span class="hljs-string">"1"</span>;
    }

    System.out.println(x);
}</code></pre>
<p>In the Java case, obviously, the return statement exits the main() method, because there is no other reasonable stack frame to return from. Unlike in Kotlin, where one might argue the lambda / closure would produce its own stack frame.</p>
<p>But it really doesn&rsquo;t. The reason for this is the inline modifier on the synchronized function:</p>
<pre><code class="hljs language-kotlin"><span class="hljs-keyword">public</span> <span class="hljs-keyword">inline</span> <span class="hljs-function"><span class="hljs-keyword">fun</span> <span class="hljs-type">&lt;R&gt;</span> <span class="hljs-title">synchronized</span><span class="hljs-params">(lock: <span class="hljs-type">Any, block: (</span>)</span> -&gt; R): R {</span>
    monitorEnter(lock)
    <span class="hljs-keyword">try</span> {
        <span class="hljs-keyword">return</span> block()
    }
    <span class="hljs-keyword">finally</span> {
        monitorExit(lock)
    }
}</code></pre>
<p>See also:
<a href="https://kotlinlang.org/docs/reference/inline-functions.html">https://kotlinlang.org/docs/reference/inline-functions.html</a></p>
<p>Which means that the block closure passed as an argument isn&rsquo;t really a pure lambda expression, but just syntactic sugar embedded in the call-site&rsquo;s scope.</p>
<p>Weird. Cunning. Clever. But a bit unexpected.</p>
<p>Is this a good idea? Or will the language designers regret this, later on? Are all lambdas / closures potentially &ldquo;language construct-ish&rdquo;, where such a return statement is expected to leave the outer scope? Or are there clear cases where this inline behaviour just makes total sense?</p>
<p>We&rsquo;ll see. In any case, it is very interesting for a language to have chosen this path.</p>
]]></description><link>http://blog.jooq.org/2016/02/22/a-very-peculiar-but-possibly-cunning-kotlin-language-feature/</link><guid isPermaLink="true">http://blog.jooq.org/2016/02/22/a-very-peculiar-but-possibly-cunning-kotlin-language-feature/</guid><category><![CDATA[Kotlin]]></category><category><![CDATA[Puzzlers]]></category><dc:creator><![CDATA[Lukas Eder]]></dc:creator><pubDate>Mon, 22 Feb 2016 12:33:00 GMT</pubDate></item></channel></rss>